/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/archiver";
exports.ids = ["vendor-chunks/archiver"];
exports.modules = {

/***/ "(ssr)/./node_modules/archiver/index.js":
/*!****************************************!*\
  !*** ./node_modules/archiver/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Archiver Vending\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var Archiver = __webpack_require__(/*! ./lib/core */ \"(ssr)/./node_modules/archiver/lib/core.js\");\nvar formats = {};\n/**\n * Dispenses a new Archiver instance.\n *\n * @constructor\n * @param  {String} format The archive format to use.\n * @param  {Object} options See [Archiver]{@link Archiver}\n * @return {Archiver}\n */ var vending = function(format, options) {\n    return vending.create(format, options);\n};\n/**\n * Creates a new Archiver instance.\n *\n * @param  {String} format The archive format to use.\n * @param  {Object} options See [Archiver]{@link Archiver}\n * @return {Archiver}\n */ vending.create = function(format, options) {\n    if (formats[format]) {\n        var instance = new Archiver(format, options);\n        instance.setFormat(format);\n        instance.setModule(new formats[format](options));\n        return instance;\n    } else {\n        throw new Error(\"create(\" + format + \"): format not registered\");\n    }\n};\n/**\n * Registers a format for use with archiver.\n *\n * @param  {String} format The name of the format.\n * @param  {Function} module The function for archiver to interact with.\n * @return void\n */ vending.registerFormat = function(format, module1) {\n    if (formats[format]) {\n        throw new Error(\"register(\" + format + \"): format already registered\");\n    }\n    if (typeof module1 !== \"function\") {\n        throw new Error(\"register(\" + format + \"): format module invalid\");\n    }\n    if (typeof module1.prototype.append !== \"function\" || typeof module1.prototype.finalize !== \"function\") {\n        throw new Error(\"register(\" + format + \"): format module missing methods\");\n    }\n    formats[format] = module1;\n};\n/**\n * Check if the format is already registered.\n * \n * @param {String} format the name of the format.\n * @return boolean\n */ vending.isRegisteredFormat = function(format) {\n    if (formats[format]) {\n        return true;\n    }\n    return false;\n};\nvending.registerFormat(\"zip\", __webpack_require__(/*! ./lib/plugins/zip */ \"(ssr)/./node_modules/archiver/lib/plugins/zip.js\"));\nvending.registerFormat(\"tar\", __webpack_require__(/*! ./lib/plugins/tar */ \"(ssr)/./node_modules/archiver/lib/plugins/tar.js\"));\nvending.registerFormat(\"json\", __webpack_require__(/*! ./lib/plugins/json */ \"(ssr)/./node_modules/archiver/lib/plugins/json.js\"));\nmodule.exports = vending;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUM7QUFFdkIsSUFBSUMsVUFBVSxDQUFDO0FBRWY7Ozs7Ozs7Q0FPQyxHQUNELElBQUlDLFVBQVUsU0FBU0MsTUFBTSxFQUFFQyxPQUFPO0lBQ3BDLE9BQU9GLFFBQVFHLE1BQU0sQ0FBQ0YsUUFBUUM7QUFDaEM7QUFFQTs7Ozs7O0NBTUMsR0FDREYsUUFBUUcsTUFBTSxHQUFHLFNBQVNGLE1BQU0sRUFBRUMsT0FBTztJQUN2QyxJQUFJSCxPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixJQUFJRyxXQUFXLElBQUlQLFNBQVNJLFFBQVFDO1FBQ3BDRSxTQUFTQyxTQUFTLENBQUNKO1FBQ25CRyxTQUFTRSxTQUFTLENBQUMsSUFBSVAsT0FBTyxDQUFDRSxPQUFPLENBQUNDO1FBRXZDLE9BQU9FO0lBQ1QsT0FBTztRQUNMLE1BQU0sSUFBSUcsTUFBTSxZQUFZTixTQUFTO0lBQ3ZDO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDREQsUUFBUVEsY0FBYyxHQUFHLFNBQVNQLE1BQU0sRUFBRVEsT0FBTTtJQUM5QyxJQUFJVixPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixNQUFNLElBQUlNLE1BQU0sY0FBY04sU0FBUztJQUN6QztJQUVBLElBQUksT0FBT1EsWUFBVyxZQUFZO1FBQ2hDLE1BQU0sSUFBSUYsTUFBTSxjQUFjTixTQUFTO0lBQ3pDO0lBRUEsSUFBSSxPQUFPUSxRQUFPQyxTQUFTLENBQUNDLE1BQU0sS0FBSyxjQUFjLE9BQU9GLFFBQU9DLFNBQVMsQ0FBQ0UsUUFBUSxLQUFLLFlBQVk7UUFDcEcsTUFBTSxJQUFJTCxNQUFNLGNBQWNOLFNBQVM7SUFDekM7SUFFQUYsT0FBTyxDQUFDRSxPQUFPLEdBQUdRO0FBQ3BCO0FBRUE7Ozs7O0NBS0MsR0FDRFQsUUFBUWEsa0JBQWtCLEdBQUcsU0FBVVosTUFBTTtJQUMzQyxJQUFJRixPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFFQUQsUUFBUVEsY0FBYyxDQUFDLE9BQU9WLG1CQUFPQSxDQUFDO0FBQ3RDRSxRQUFRUSxjQUFjLENBQUMsT0FBT1YsbUJBQU9BLENBQUM7QUFDdENFLFFBQVFRLGNBQWMsQ0FBQyxRQUFRVixtQkFBT0EsQ0FBQztBQUV2Q1csT0FBT0ssT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FyY2hpdmVyL2luZGV4LmpzPzBjOTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcmNoaXZlciBWZW5kaW5nXG4gKlxuICogQGlnbm9yZVxuICogQGxpY2Vuc2UgW01JVF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FyY2hpdmVyanMvbm9kZS1hcmNoaXZlci9ibG9iL21hc3Rlci9MSUNFTlNFfVxuICogQGNvcHlyaWdodCAoYykgMjAxMi0yMDE0IENocmlzIFRhbGtpbmd0b24sIGNvbnRyaWJ1dG9ycy5cbiAqL1xudmFyIEFyY2hpdmVyID0gcmVxdWlyZSgnLi9saWIvY29yZScpO1xuXG52YXIgZm9ybWF0cyA9IHt9O1xuXG4vKipcbiAqIERpc3BlbnNlcyBhIG5ldyBBcmNoaXZlciBpbnN0YW5jZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSAge1N0cmluZ30gZm9ybWF0IFRoZSBhcmNoaXZlIGZvcm1hdCB0byB1c2UuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgU2VlIFtBcmNoaXZlcl17QGxpbmsgQXJjaGl2ZXJ9XG4gKiBAcmV0dXJuIHtBcmNoaXZlcn1cbiAqL1xudmFyIHZlbmRpbmcgPSBmdW5jdGlvbihmb3JtYXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHZlbmRpbmcuY3JlYXRlKGZvcm1hdCwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgQXJjaGl2ZXIgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBmb3JtYXQgVGhlIGFyY2hpdmUgZm9ybWF0IHRvIHVzZS5cbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBTZWUgW0FyY2hpdmVyXXtAbGluayBBcmNoaXZlcn1cbiAqIEByZXR1cm4ge0FyY2hpdmVyfVxuICovXG52ZW5kaW5nLmNyZWF0ZSA9IGZ1bmN0aW9uKGZvcm1hdCwgb3B0aW9ucykge1xuICBpZiAoZm9ybWF0c1tmb3JtYXRdKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEFyY2hpdmVyKGZvcm1hdCwgb3B0aW9ucyk7XG4gICAgaW5zdGFuY2Uuc2V0Rm9ybWF0KGZvcm1hdCk7XG4gICAgaW5zdGFuY2Uuc2V0TW9kdWxlKG5ldyBmb3JtYXRzW2Zvcm1hdF0ob3B0aW9ucykpO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlKCcgKyBmb3JtYXQgKyAnKTogZm9ybWF0IG5vdCByZWdpc3RlcmVkJyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgZm9ybWF0IGZvciB1c2Ugd2l0aCBhcmNoaXZlci5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGZvcm1hdCBUaGUgbmFtZSBvZiB0aGUgZm9ybWF0LlxuICogQHBhcmFtICB7RnVuY3Rpb259IG1vZHVsZSBUaGUgZnVuY3Rpb24gZm9yIGFyY2hpdmVyIHRvIGludGVyYWN0IHdpdGguXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xudmVuZGluZy5yZWdpc3RlckZvcm1hdCA9IGZ1bmN0aW9uKGZvcm1hdCwgbW9kdWxlKSB7XG4gIGlmIChmb3JtYXRzW2Zvcm1hdF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlZ2lzdGVyKCcgKyBmb3JtYXQgKyAnKTogZm9ybWF0IGFscmVhZHkgcmVnaXN0ZXJlZCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlZ2lzdGVyKCcgKyBmb3JtYXQgKyAnKTogZm9ybWF0IG1vZHVsZSBpbnZhbGlkJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG1vZHVsZS5wcm90b3R5cGUuYXBwZW5kICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBtb2R1bGUucHJvdG90eXBlLmZpbmFsaXplICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZWdpc3RlcignICsgZm9ybWF0ICsgJyk6IGZvcm1hdCBtb2R1bGUgbWlzc2luZyBtZXRob2RzJyk7XG4gIH1cblxuICBmb3JtYXRzW2Zvcm1hdF0gPSBtb2R1bGU7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBmb3JtYXQgaXMgYWxyZWFkeSByZWdpc3RlcmVkLlxuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IHRoZSBuYW1lIG9mIHRoZSBmb3JtYXQuXG4gKiBAcmV0dXJuIGJvb2xlYW5cbiAqL1xudmVuZGluZy5pc1JlZ2lzdGVyZWRGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gIGlmIChmb3JtYXRzW2Zvcm1hdF0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmVuZGluZy5yZWdpc3RlckZvcm1hdCgnemlwJywgcmVxdWlyZSgnLi9saWIvcGx1Z2lucy96aXAnKSk7XG52ZW5kaW5nLnJlZ2lzdGVyRm9ybWF0KCd0YXInLCByZXF1aXJlKCcuL2xpYi9wbHVnaW5zL3RhcicpKTtcbnZlbmRpbmcucmVnaXN0ZXJGb3JtYXQoJ2pzb24nLCByZXF1aXJlKCcuL2xpYi9wbHVnaW5zL2pzb24nKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gdmVuZGluZzsiXSwibmFtZXMiOlsiQXJjaGl2ZXIiLCJyZXF1aXJlIiwiZm9ybWF0cyIsInZlbmRpbmciLCJmb3JtYXQiLCJvcHRpb25zIiwiY3JlYXRlIiwiaW5zdGFuY2UiLCJzZXRGb3JtYXQiLCJzZXRNb2R1bGUiLCJFcnJvciIsInJlZ2lzdGVyRm9ybWF0IiwibW9kdWxlIiwicHJvdG90eXBlIiwiYXBwZW5kIiwiZmluYWxpemUiLCJpc1JlZ2lzdGVyZWRGb3JtYXQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/core.js":
/*!*******************************************!*\
  !*** ./node_modules/archiver/lib/core.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Archiver Core\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var fs = __webpack_require__(/*! fs */ \"fs\");\nvar glob = __webpack_require__(/*! readdir-glob */ \"(ssr)/./node_modules/readdir-glob/index.js\");\nvar async = __webpack_require__(/*! async */ \"(ssr)/./node_modules/async/dist/async.mjs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\nvar inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar ArchiverError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/archiver/lib/error.js\");\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/readable.js\").Transform);\nvar win32 = process.platform === \"win32\";\n/**\n * @constructor\n * @param {String} format The archive format to use.\n * @param {(CoreOptions|TransformOptions)} options See also {@link ZipOptions} and {@link TarOptions}.\n */ var Archiver = function(format, options) {\n    if (!(this instanceof Archiver)) {\n        return new Archiver(format, options);\n    }\n    if (typeof format !== \"string\") {\n        options = format;\n        format = \"zip\";\n    }\n    options = this.options = util.defaults(options, {\n        highWaterMark: 1024 * 1024,\n        statConcurrency: 4\n    });\n    Transform.call(this, options);\n    this._format = false;\n    this._module = false;\n    this._pending = 0;\n    this._pointer = 0;\n    this._entriesCount = 0;\n    this._entriesProcessedCount = 0;\n    this._fsEntriesTotalBytes = 0;\n    this._fsEntriesProcessedBytes = 0;\n    this._queue = async.queue(this._onQueueTask.bind(this), 1);\n    this._queue.drain(this._onQueueDrain.bind(this));\n    this._statQueue = async.queue(this._onStatQueueTask.bind(this), options.statConcurrency);\n    this._statQueue.drain(this._onQueueDrain.bind(this));\n    this._state = {\n        aborted: false,\n        finalize: false,\n        finalizing: false,\n        finalized: false,\n        modulePiped: false\n    };\n    this._streams = [];\n};\ninherits(Archiver, Transform);\n/**\n * Internal logic for `abort`.\n *\n * @private\n * @return void\n */ Archiver.prototype._abort = function() {\n    this._state.aborted = true;\n    this._queue.kill();\n    this._statQueue.kill();\n    if (this._queue.idle()) {\n        this._shutdown();\n    }\n};\n/**\n * Internal helper for appending files.\n *\n * @private\n * @param  {String} filepath The source filepath.\n * @param  {EntryData} data The entry data.\n * @return void\n */ Archiver.prototype._append = function(filepath, data) {\n    data = data || {};\n    var task = {\n        source: null,\n        filepath: filepath\n    };\n    if (!data.name) {\n        data.name = filepath;\n    }\n    data.sourcePath = filepath;\n    task.data = data;\n    this._entriesCount++;\n    if (data.stats && data.stats instanceof fs.Stats) {\n        task = this._updateQueueTaskWithStats(task, data.stats);\n        if (task) {\n            if (data.stats.size) {\n                this._fsEntriesTotalBytes += data.stats.size;\n            }\n            this._queue.push(task);\n        }\n    } else {\n        this._statQueue.push(task);\n    }\n};\n/**\n * Internal logic for `finalize`.\n *\n * @private\n * @return void\n */ Archiver.prototype._finalize = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return;\n    }\n    this._state.finalizing = true;\n    this._moduleFinalize();\n    this._state.finalizing = false;\n    this._state.finalized = true;\n};\n/**\n * Checks the various state variables to determine if we can `finalize`.\n *\n * @private\n * @return {Boolean}\n */ Archiver.prototype._maybeFinalize = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return false;\n    }\n    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n        return true;\n    }\n    return false;\n};\n/**\n * Appends an entry to the module.\n *\n * @private\n * @fires  Archiver#entry\n * @param  {(Buffer|Stream)} source\n * @param  {EntryData} data\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._moduleAppend = function(source, data, callback) {\n    if (this._state.aborted) {\n        callback();\n        return;\n    }\n    this._module.append(source, data, (function(err) {\n        this._task = null;\n        if (this._state.aborted) {\n            this._shutdown();\n            return;\n        }\n        if (err) {\n            this.emit(\"error\", err);\n            setImmediate(callback);\n            return;\n        }\n        /**\n     * Fires when the entry's input has been processed and appended to the archive.\n     *\n     * @event Archiver#entry\n     * @type {EntryData}\n     */ this.emit(\"entry\", data);\n        this._entriesProcessedCount++;\n        if (data.stats && data.stats.size) {\n            this._fsEntriesProcessedBytes += data.stats.size;\n        }\n        /**\n     * @event Archiver#progress\n     * @type {ProgressData}\n     */ this.emit(\"progress\", {\n            entries: {\n                total: this._entriesCount,\n                processed: this._entriesProcessedCount\n            },\n            fs: {\n                totalBytes: this._fsEntriesTotalBytes,\n                processedBytes: this._fsEntriesProcessedBytes\n            }\n        });\n        setImmediate(callback);\n    }).bind(this));\n};\n/**\n * Finalizes the module.\n *\n * @private\n * @return void\n */ Archiver.prototype._moduleFinalize = function() {\n    if (typeof this._module.finalize === \"function\") {\n        this._module.finalize();\n    } else if (typeof this._module.end === \"function\") {\n        this._module.end();\n    } else {\n        this.emit(\"error\", new ArchiverError(\"NOENDMETHOD\"));\n    }\n};\n/**\n * Pipes the module to our internal stream with error bubbling.\n *\n * @private\n * @return void\n */ Archiver.prototype._modulePipe = function() {\n    this._module.on(\"error\", this._onModuleError.bind(this));\n    this._module.pipe(this);\n    this._state.modulePiped = true;\n};\n/**\n * Determines if the current module supports a defined feature.\n *\n * @private\n * @param  {String} key\n * @return {Boolean}\n */ Archiver.prototype._moduleSupports = function(key) {\n    if (!this._module.supports || !this._module.supports[key]) {\n        return false;\n    }\n    return this._module.supports[key];\n};\n/**\n * Unpipes the module from our internal stream.\n *\n * @private\n * @return void\n */ Archiver.prototype._moduleUnpipe = function() {\n    this._module.unpipe(this);\n    this._state.modulePiped = false;\n};\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @param  {fs.Stats} stats\n * @return {Object}\n */ Archiver.prototype._normalizeEntryData = function(data, stats) {\n    data = util.defaults(data, {\n        type: \"file\",\n        name: null,\n        date: null,\n        mode: null,\n        prefix: null,\n        sourcePath: null,\n        stats: false\n    });\n    if (stats && data.stats === false) {\n        data.stats = stats;\n    }\n    var isDir = data.type === \"directory\";\n    if (data.name) {\n        if (typeof data.prefix === \"string\" && \"\" !== data.prefix) {\n            data.name = data.prefix + \"/\" + data.name;\n            data.prefix = null;\n        }\n        data.name = util.sanitizePath(data.name);\n        if (data.type !== \"symlink\" && data.name.slice(-1) === \"/\") {\n            isDir = true;\n            data.type = \"directory\";\n        } else if (isDir) {\n            data.name += \"/\";\n        }\n    }\n    // 511 === 0777; 493 === 0755; 438 === 0666; 420 === 0644\n    if (typeof data.mode === \"number\") {\n        if (win32) {\n            data.mode &= 511;\n        } else {\n            data.mode &= 4095;\n        }\n    } else if (data.stats && data.mode === null) {\n        if (win32) {\n            data.mode = data.stats.mode & 511;\n        } else {\n            data.mode = data.stats.mode & 4095;\n        }\n        // stat isn't reliable on windows; force 0755 for dir\n        if (win32 && isDir) {\n            data.mode = 493;\n        }\n    } else if (data.mode === null) {\n        data.mode = isDir ? 493 : 420;\n    }\n    if (data.stats && data.date === null) {\n        data.date = data.stats.mtime;\n    } else {\n        data.date = util.dateify(data.date);\n    }\n    return data;\n};\n/**\n * Error listener that re-emits error on to our internal stream.\n *\n * @private\n * @param  {Error} err\n * @return void\n */ Archiver.prototype._onModuleError = function(err) {\n    /**\n   * @event Archiver#error\n   * @type {ErrorData}\n   */ this.emit(\"error\", err);\n};\n/**\n * Checks the various state variables after queue has drained to determine if\n * we need to `finalize`.\n *\n * @private\n * @return void\n */ Archiver.prototype._onQueueDrain = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return;\n    }\n    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n    }\n};\n/**\n * Appends each queue task to the module.\n *\n * @private\n * @param  {Object} task\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._onQueueTask = function(task, callback) {\n    var fullCallback = ()=>{\n        if (task.data.callback) {\n            task.data.callback();\n        }\n        callback();\n    };\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        fullCallback();\n        return;\n    }\n    this._task = task;\n    this._moduleAppend(task.source, task.data, fullCallback);\n};\n/**\n * Performs a file stat and reinjects the task back into the queue.\n *\n * @private\n * @param  {Object} task\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._onStatQueueTask = function(task, callback) {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        callback();\n        return;\n    }\n    fs.lstat(task.filepath, (function(err, stats) {\n        if (this._state.aborted) {\n            setImmediate(callback);\n            return;\n        }\n        if (err) {\n            this._entriesCount--;\n            /**\n       * @event Archiver#warning\n       * @type {ErrorData}\n       */ this.emit(\"warning\", err);\n            setImmediate(callback);\n            return;\n        }\n        task = this._updateQueueTaskWithStats(task, stats);\n        if (task) {\n            if (stats.size) {\n                this._fsEntriesTotalBytes += stats.size;\n            }\n            this._queue.push(task);\n        }\n        setImmediate(callback);\n    }).bind(this));\n};\n/**\n * Unpipes the module and ends our internal stream.\n *\n * @private\n * @return void\n */ Archiver.prototype._shutdown = function() {\n    this._moduleUnpipe();\n    this.end();\n};\n/**\n * Tracks the bytes emitted by our internal stream.\n *\n * @private\n * @param  {Buffer} chunk\n * @param  {String} encoding\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._transform = function(chunk, encoding, callback) {\n    if (chunk) {\n        this._pointer += chunk.length;\n    }\n    callback(null, chunk);\n};\n/**\n * Updates and normalizes a queue task using stats data.\n *\n * @private\n * @param  {Object} task\n * @param  {fs.Stats} stats\n * @return {Object}\n */ Archiver.prototype._updateQueueTaskWithStats = function(task, stats) {\n    if (stats.isFile()) {\n        task.data.type = \"file\";\n        task.data.sourceType = \"stream\";\n        task.source = util.lazyReadStream(task.filepath);\n    } else if (stats.isDirectory() && this._moduleSupports(\"directory\")) {\n        task.data.name = util.trailingSlashIt(task.data.name);\n        task.data.type = \"directory\";\n        task.data.sourcePath = util.trailingSlashIt(task.filepath);\n        task.data.sourceType = \"buffer\";\n        task.source = Buffer.concat([]);\n    } else if (stats.isSymbolicLink() && this._moduleSupports(\"symlink\")) {\n        var linkPath = fs.readlinkSync(task.filepath);\n        var dirName = path.dirname(task.filepath);\n        task.data.type = \"symlink\";\n        task.data.linkname = path.relative(dirName, path.resolve(dirName, linkPath));\n        task.data.sourceType = \"buffer\";\n        task.source = Buffer.concat([]);\n    } else {\n        if (stats.isDirectory()) {\n            this.emit(\"warning\", new ArchiverError(\"DIRECTORYNOTSUPPORTED\", task.data));\n        } else if (stats.isSymbolicLink()) {\n            this.emit(\"warning\", new ArchiverError(\"SYMLINKNOTSUPPORTED\", task.data));\n        } else {\n            this.emit(\"warning\", new ArchiverError(\"ENTRYNOTSUPPORTED\", task.data));\n        }\n        return null;\n    }\n    task.data = this._normalizeEntryData(task.data, stats);\n    return task;\n};\n/**\n * Aborts the archiving process, taking a best-effort approach, by:\n *\n * - removing any pending queue tasks\n * - allowing any active queue workers to finish\n * - detaching internal module pipes\n * - ending both sides of the Transform stream\n *\n * It will NOT drain any remaining sources.\n *\n * @return {this}\n */ Archiver.prototype.abort = function() {\n    if (this._state.aborted || this._state.finalized) {\n        return this;\n    }\n    this._abort();\n    return this;\n};\n/**\n * Appends an input source (text string, buffer, or stream) to the instance.\n *\n * When the instance has received, processed, and emitted the input, the `entry`\n * event is fired.\n *\n * @fires  Archiver#entry\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {EntryData} data See also {@link ZipEntryData} and {@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.append = function(source, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    data = this._normalizeEntryData(data);\n    if (typeof data.name !== \"string\" || data.name.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"ENTRYNAMEREQUIRED\"));\n        return this;\n    }\n    if (data.type === \"directory\" && !this._moduleSupports(\"directory\")) {\n        this.emit(\"error\", new ArchiverError(\"DIRECTORYNOTSUPPORTED\", {\n            name: data.name\n        }));\n        return this;\n    }\n    source = util.normalizeInputSource(source);\n    if (Buffer.isBuffer(source)) {\n        data.sourceType = \"buffer\";\n    } else if (util.isStream(source)) {\n        data.sourceType = \"stream\";\n    } else {\n        this.emit(\"error\", new ArchiverError(\"INPUTSTEAMBUFFERREQUIRED\", {\n            name: data.name\n        }));\n        return this;\n    }\n    this._entriesCount++;\n    this._queue.push({\n        data: data,\n        source: source\n    });\n    return this;\n};\n/**\n * Appends a directory and its files, recursively, given its dirpath.\n *\n * @param  {String} dirpath The source directory path.\n * @param  {String} destpath The destination path within the archive.\n * @param  {(EntryData|Function)} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.directory = function(dirpath, destpath, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof dirpath !== \"string\" || dirpath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"DIRECTORYDIRPATHREQUIRED\"));\n        return this;\n    }\n    this._pending++;\n    if (destpath === false) {\n        destpath = \"\";\n    } else if (typeof destpath !== \"string\") {\n        destpath = dirpath;\n    }\n    var dataFunction = false;\n    if (typeof data === \"function\") {\n        dataFunction = data;\n        data = {};\n    } else if (typeof data !== \"object\") {\n        data = {};\n    }\n    var globOptions = {\n        stat: true,\n        dot: true\n    };\n    function onGlobEnd() {\n        this._pending--;\n        this._maybeFinalize();\n    }\n    function onGlobError(err) {\n        this.emit(\"error\", err);\n    }\n    function onGlobMatch(match) {\n        globber.pause();\n        var ignoreMatch = false;\n        var entryData = Object.assign({}, data);\n        entryData.name = match.relative;\n        entryData.prefix = destpath;\n        entryData.stats = match.stat;\n        entryData.callback = globber.resume.bind(globber);\n        try {\n            if (dataFunction) {\n                entryData = dataFunction(entryData);\n                if (entryData === false) {\n                    ignoreMatch = true;\n                } else if (typeof entryData !== \"object\") {\n                    throw new ArchiverError(\"DIRECTORYFUNCTIONINVALIDDATA\", {\n                        dirpath: dirpath\n                    });\n                }\n            }\n        } catch (e) {\n            this.emit(\"error\", e);\n            return;\n        }\n        if (ignoreMatch) {\n            globber.resume();\n            return;\n        }\n        this._append(match.absolute, entryData);\n    }\n    var globber = glob(dirpath, globOptions);\n    globber.on(\"error\", onGlobError.bind(this));\n    globber.on(\"match\", onGlobMatch.bind(this));\n    globber.on(\"end\", onGlobEnd.bind(this));\n    return this;\n};\n/**\n * Appends a file given its filepath using a\n * [lazystream]{@link https://github.com/jpommerening/node-lazystream} wrapper to\n * prevent issues with open file limits.\n *\n * When the instance has received, processed, and emitted the file, the `entry`\n * event is fired.\n *\n * @param  {String} filepath The source filepath.\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.file = function(filepath, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof filepath !== \"string\" || filepath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"FILEFILEPATHREQUIRED\"));\n        return this;\n    }\n    this._append(filepath, data);\n    return this;\n};\n/**\n * Appends multiple files that match a glob pattern.\n *\n * @param  {String} pattern The [glob pattern]{@link https://github.com/isaacs/minimatch} to match.\n * @param  {Object} options See [node-readdir-glob]{@link https://github.com/yqnn/node-readdir-glob#options}.\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.glob = function(pattern, options, data) {\n    this._pending++;\n    options = util.defaults(options, {\n        stat: true,\n        pattern: pattern\n    });\n    function onGlobEnd() {\n        this._pending--;\n        this._maybeFinalize();\n    }\n    function onGlobError(err) {\n        this.emit(\"error\", err);\n    }\n    function onGlobMatch(match) {\n        globber.pause();\n        var entryData = Object.assign({}, data);\n        entryData.callback = globber.resume.bind(globber);\n        entryData.stats = match.stat;\n        entryData.name = match.relative;\n        this._append(match.absolute, entryData);\n    }\n    var globber = glob(options.cwd || \".\", options);\n    globber.on(\"error\", onGlobError.bind(this));\n    globber.on(\"match\", onGlobMatch.bind(this));\n    globber.on(\"end\", onGlobEnd.bind(this));\n    return this;\n};\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * The `end`, `close` or `finish` events on the destination stream may fire\n * right after calling this method so you should set listeners beforehand to\n * properly detect stream completion.\n *\n * @return {Promise}\n */ Archiver.prototype.finalize = function() {\n    if (this._state.aborted) {\n        var abortedError = new ArchiverError(\"ABORTED\");\n        this.emit(\"error\", abortedError);\n        return Promise.reject(abortedError);\n    }\n    if (this._state.finalize) {\n        var finalizingError = new ArchiverError(\"FINALIZING\");\n        this.emit(\"error\", finalizingError);\n        return Promise.reject(finalizingError);\n    }\n    this._state.finalize = true;\n    if (this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n    }\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        var errored;\n        self._module.on(\"end\", function() {\n            if (!errored) {\n                resolve();\n            }\n        });\n        self._module.on(\"error\", function(err) {\n            errored = true;\n            reject(err);\n        });\n    });\n};\n/**\n * Sets the module format name used for archiving.\n *\n * @param {String} format The name of the format.\n * @return {this}\n */ Archiver.prototype.setFormat = function(format) {\n    if (this._format) {\n        this.emit(\"error\", new ArchiverError(\"FORMATSET\"));\n        return this;\n    }\n    this._format = format;\n    return this;\n};\n/**\n * Sets the module used for archiving.\n *\n * @param {Function} module The function for archiver to interact with.\n * @return {this}\n */ Archiver.prototype.setModule = function(module1) {\n    if (this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"ABORTED\"));\n        return this;\n    }\n    if (this._state.module) {\n        this.emit(\"error\", new ArchiverError(\"MODULESET\"));\n        return this;\n    }\n    this._module = module1;\n    this._modulePipe();\n    return this;\n};\n/**\n * Appends a symlink to the instance.\n *\n * This does NOT interact with filesystem and is used for programmatically creating symlinks.\n *\n * @param  {String} filepath The symlink path (within archive).\n * @param  {String} target The target path (within archive).\n * @param  {Number} mode Sets the entry permissions.\n * @return {this}\n */ Archiver.prototype.symlink = function(filepath, target, mode) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof filepath !== \"string\" || filepath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKFILEPATHREQUIRED\"));\n        return this;\n    }\n    if (typeof target !== \"string\" || target.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKTARGETREQUIRED\", {\n            filepath: filepath\n        }));\n        return this;\n    }\n    if (!this._moduleSupports(\"symlink\")) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKNOTSUPPORTED\", {\n            filepath: filepath\n        }));\n        return this;\n    }\n    var data = {};\n    data.type = \"symlink\";\n    data.name = filepath.replace(/\\\\/g, \"/\");\n    data.linkname = target.replace(/\\\\/g, \"/\");\n    data.sourceType = \"buffer\";\n    if (typeof mode === \"number\") {\n        data.mode = mode;\n    }\n    this._entriesCount++;\n    this._queue.push({\n        data: data,\n        source: Buffer.concat([])\n    });\n    return this;\n};\n/**\n * Returns the current length (in bytes) that has been emitted.\n *\n * @return {Number}\n */ Archiver.prototype.pointer = function() {\n    return this._pointer;\n};\n/**\n * Middleware-like helper that has yet to be fully implemented.\n *\n * @private\n * @param  {Function} plugin\n * @return {this}\n */ Archiver.prototype.use = function(plugin) {\n    this._streams.push(plugin);\n    return this;\n};\nmodule.exports = Archiver; /**\n * @typedef {Object} CoreOptions\n * @global\n * @property {Number} [statConcurrency=4] Sets the number of workers used to\n * process the internal fs stat queue.\n */  /**\n * @typedef {Object} TransformOptions\n * @property {Boolean} [allowHalfOpen=true] If set to false, then the stream\n * will automatically end the readable side when the writable side ends and vice\n * versa.\n * @property {Boolean} [readableObjectMode=false] Sets objectMode for readable\n * side of the stream. Has no effect if objectMode is true.\n * @property {Boolean} [writableObjectMode=false] Sets objectMode for writable\n * side of the stream. Has no effect if objectMode is true.\n * @property {Boolean} [decodeStrings=true] Whether or not to decode strings\n * into Buffers before passing them to _write(). `Writable`\n * @property {String} [encoding=NULL] If specified, then buffers will be decoded\n * to strings using the specified encoding. `Readable`\n * @property {Number} [highWaterMark=16kb] The maximum number of bytes to store\n * in the internal buffer before ceasing to read from the underlying resource.\n * `Readable` `Writable`\n * @property {Boolean} [objectMode=false] Whether this stream should behave as a\n * stream of objects. Meaning that stream.read(n) returns a single value instead\n * of a Buffer of size n. `Readable` `Writable`\n */  /**\n * @typedef {Object} EntryData\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */  /**\n * @typedef {Object} ErrorData\n * @property {String} message The message of the error.\n * @property {String} code The error code assigned to this error.\n * @property {String} data Additional data provided for reporting or debugging (where available).\n */  /**\n * @typedef {Object} ProgressData\n * @property {Object} entries\n * @property {Number} entries.total Number of entries that have been appended.\n * @property {Number} entries.processed Number of entries that have been processed.\n * @property {Object} fs\n * @property {Number} fs.totalBytes Number of bytes that have been appended. Calculated asynchronously and might not be accurate: it growth while entries are added. (based on fs.Stats)\n * @property {Number} fs.processedBytes Number of bytes that have been processed. (based on fs.Stats)\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/error.js":
/*!********************************************!*\
  !*** ./node_modules/archiver/lib/error.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Archiver Core\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var util = __webpack_require__(/*! util */ \"util\");\nconst ERROR_CODES = {\n    \"ABORTED\": \"archive was aborted\",\n    \"DIRECTORYDIRPATHREQUIRED\": \"diretory dirpath argument must be a non-empty string value\",\n    \"DIRECTORYFUNCTIONINVALIDDATA\": \"invalid data returned by directory custom data function\",\n    \"ENTRYNAMEREQUIRED\": \"entry name must be a non-empty string value\",\n    \"FILEFILEPATHREQUIRED\": \"file filepath argument must be a non-empty string value\",\n    \"FINALIZING\": \"archive already finalizing\",\n    \"QUEUECLOSED\": \"queue closed\",\n    \"NOENDMETHOD\": \"no suitable finalize/end method defined by module\",\n    \"DIRECTORYNOTSUPPORTED\": \"support for directory entries not defined by module\",\n    \"FORMATSET\": \"archive format already set\",\n    \"INPUTSTEAMBUFFERREQUIRED\": \"input source must be valid Stream or Buffer instance\",\n    \"MODULESET\": \"module already set\",\n    \"SYMLINKNOTSUPPORTED\": \"support for symlink entries not defined by module\",\n    \"SYMLINKFILEPATHREQUIRED\": \"symlink filepath argument must be a non-empty string value\",\n    \"SYMLINKTARGETREQUIRED\": \"symlink target argument must be a non-empty string value\",\n    \"ENTRYNOTSUPPORTED\": \"entry not supported\"\n};\nfunction ArchiverError(code, data) {\n    Error.captureStackTrace(this, this.constructor);\n    //this.name = this.constructor.name;\n    this.message = ERROR_CODES[code] || code;\n    this.code = code;\n    this.data = data;\n}\nutil.inherits(ArchiverError, Error);\nexports = module.exports = ArchiverError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUVELElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1DLGNBQWM7SUFDbEIsV0FBVztJQUNYLDRCQUE0QjtJQUM1QixnQ0FBZ0M7SUFDaEMscUJBQXFCO0lBQ3JCLHdCQUF3QjtJQUN4QixjQUFjO0lBQ2QsZUFBZTtJQUNmLGVBQWU7SUFDZix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLDRCQUE0QjtJQUM1QixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLDJCQUEyQjtJQUMzQix5QkFBeUI7SUFDekIscUJBQXFCO0FBQ3ZCO0FBRUEsU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxJQUFJO0lBQy9CQyxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxXQUFXO0lBQzlDLG9DQUFvQztJQUNwQyxJQUFJLENBQUNDLE9BQU8sR0FBR1AsV0FBVyxDQUFDRSxLQUFLLElBQUlBO0lBQ3BDLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtBQUNkO0FBRUFMLEtBQUtVLFFBQVEsQ0FBQ1AsZUFBZUc7QUFFN0JLLFVBQVVDLE9BQU9ELE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9saWIvZXJyb3IuanM/NGNmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFyY2hpdmVyIENvcmVcbiAqXG4gKiBAaWdub3JlXG4gKiBAbGljZW5zZSBbTUlUXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXJjaGl2ZXJqcy9ub2RlLWFyY2hpdmVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0V9XG4gKiBAY29weXJpZ2h0IChjKSAyMDEyLTIwMTQgQ2hyaXMgVGFsa2luZ3RvbiwgY29udHJpYnV0b3JzLlxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBFUlJPUl9DT0RFUyA9IHtcbiAgJ0FCT1JURUQnOiAnYXJjaGl2ZSB3YXMgYWJvcnRlZCcsXG4gICdESVJFQ1RPUllESVJQQVRIUkVRVUlSRUQnOiAnZGlyZXRvcnkgZGlycGF0aCBhcmd1bWVudCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyB2YWx1ZScsXG4gICdESVJFQ1RPUllGVU5DVElPTklOVkFMSUREQVRBJzogJ2ludmFsaWQgZGF0YSByZXR1cm5lZCBieSBkaXJlY3RvcnkgY3VzdG9tIGRhdGEgZnVuY3Rpb24nLFxuICAnRU5UUllOQU1FUkVRVUlSRUQnOiAnZW50cnkgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyB2YWx1ZScsXG4gICdGSUxFRklMRVBBVEhSRVFVSVJFRCc6ICdmaWxlIGZpbGVwYXRoIGFyZ3VtZW50IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIHZhbHVlJyxcbiAgJ0ZJTkFMSVpJTkcnOiAnYXJjaGl2ZSBhbHJlYWR5IGZpbmFsaXppbmcnLFxuICAnUVVFVUVDTE9TRUQnOiAncXVldWUgY2xvc2VkJyxcbiAgJ05PRU5ETUVUSE9EJzogJ25vIHN1aXRhYmxlIGZpbmFsaXplL2VuZCBtZXRob2QgZGVmaW5lZCBieSBtb2R1bGUnLFxuICAnRElSRUNUT1JZTk9UU1VQUE9SVEVEJzogJ3N1cHBvcnQgZm9yIGRpcmVjdG9yeSBlbnRyaWVzIG5vdCBkZWZpbmVkIGJ5IG1vZHVsZScsXG4gICdGT1JNQVRTRVQnOiAnYXJjaGl2ZSBmb3JtYXQgYWxyZWFkeSBzZXQnLFxuICAnSU5QVVRTVEVBTUJVRkZFUlJFUVVJUkVEJzogJ2lucHV0IHNvdXJjZSBtdXN0IGJlIHZhbGlkIFN0cmVhbSBvciBCdWZmZXIgaW5zdGFuY2UnLFxuICAnTU9EVUxFU0VUJzogJ21vZHVsZSBhbHJlYWR5IHNldCcsXG4gICdTWU1MSU5LTk9UU1VQUE9SVEVEJzogJ3N1cHBvcnQgZm9yIHN5bWxpbmsgZW50cmllcyBub3QgZGVmaW5lZCBieSBtb2R1bGUnLFxuICAnU1lNTElOS0ZJTEVQQVRIUkVRVUlSRUQnOiAnc3ltbGluayBmaWxlcGF0aCBhcmd1bWVudCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyB2YWx1ZScsXG4gICdTWU1MSU5LVEFSR0VUUkVRVUlSRUQnOiAnc3ltbGluayB0YXJnZXQgYXJndW1lbnQgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcgdmFsdWUnLFxuICAnRU5UUllOT1RTVVBQT1JURUQnOiAnZW50cnkgbm90IHN1cHBvcnRlZCdcbn07XG5cbmZ1bmN0aW9uIEFyY2hpdmVyRXJyb3IoY29kZSwgZGF0YSkge1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgLy90aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gIHRoaXMubWVzc2FnZSA9IEVSUk9SX0NPREVTW2NvZGVdIHx8IGNvZGU7XG4gIHRoaXMuY29kZSA9IGNvZGU7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG59XG5cbnV0aWwuaW5oZXJpdHMoQXJjaGl2ZXJFcnJvciwgRXJyb3IpO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBBcmNoaXZlckVycm9yOyJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkVSUk9SX0NPREVTIiwiQXJjaGl2ZXJFcnJvciIsImNvZGUiLCJkYXRhIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImluaGVyaXRzIiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/json.js":
/*!***************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/json.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * JSON Format Plugin\n *\n * @module plugins/json\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/readable.js\").Transform);\nvar crc32 = __webpack_require__(/*! buffer-crc32 */ \"(ssr)/./node_modules/buffer-crc32/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {(JsonOptions|TransformOptions)} options\n */ var Json = function(options) {\n    if (!(this instanceof Json)) {\n        return new Json(options);\n    }\n    options = this.options = util.defaults(options, {});\n    Transform.call(this, options);\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.files = [];\n};\ninherits(Json, Transform);\n/**\n * [_transform description]\n *\n * @private\n * @param  {Buffer}   chunk\n * @param  {String}   encoding\n * @param  {Function} callback\n * @return void\n */ Json.prototype._transform = function(chunk, encoding, callback) {\n    callback(null, chunk);\n};\n/**\n * [_writeStringified description]\n *\n * @private\n * @return void\n */ Json.prototype._writeStringified = function() {\n    var fileString = JSON.stringify(this.files);\n    this.write(fileString);\n};\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)}   source\n * @param  {EntryData}   data\n * @param  {Function} callback\n * @return void\n */ Json.prototype.append = function(source, data, callback) {\n    var self = this;\n    data.crc32 = 0;\n    function onend(err, sourceBuffer) {\n        if (err) {\n            callback(err);\n            return;\n        }\n        data.size = sourceBuffer.length || 0;\n        data.crc32 = crc32.unsigned(sourceBuffer);\n        self.files.push(data);\n        callback(null, data);\n    }\n    if (data.sourceType === \"buffer\") {\n        onend(null, source);\n    } else if (data.sourceType === \"stream\") {\n        util.collectStream(source, onend);\n    }\n};\n/**\n * [finalize description]\n *\n * @return void\n */ Json.prototype.finalize = function() {\n    this._writeStringified();\n    this.end();\n};\nmodule.exports = Json; /**\n * @typedef {Object} JsonOptions\n * @global\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL3BsdWdpbnMvanNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxXQUFXQyxrREFBd0I7QUFDdkMsSUFBSUMsWUFBWUQsZ0lBQW9DO0FBRXBELElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlHLE9BQU9ILG1CQUFPQSxDQUFDO0FBRW5COzs7Q0FHQyxHQUNELElBQUlJLE9BQU8sU0FBU0MsT0FBTztJQUN6QixJQUFJLENBQUUsS0FBSSxZQUFZRCxJQUFHLEdBQUk7UUFDM0IsT0FBTyxJQUFJQSxLQUFLQztJQUNsQjtJQUVBQSxVQUFVLElBQUksQ0FBQ0EsT0FBTyxHQUFHRixLQUFLRyxRQUFRLENBQUNELFNBQVMsQ0FBQztJQUVqREosVUFBVU0sSUFBSSxDQUFDLElBQUksRUFBRUY7SUFFckIsSUFBSSxDQUFDRyxRQUFRLEdBQUc7UUFDZEMsV0FBVztRQUNYQyxTQUFTO0lBQ1g7SUFFQSxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0FBQ2pCO0FBRUFaLFNBQVNLLE1BQU1IO0FBRWY7Ozs7Ozs7O0NBUUMsR0FDREcsS0FBS1EsU0FBUyxDQUFDQyxVQUFVLEdBQUcsU0FBU0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7SUFDNURBLFNBQVMsTUFBTUY7QUFDakI7QUFFQTs7Ozs7Q0FLQyxHQUNEVixLQUFLUSxTQUFTLENBQUNLLGlCQUFpQixHQUFHO0lBQ2pDLElBQUlDLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQyxJQUFJLENBQUNULEtBQUs7SUFDMUMsSUFBSSxDQUFDVSxLQUFLLENBQUNIO0FBQ2I7QUFFQTs7Ozs7OztDQU9DLEdBQ0RkLEtBQUtRLFNBQVMsQ0FBQ1UsTUFBTSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFUixRQUFRO0lBQ3JELElBQUlTLE9BQU8sSUFBSTtJQUVmRCxLQUFLdEIsS0FBSyxHQUFHO0lBRWIsU0FBU3dCLE1BQU1DLEdBQUcsRUFBRUMsWUFBWTtRQUM5QixJQUFJRCxLQUFLO1lBQ1BYLFNBQVNXO1lBQ1Q7UUFDRjtRQUVBSCxLQUFLSyxJQUFJLEdBQUdELGFBQWFFLE1BQU0sSUFBSTtRQUNuQ04sS0FBS3RCLEtBQUssR0FBR0EsTUFBTTZCLFFBQVEsQ0FBQ0g7UUFFNUJILEtBQUtkLEtBQUssQ0FBQ3FCLElBQUksQ0FBQ1I7UUFFaEJSLFNBQVMsTUFBTVE7SUFDakI7SUFFQSxJQUFJQSxLQUFLUyxVQUFVLEtBQUssVUFBVTtRQUNoQ1AsTUFBTSxNQUFNSDtJQUNkLE9BQU8sSUFBSUMsS0FBS1MsVUFBVSxLQUFLLFVBQVU7UUFDdkM5QixLQUFLK0IsYUFBYSxDQUFDWCxRQUFRRztJQUM3QjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNEdEIsS0FBS1EsU0FBUyxDQUFDdUIsUUFBUSxHQUFHO0lBQ3hCLElBQUksQ0FBQ2xCLGlCQUFpQjtJQUN0QixJQUFJLENBQUNtQixHQUFHO0FBQ1Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHbEMsTUFFakI7OztDQUdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL3BsdWdpbnMvanNvbi5qcz9kN2JkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSlNPTiBGb3JtYXQgUGx1Z2luXG4gKlxuICogQG1vZHVsZSBwbHVnaW5zL2pzb25cbiAqIEBsaWNlbnNlIFtNSVRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmNoaXZlcmpzL25vZGUtYXJjaGl2ZXIvYmxvYi9tYXN0ZXIvTElDRU5TRX1cbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBDaHJpcyBUYWxraW5ndG9uLCBjb250cmlidXRvcnMuXG4gKi9cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cztcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5UcmFuc2Zvcm07XG5cbnZhciBjcmMzMiA9IHJlcXVpcmUoJ2J1ZmZlci1jcmMzMicpO1xudmFyIHV0aWwgPSByZXF1aXJlKCdhcmNoaXZlci11dGlscycpO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHsoSnNvbk9wdGlvbnN8VHJhbnNmb3JtT3B0aW9ucyl9IG9wdGlvbnNcbiAqL1xudmFyIEpzb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKc29uKSkge1xuICAgIHJldHVybiBuZXcgSnNvbihvcHRpb25zKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPSB1dGlsLmRlZmF1bHRzKG9wdGlvbnMsIHt9KTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLnN1cHBvcnRzID0ge1xuICAgIGRpcmVjdG9yeTogdHJ1ZSxcbiAgICBzeW1saW5rOiB0cnVlXG4gIH07XG5cbiAgdGhpcy5maWxlcyA9IFtdO1xufTtcblxuaW5oZXJpdHMoSnNvbiwgVHJhbnNmb3JtKTtcblxuLyoqXG4gKiBbX3RyYW5zZm9ybSBkZXNjcmlwdGlvbl1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7QnVmZmVyfSAgIGNodW5rXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgZW5jb2RpbmdcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB2b2lkXG4gKi9cbkpzb24ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKG51bGwsIGNodW5rKTtcbn07XG5cbi8qKlxuICogW193cml0ZVN0cmluZ2lmaWVkIGRlc2NyaXB0aW9uXVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuSnNvbi5wcm90b3R5cGUuX3dyaXRlU3RyaW5naWZpZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbGVTdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmZpbGVzKTtcbiAgdGhpcy53cml0ZShmaWxlU3RyaW5nKTtcbn07XG5cbi8qKlxuICogW2FwcGVuZCBkZXNjcmlwdGlvbl1cbiAqXG4gKiBAcGFyYW0gIHsoQnVmZmVyfFN0cmVhbSl9ICAgc291cmNlXG4gKiBAcGFyYW0gIHtFbnRyeURhdGF9ICAgZGF0YVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuSnNvbi5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc291cmNlLCBkYXRhLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZGF0YS5jcmMzMiA9IDA7XG5cbiAgZnVuY3Rpb24gb25lbmQoZXJyLCBzb3VyY2VCdWZmZXIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRhdGEuc2l6ZSA9IHNvdXJjZUJ1ZmZlci5sZW5ndGggfHwgMDtcbiAgICBkYXRhLmNyYzMyID0gY3JjMzIudW5zaWduZWQoc291cmNlQnVmZmVyKTtcblxuICAgIHNlbGYuZmlsZXMucHVzaChkYXRhKTtcblxuICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICB9XG5cbiAgaWYgKGRhdGEuc291cmNlVHlwZSA9PT0gJ2J1ZmZlcicpIHtcbiAgICBvbmVuZChudWxsLCBzb3VyY2UpO1xuICB9IGVsc2UgaWYgKGRhdGEuc291cmNlVHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICB1dGlsLmNvbGxlY3RTdHJlYW0oc291cmNlLCBvbmVuZCk7XG4gIH1cbn07XG5cbi8qKlxuICogW2ZpbmFsaXplIGRlc2NyaXB0aW9uXVxuICpcbiAqIEByZXR1cm4gdm9pZFxuICovXG5Kc29uLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl93cml0ZVN0cmluZ2lmaWVkKCk7XG4gIHRoaXMuZW5kKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb247XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSnNvbk9wdGlvbnNcbiAqIEBnbG9iYWxcbiAqL1xuIl0sIm5hbWVzIjpbImluaGVyaXRzIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsImNyYzMyIiwidXRpbCIsIkpzb24iLCJvcHRpb25zIiwiZGVmYXVsdHMiLCJjYWxsIiwic3VwcG9ydHMiLCJkaXJlY3RvcnkiLCJzeW1saW5rIiwiZmlsZXMiLCJwcm90b3R5cGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiX3dyaXRlU3RyaW5naWZpZWQiLCJmaWxlU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsIndyaXRlIiwiYXBwZW5kIiwic291cmNlIiwiZGF0YSIsInNlbGYiLCJvbmVuZCIsImVyciIsInNvdXJjZUJ1ZmZlciIsInNpemUiLCJsZW5ndGgiLCJ1bnNpZ25lZCIsInB1c2giLCJzb3VyY2VUeXBlIiwiY29sbGVjdFN0cmVhbSIsImZpbmFsaXplIiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/tar.js":
/*!**************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/tar.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * TAR Format Plugin\n *\n * @module plugins/tar\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar engine = __webpack_require__(/*! tar-stream */ \"(ssr)/./node_modules/tar-stream/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {TarOptions} options\n */ var Tar = function(options) {\n    if (!(this instanceof Tar)) {\n        return new Tar(options);\n    }\n    options = this.options = util.defaults(options, {\n        gzip: false\n    });\n    if (typeof options.gzipOptions !== \"object\") {\n        options.gzipOptions = {};\n    }\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.engine = engine.pack(options);\n    this.compressor = false;\n    if (options.gzip) {\n        this.compressor = zlib.createGzip(options.gzipOptions);\n        this.compressor.on(\"error\", this._onCompressorError.bind(this));\n    }\n};\n/**\n * [_onCompressorError description]\n *\n * @private\n * @param  {Error} err\n * @return void\n */ Tar.prototype._onCompressorError = function(err) {\n    this.engine.emit(\"error\", err);\n};\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)} source\n * @param  {TarEntryData} data\n * @param  {Function} callback\n * @return void\n */ Tar.prototype.append = function(source, data, callback) {\n    var self = this;\n    data.mtime = data.date;\n    function append(err, sourceBuffer) {\n        if (err) {\n            callback(err);\n            return;\n        }\n        self.engine.entry(data, sourceBuffer, function(err) {\n            callback(err, data);\n        });\n    }\n    if (data.sourceType === \"buffer\") {\n        append(null, source);\n    } else if (data.sourceType === \"stream\" && data.stats) {\n        data.size = data.stats.size;\n        var entry = self.engine.entry(data, function(err) {\n            callback(err, data);\n        });\n        source.pipe(entry);\n    } else if (data.sourceType === \"stream\") {\n        util.collectStream(source, append);\n    }\n};\n/**\n * [finalize description]\n *\n * @return void\n */ Tar.prototype.finalize = function() {\n    this.engine.finalize();\n};\n/**\n * [on description]\n *\n * @return this.engine\n */ Tar.prototype.on = function() {\n    return this.engine.on.apply(this.engine, arguments);\n};\n/**\n * [pipe description]\n *\n * @param  {String} destination\n * @param  {Object} options\n * @return this.engine\n */ Tar.prototype.pipe = function(destination, options) {\n    if (this.compressor) {\n        return this.engine.pipe.apply(this.engine, [\n            this.compressor\n        ]).pipe(destination, options);\n    } else {\n        return this.engine.pipe.apply(this.engine, arguments);\n    }\n};\n/**\n * [unpipe description]\n *\n * @return this.engine\n */ Tar.prototype.unpipe = function() {\n    if (this.compressor) {\n        return this.compressor.unpipe.apply(this.compressor, arguments);\n    } else {\n        return this.engine.unpipe.apply(this.engine, arguments);\n    }\n};\nmodule.exports = Tar; /**\n * @typedef {Object} TarOptions\n * @global\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\n */  /**\n * @typedef {Object} TarEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */  /**\n * TarStream Module\n * @external TarStream\n * @see {@link https://github.com/mafintosh/tar-stream}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/tar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/zip.js":
/*!**************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/zip.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * ZIP Format Plugin\n *\n * @module plugins/zip\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var engine = __webpack_require__(/*! zip-stream */ \"(ssr)/./node_modules/zip-stream/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {ZipOptions} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.namePrependSlash=false] Prepends a forward slash to archive file paths.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n */ var Zip = function(options) {\n    if (!(this instanceof Zip)) {\n        return new Zip(options);\n    }\n    options = this.options = util.defaults(options, {\n        comment: \"\",\n        forceUTC: false,\n        namePrependSlash: false,\n        store: false\n    });\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.engine = new engine(options);\n};\n/**\n * @param  {(Buffer|Stream)} source\n * @param  {ZipEntryData} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {String} [data.prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @param  {fs.Stats} [data.stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n * @param  {Boolean} [data.store=ZipOptions.store] Sets the compression method to STORE.\n * @param  {Function} callback\n * @return void\n */ Zip.prototype.append = function(source, data, callback) {\n    this.engine.entry(source, data, callback);\n};\n/**\n * @return void\n */ Zip.prototype.finalize = function() {\n    this.engine.finalize();\n};\n/**\n * @return this.engine\n */ Zip.prototype.on = function() {\n    return this.engine.on.apply(this.engine, arguments);\n};\n/**\n * @return this.engine\n */ Zip.prototype.pipe = function() {\n    return this.engine.pipe.apply(this.engine, arguments);\n};\n/**\n * @return this.engine\n */ Zip.prototype.unpipe = function() {\n    return this.engine.unpipe.apply(this.engine, arguments);\n};\nmodule.exports = Zip; /**\n * @typedef {Object} ZipOptions\n * @global\n * @property {String} [comment] Sets the zip archive comment.\n * @property {Boolean} [forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @property {Boolean} [forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @prpperty {Boolean} [namePrependSlash=false] Prepends a forward slash to archive file paths.\n * @property {Boolean} [store=false] Sets the compression method to STORE.\n * @property {Object} [zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [zip-stream]{@link https://archiverjs.com/zip-stream/ZipStream.html} documentation for current list of properties.\n */  /**\n * @typedef {Object} ZipEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {Boolean} [namePrependSlash=ZipOptions.namePrependSlash] Prepends a forward slash to archive file paths.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n * @property {Boolean} [store=ZipOptions.store] Sets the compression method to STORE.\n */  /**\n * ZipStream Module\n * @external ZipStream\n * @see {@link https://www.archiverjs.com/zip-stream/ZipStream.html}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL3BsdWdpbnMvemlwLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUNELElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5COzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlFLE1BQU0sU0FBU0MsT0FBTztJQUN4QixJQUFJLENBQUUsS0FBSSxZQUFZRCxHQUFFLEdBQUk7UUFDMUIsT0FBTyxJQUFJQSxJQUFJQztJQUNqQjtJQUVBQSxVQUFVLElBQUksQ0FBQ0EsT0FBTyxHQUFHRixLQUFLRyxRQUFRLENBQUNELFNBQVM7UUFDOUNFLFNBQVM7UUFDVEMsVUFBVTtRQUNWQyxrQkFBa0I7UUFDbEJDLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2RDLFdBQVc7UUFDWEMsU0FBUztJQUNYO0lBRUEsSUFBSSxDQUFDWixNQUFNLEdBQUcsSUFBSUEsT0FBT0k7QUFDM0I7QUFFQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0RELElBQUlVLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ3BELElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2tCLEtBQUssQ0FBQ0gsUUFBUUMsTUFBTUM7QUFDbEM7QUFFQTs7Q0FFQyxHQUNEZCxJQUFJVSxTQUFTLENBQUNNLFFBQVEsR0FBRztJQUN2QixJQUFJLENBQUNuQixNQUFNLENBQUNtQixRQUFRO0FBQ3RCO0FBRUE7O0NBRUMsR0FDRGhCLElBQUlVLFNBQVMsQ0FBQ08sRUFBRSxHQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDcEIsTUFBTSxDQUFDb0IsRUFBRSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDckIsTUFBTSxFQUFFc0I7QUFDM0M7QUFFQTs7Q0FFQyxHQUNEbkIsSUFBSVUsU0FBUyxDQUFDVSxJQUFJLEdBQUc7SUFDbkIsT0FBTyxJQUFJLENBQUN2QixNQUFNLENBQUN1QixJQUFJLENBQUNGLEtBQUssQ0FBQyxJQUFJLENBQUNyQixNQUFNLEVBQUVzQjtBQUM3QztBQUVBOztDQUVDLEdBQ0RuQixJQUFJVSxTQUFTLENBQUNXLE1BQU0sR0FBRztJQUNyQixPQUFPLElBQUksQ0FBQ3hCLE1BQU0sQ0FBQ3dCLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQ3JCLE1BQU0sRUFBRXNCO0FBQy9DO0FBRUFHLE9BQU9DLE9BQU8sR0FBR3ZCLEtBRWpCOzs7Ozs7Ozs7OztDQVdDLElBRUQ7Ozs7Ozs7Ozs7OztDQVlDLElBRUQ7Ozs7Q0FJQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FyY2hpdmVyL2xpYi9wbHVnaW5zL3ppcC5qcz8zZDJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWklQIEZvcm1hdCBQbHVnaW5cbiAqXG4gKiBAbW9kdWxlIHBsdWdpbnMvemlwXG4gKiBAbGljZW5zZSBbTUlUXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXJjaGl2ZXJqcy9ub2RlLWFyY2hpdmVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0V9XG4gKiBAY29weXJpZ2h0IChjKSAyMDEyLTIwMTQgQ2hyaXMgVGFsa2luZ3RvbiwgY29udHJpYnV0b3JzLlxuICovXG52YXIgZW5naW5lID0gcmVxdWlyZSgnemlwLXN0cmVhbScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCdhcmNoaXZlci11dGlscycpO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtaaXBPcHRpb25zfSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jb21tZW50XSBTZXRzIHRoZSB6aXAgYXJjaGl2ZSBjb21tZW50LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5mb3JjZUxvY2FsVGltZT1mYWxzZV0gRm9yY2VzIHRoZSBhcmNoaXZlIHRvIGNvbnRhaW4gbG9jYWwgZmlsZSB0aW1lcyBpbnN0ZWFkIG9mIFVUQy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZm9yY2VaaXA2ND1mYWxzZV0gRm9yY2VzIHRoZSBhcmNoaXZlIHRvIGNvbnRhaW4gWklQNjQgaGVhZGVycy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubmFtZVByZXBlbmRTbGFzaD1mYWxzZV0gUHJlcGVuZHMgYSBmb3J3YXJkIHNsYXNoIHRvIGFyY2hpdmUgZmlsZSBwYXRocy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc3RvcmU9ZmFsc2VdIFNldHMgdGhlIGNvbXByZXNzaW9uIG1ldGhvZCB0byBTVE9SRS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy56bGliXSBQYXNzZWQgdG8gW3psaWJde0BsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvemxpYi5odG1sI3psaWJfY2xhc3Nfb3B0aW9uc31cbiAqL1xudmFyIFppcCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFppcCkpIHtcbiAgICByZXR1cm4gbmV3IFppcChvcHRpb25zKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPSB1dGlsLmRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICBjb21tZW50OiAnJyxcbiAgICBmb3JjZVVUQzogZmFsc2UsXG4gICAgbmFtZVByZXBlbmRTbGFzaDogZmFsc2UsXG4gICAgc3RvcmU6IGZhbHNlXG4gIH0pO1xuXG4gIHRoaXMuc3VwcG9ydHMgPSB7XG4gICAgZGlyZWN0b3J5OiB0cnVlLFxuICAgIHN5bWxpbms6IHRydWVcbiAgfTtcblxuICB0aGlzLmVuZ2luZSA9IG5ldyBlbmdpbmUob3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSAgeyhCdWZmZXJ8U3RyZWFtKX0gc291cmNlXG4gKiBAcGFyYW0gIHtaaXBFbnRyeURhdGF9IGRhdGFcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YS5uYW1lIFNldHMgdGhlIGVudHJ5IG5hbWUgaW5jbHVkaW5nIGludGVybmFsIHBhdGguXG4gKiBAcGFyYW0gIHsoU3RyaW5nfERhdGUpfSBbZGF0YS5kYXRlPU5PVygpXSBTZXRzIHRoZSBlbnRyeSBkYXRlLlxuICogQHBhcmFtICB7TnVtYmVyfSBbZGF0YS5tb2RlPUQ6MDc1NS9GOjA2NDRdIFNldHMgdGhlIGVudHJ5IHBlcm1pc3Npb25zLlxuICogQHBhcmFtICB7U3RyaW5nfSBbZGF0YS5wcmVmaXhdIFNldHMgYSBwYXRoIHByZWZpeCBmb3IgdGhlIGVudHJ5IG5hbWUuIFVzZWZ1bFxuICogd2hlbiB3b3JraW5nIHdpdGggbWV0aG9kcyBsaWtlIGBkaXJlY3RvcnlgIG9yIGBnbG9iYC5cbiAqIEBwYXJhbSAge2ZzLlN0YXRzfSBbZGF0YS5zdGF0c10gU2V0cyB0aGUgZnMgc3RhdCBkYXRhIGZvciB0aGlzIGVudHJ5IGFsbG93aW5nXG4gKiBmb3IgcmVkdWN0aW9uIG9mIGZzIHN0YXQgY2FsbHMgd2hlbiBzdGF0IGRhdGEgaXMgYWxyZWFkeSBrbm93bi5cbiAqIEBwYXJhbSAge0Jvb2xlYW59IFtkYXRhLnN0b3JlPVppcE9wdGlvbnMuc3RvcmVdIFNldHMgdGhlIGNvbXByZXNzaW9uIG1ldGhvZCB0byBTVE9SRS5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB2b2lkXG4gKi9cblppcC5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc291cmNlLCBkYXRhLCBjYWxsYmFjaykge1xuICB0aGlzLmVuZ2luZS5lbnRyeShzb3VyY2UsIGRhdGEsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB2b2lkXG4gKi9cblppcC5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbmdpbmUuZmluYWxpemUoKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB0aGlzLmVuZ2luZVxuICovXG5aaXAucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVuZ2luZS5vbi5hcHBseSh0aGlzLmVuZ2luZSwgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB0aGlzLmVuZ2luZVxuICovXG5aaXAucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZW5naW5lLnBpcGUuYXBwbHkodGhpcy5lbmdpbmUsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4gdGhpcy5lbmdpbmVcbiAqL1xuWmlwLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZW5naW5lLnVucGlwZS5hcHBseSh0aGlzLmVuZ2luZSwgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gWmlwO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFppcE9wdGlvbnNcbiAqIEBnbG9iYWxcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbY29tbWVudF0gU2V0cyB0aGUgemlwIGFyY2hpdmUgY29tbWVudC5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2ZvcmNlTG9jYWxUaW1lPWZhbHNlXSBGb3JjZXMgdGhlIGFyY2hpdmUgdG8gY29udGFpbiBsb2NhbCBmaWxlIHRpbWVzIGluc3RlYWQgb2YgVVRDLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbZm9yY2VaaXA2ND1mYWxzZV0gRm9yY2VzIHRoZSBhcmNoaXZlIHRvIGNvbnRhaW4gWklQNjQgaGVhZGVycy5cbiAqIEBwcnBwZXJ0eSB7Qm9vbGVhbn0gW25hbWVQcmVwZW5kU2xhc2g9ZmFsc2VdIFByZXBlbmRzIGEgZm9yd2FyZCBzbGFzaCB0byBhcmNoaXZlIGZpbGUgcGF0aHMuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtzdG9yZT1mYWxzZV0gU2V0cyB0aGUgY29tcHJlc3Npb24gbWV0aG9kIHRvIFNUT1JFLlxuICogQHByb3BlcnR5IHtPYmplY3R9IFt6bGliXSBQYXNzZWQgdG8gW3psaWJde0BsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvemxpYi5odG1sI3psaWJfY2xhc3Nfb3B0aW9uc31cbiAqIHRvIGNvbnRyb2wgY29tcHJlc3Npb24uXG4gKiBAcHJvcGVydHkgeyp9IFsqXSBTZWUgW3ppcC1zdHJlYW1de0BsaW5rIGh0dHBzOi8vYXJjaGl2ZXJqcy5jb20vemlwLXN0cmVhbS9aaXBTdHJlYW0uaHRtbH0gZG9jdW1lbnRhdGlvbiBmb3IgY3VycmVudCBsaXN0IG9mIHByb3BlcnRpZXMuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBaaXBFbnRyeURhdGFcbiAqIEBnbG9iYWxcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lIFNldHMgdGhlIGVudHJ5IG5hbWUgaW5jbHVkaW5nIGludGVybmFsIHBhdGguXG4gKiBAcHJvcGVydHkgeyhTdHJpbmd8RGF0ZSl9IFtkYXRlPU5PVygpXSBTZXRzIHRoZSBlbnRyeSBkYXRlLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFttb2RlPUQ6MDc1NS9GOjA2NDRdIFNldHMgdGhlIGVudHJ5IHBlcm1pc3Npb25zLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbbmFtZVByZXBlbmRTbGFzaD1aaXBPcHRpb25zLm5hbWVQcmVwZW5kU2xhc2hdIFByZXBlbmRzIGEgZm9yd2FyZCBzbGFzaCB0byBhcmNoaXZlIGZpbGUgcGF0aHMuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3ByZWZpeF0gU2V0cyBhIHBhdGggcHJlZml4IGZvciB0aGUgZW50cnkgbmFtZS4gVXNlZnVsXG4gKiB3aGVuIHdvcmtpbmcgd2l0aCBtZXRob2RzIGxpa2UgYGRpcmVjdG9yeWAgb3IgYGdsb2JgLlxuICogQHByb3BlcnR5IHtmcy5TdGF0c30gW3N0YXRzXSBTZXRzIHRoZSBmcyBzdGF0IGRhdGEgZm9yIHRoaXMgZW50cnkgYWxsb3dpbmdcbiAqIGZvciByZWR1Y3Rpb24gb2YgZnMgc3RhdCBjYWxscyB3aGVuIHN0YXQgZGF0YSBpcyBhbHJlYWR5IGtub3duLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbc3RvcmU9WmlwT3B0aW9ucy5zdG9yZV0gU2V0cyB0aGUgY29tcHJlc3Npb24gbWV0aG9kIHRvIFNUT1JFLlxuICovXG5cbi8qKlxuICogWmlwU3RyZWFtIE1vZHVsZVxuICogQGV4dGVybmFsIFppcFN0cmVhbVxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93d3cuYXJjaGl2ZXJqcy5jb20vemlwLXN0cmVhbS9aaXBTdHJlYW0uaHRtbH1cbiAqL1xuIl0sIm5hbWVzIjpbImVuZ2luZSIsInJlcXVpcmUiLCJ1dGlsIiwiWmlwIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiY29tbWVudCIsImZvcmNlVVRDIiwibmFtZVByZXBlbmRTbGFzaCIsInN0b3JlIiwic3VwcG9ydHMiLCJkaXJlY3RvcnkiLCJzeW1saW5rIiwicHJvdG90eXBlIiwiYXBwZW5kIiwic291cmNlIiwiZGF0YSIsImNhbGxiYWNrIiwiZW50cnkiLCJmaW5hbGl6ZSIsIm9uIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJwaXBlIiwidW5waXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/zip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js":
/*!**********************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/errors.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst codes = {};\nfunction createErrorType(code, message, Base) {\n    if (!Base) {\n        Base = Error;\n    }\n    function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n            return message;\n        } else {\n            return message(arg1, arg2, arg3);\n        }\n    }\n    class NodeError extends Base {\n        constructor(arg1, arg2, arg3){\n            super(getMessage(arg1, arg2, arg3));\n        }\n    }\n    NodeError.prototype.name = Base.name;\n    NodeError.prototype.code = code;\n    codes[code] = NodeError;\n}\n// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\nfunction oneOf(expected, thing) {\n    if (Array.isArray(expected)) {\n        const len = expected.length;\n        expected = expected.map((i)=>String(i));\n        if (len > 2) {\n            return `one of ${thing} ${expected.slice(0, len - 1).join(\", \")}, or ` + expected[len - 1];\n        } else if (len === 2) {\n            return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n        } else {\n            return `of ${thing} ${expected[0]}`;\n        }\n    } else {\n        return `of ${thing} ${String(expected)}`;\n    }\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nfunction startsWith(str, search, pos) {\n    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n    if (this_len === undefined || this_len > str.length) {\n        this_len = str.length;\n    }\n    return str.substring(this_len - search.length, this_len) === search;\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nfunction includes(str, search, start) {\n    if (typeof start !== \"number\") {\n        start = 0;\n    }\n    if (start + search.length > str.length) {\n        return false;\n    } else {\n        return str.indexOf(search, start) !== -1;\n    }\n}\ncreateErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n    return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n    } else {\n        determiner = \"must be\";\n    }\n    let msg;\n    if (endsWith(name, \" argument\")) {\n        // For cases like 'first argument'\n        msg = `The ${name} ${determiner} ${oneOf(expected, \"type\")}`;\n    } else {\n        const type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, \"type\")}`;\n    }\n    msg += `. Received type ${typeof actual}`;\n    return msg;\n}, TypeError);\ncreateErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\ncreateErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n    return \"The \" + name + \" method is not implemented\";\n});\ncreateErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\ncreateErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n    return \"Cannot call \" + name + \" after a stream was destroyed\";\n});\ncreateErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\ncreateErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\ncreateErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\ncreateErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\ncreateErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n    return \"Unknown encoding: \" + arg;\n}, TypeError);\ncreateErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\nmodule.exports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n/*<replacement>*/ var objectKeys = Object.keys || function(obj) {\n    var keys = [];\n    for(var key in obj)keys.push(key);\n    return keys;\n};\n/*</replacement>*/ module.exports = Duplex;\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_writable.js\");\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Duplex, Readable);\n{\n    // Allow the keys array to be GC'ed.\n    var keys = objectKeys(Writable.prototype);\n    for(var v = 0; v < keys.length; v++){\n        var method = keys[v];\n        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n    }\n}function Duplex(options) {\n    if (!(this instanceof Duplex)) return new Duplex(options);\n    Readable.call(this, options);\n    Writable.call(this, options);\n    this.allowHalfOpen = true;\n    if (options) {\n        if (options.readable === false) this.readable = false;\n        if (options.writable === false) this.writable = false;\n        if (options.allowHalfOpen === false) {\n            this.allowHalfOpen = false;\n            this.once(\"end\", onend);\n        }\n    }\n}\nObject.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState.highWaterMark;\n    }\n});\nObject.defineProperty(Duplex.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n    }\n});\nObject.defineProperty(Duplex.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState.length;\n    }\n});\n// the no-half-open enforcer\nfunction onend() {\n    // If the writable side ended, then we're ok.\n    if (this._writableState.ended) return;\n    // no more data can be written.\n    // But allow more writes to happen in this tick.\n    process.nextTick(onEndNT, this);\n}\nfunction onEndNT(self) {\n    self.end();\n}\nObject.defineProperty(Duplex.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        if (this._readableState === undefined || this._writableState === undefined) {\n            return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n    },\n    set: function set(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (this._readableState === undefined || this._writableState === undefined) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_transform.js\");\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(PassThrough, Transform);\nfunction PassThrough(options) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options);\n    Transform.call(this, options);\n}\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSxnRUFBZ0U7QUFDaEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSw0RUFBNEU7QUFDNUUscUVBQXFFO0FBQ3JFLHdCQUF3QjtBQUN4QixFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlEQUF5RDtBQUN6RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLDZEQUE2RDtBQUM3RCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUUseUNBQXlDO0FBRXpDLHdCQUF3QjtBQUN4Qiw0REFBNEQ7QUFDNUQseUNBQXlDO0FBRXpDO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakIsSUFBSUMsWUFBWUMsbUJBQU9BLENBQUM7QUFDeEJBLG1CQUFPQSxDQUFDLDZEQUFZRixhQUFhQztBQUNqQyxTQUFTRCxZQUFZRyxPQUFPO0lBQzFCLElBQUksQ0FBRSxLQUFJLFlBQVlILFdBQVUsR0FBSSxPQUFPLElBQUlBLFlBQVlHO0lBQzNERixVQUFVRyxJQUFJLENBQUMsSUFBSSxFQUFFRDtBQUN2QjtBQUNBSCxZQUFZSyxTQUFTLENBQUNDLFVBQVUsR0FBRyxTQUFVQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsRUFBRTtJQUM5REEsR0FBRyxNQUFNRjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcz85YzcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcbnJlcXVpcmUoJ2luaGVyaXRzJykoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUGFzc1Rocm91Z2giLCJUcmFuc2Zvcm0iLCJyZXF1aXJlIiwib3B0aW9ucyIsImNhbGwiLCJwcm90b3R5cGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImNiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_passthrough.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_readable.js":
/*!************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/_stream_readable.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n/*<replacement>*/ var Duplex;\n/*</replacement>*/ Readable.ReadableState = ReadableState;\n/*<replacement>*/ var EE = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n    return emitter.listeners(type).length;\n};\n/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(/*! ./internal/streams/stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/stream.js\");\n/*</replacement>*/ var Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar OurUint8Array = (typeof global !== \"undefined\" ? global :  false ? 0 : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {};\nfunction _uint8ArrayToBuffer(chunk) {\n    return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/ var debugUtil = __webpack_require__(/*! util */ \"util\");\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n    debug = debugUtil.debuglog(\"stream\");\n} else {\n    debug = function debug() {};\n}\n/*</replacement>*/ var BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/buffer_list.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/state.js\"), getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes), ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n// Lazy loaded to improve the startup performance.\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = [\n    \"error\",\n    \"close\",\n    \"destroy\",\n    \"pause\",\n    \"resume\"\n];\nfunction prependListener(emitter, event, fn) {\n    // Sadly this is not cacheable as some libraries bundle their own\n    // event emitter implementation with them.\n    if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);\n    else emitter._events[event] = [\n        fn,\n        emitter._events[event]\n    ];\n}\nfunction ReadableState(options, stream, isDuplex) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n    options = options || {};\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream.\n    // These options can be provided separately as readableXXX and writableXXX.\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    // object stream flag. Used to make read(n) ignore n and to\n    // make all the buffer merging and length checks go away\n    this.objectMode = !!options.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n    // the point at which it stops calling _read() to fill the buffer\n    // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n    this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n    // A linked list is used to store data chunks instead of an array because the\n    // linked list can remove elements from the beginning faster than\n    // array.shift()\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    // a flag to be able to tell if the event 'readable'/'data' is emitted\n    // immediately, or on a later tick.  We set this to true at first, because\n    // any actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first read call.\n    this.sync = true;\n    // whenever we return null, then we set a flag to say\n    // that we're awaiting a 'readable' event emission.\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n    this.paused = true;\n    // Should close be emitted on destroy. Defaults to true.\n    this.emitClose = options.emitClose !== false;\n    // Should .destroy() be called after 'end' (and potentially 'finish')\n    this.autoDestroy = !!options.autoDestroy;\n    // has it been destroyed\n    this.destroyed = false;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // the number of writers that are awaiting a drain event in .pipe()s\n    this.awaitDrain = 0;\n    // if true, a maybeReadMore has been scheduled\n    this.readingMore = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options.encoding) {\n        if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/archiver/node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n    }\n}\nfunction Readable(options) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n    if (!(this instanceof Readable)) return new Readable(options);\n    // Checking for a Stream.Duplex instance is faster here instead of inside\n    // the ReadableState constructor, at least with V8 6.5\n    var isDuplex = this instanceof Duplex;\n    this._readableState = new ReadableState(options, this, isDuplex);\n    // legacy\n    this.readable = true;\n    if (options) {\n        if (typeof options.read === \"function\") this._read = options.read;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n    }\n    Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        if (this._readableState === undefined) {\n            return false;\n        }\n        return this._readableState.destroyed;\n    },\n    set: function set(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (!this._readableState) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._readableState.destroyed = value;\n    }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function(err, cb) {\n    cb(err);\n};\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n    var state = this._readableState;\n    var skipChunkCheck;\n    if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n            encoding = encoding || state.defaultEncoding;\n            if (encoding !== state.encoding) {\n                chunk = Buffer.from(chunk, encoding);\n                encoding = \"\";\n            }\n            skipChunkCheck = true;\n        }\n    } else {\n        skipChunkCheck = true;\n    }\n    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n    return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n    debug(\"readableAddChunk\", chunk);\n    var state = stream._readableState;\n    if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n    } else {\n        var er;\n        if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n        if (er) {\n            errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n            if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n                chunk = _uint8ArrayToBuffer(chunk);\n            }\n            if (addToFront) {\n                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n                else addChunk(stream, state, chunk, true);\n            } else if (state.ended) {\n                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n            } else if (state.destroyed) {\n                return false;\n            } else {\n                state.reading = false;\n                if (state.decoder && !encoding) {\n                    chunk = state.decoder.write(chunk);\n                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);\n                    else maybeReadMore(stream, state);\n                } else {\n                    addChunk(stream, state, chunk, false);\n                }\n            }\n        } else if (!addToFront) {\n            state.reading = false;\n            maybeReadMore(stream, state);\n        }\n    }\n    // We can push more data if we are below the highWaterMark.\n    // Also, if we have no data yet, we can stand some more bytes.\n    // This is to work around cases where hwm=0, such as the repl.\n    return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n    if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n    } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront) state.buffer.unshift(chunk);\n        else state.buffer.push(chunk);\n        if (state.needReadable) emitReadable(stream);\n    }\n    maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n    var er;\n    if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== undefined && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\n            \"string\",\n            \"Buffer\",\n            \"Uint8Array\"\n        ], chunk);\n    }\n    return er;\n}\nReadable.prototype.isPaused = function() {\n    return this._readableState.flowing === false;\n};\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n    if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/archiver/node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n    var decoder = new StringDecoder(enc);\n    this._readableState.decoder = decoder;\n    // If setEncoding(null), decoder.encoding equals utf8\n    this._readableState.encoding = this._readableState.decoder.encoding;\n    // Iterate over current buffer to convert already stored Buffers:\n    var p = this._readableState.buffer.head;\n    var content = \"\";\n    while(p !== null){\n        content += decoder.write(p.data);\n        p = p.next;\n    }\n    this._readableState.buffer.clear();\n    if (content !== \"\") this._readableState.buffer.push(content);\n    this._readableState.length = content.length;\n    return this;\n};\n// Don't raise the hwm > 1GB\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n    if (n >= MAX_HWM) {\n        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n        n = MAX_HWM;\n    } else {\n        // Get the next highest power of 2 to prevent increasing hwm excessively in\n        // tiny amounts\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n    }\n    return n;\n}\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n    if (n <= 0 || state.length === 0 && state.ended) return 0;\n    if (state.objectMode) return 1;\n    if (n !== n) {\n        // Only flow one buffer at a time\n        if (state.flowing && state.length) return state.buffer.head.data.length;\n        else return state.length;\n    }\n    // If we're asking for more than the current hwm, then raise the hwm.\n    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n    if (n <= state.length) return n;\n    // Don't have enough\n    if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n    }\n    return state.length;\n}\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n    debug(\"read\", n);\n    n = parseInt(n, 10);\n    var state = this._readableState;\n    var nOrig = n;\n    if (n !== 0) state.emittedReadable = false;\n    // if we're doing read(0) to trigger a readable event, but we\n    // already have a bunch of data in the buffer, then just trigger\n    // the 'readable' event and move on.\n    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended) endReadable(this);\n        else emitReadable(this);\n        return null;\n    }\n    n = howMuchToRead(n, state);\n    // if we've ended, and we're now clear, then finish it up.\n    if (n === 0 && state.ended) {\n        if (state.length === 0) endReadable(this);\n        return null;\n    }\n    // All the actual chunk generation logic needs to be\n    // *below* the call to _read.  The reason is that in certain\n    // synthetic stream cases, such as passthrough streams, _read\n    // may be a completely synchronous operation which may change\n    // the state of the read buffer, providing enough data when\n    // before there was *not* enough.\n    //\n    // So, the steps are:\n    // 1. Figure out what the state of things will be after we do\n    // a read from the buffer.\n    //\n    // 2. If that resulting state will trigger a _read, then call _read.\n    // Note that this may be asynchronous, or synchronous.  Yes, it is\n    // deeply ugly to write APIs this way, but that still doesn't mean\n    // that the Readable class should behave improperly, as streams are\n    // designed to be sync/async agnostic.\n    // Take note if the _read call is sync or async (ie, if the read call\n    // has returned yet), so that we know whether or not it's safe to emit\n    // 'readable' etc.\n    //\n    // 3. Actually pull the requested chunks out of the buffer and return.\n    // if we need a readable event, then we need to do some reading.\n    var doRead = state.needReadable;\n    debug(\"need readable\", doRead);\n    // if we currently have less than the highWaterMark, then also read some\n    if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n    }\n    // however, if we've ended, then there's no point, and if we're already\n    // reading, then it's unnecessary.\n    if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n    } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        // if the length is currently zero, then we *need* a readable event.\n        if (state.length === 0) state.needReadable = true;\n        // call internal read method\n        this._read(state.highWaterMark);\n        state.sync = false;\n        // If _read pushed data synchronously, then `reading` will be false,\n        // and we need to re-evaluate how much data we can return to the user.\n        if (!state.reading) n = howMuchToRead(nOrig, state);\n    }\n    var ret;\n    if (n > 0) ret = fromList(n, state);\n    else ret = null;\n    if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n    } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n    }\n    if (state.length === 0) {\n        // If we have nothing in the buffer, then we want to know\n        // as soon as we *do* get something into the buffer.\n        if (!state.ended) state.needReadable = true;\n        // If we tried to read() past the EOF, then emit end on the next tick.\n        if (nOrig !== n && state.ended) endReadable(this);\n    }\n    if (ret !== null) this.emit(\"data\", ret);\n    return ret;\n};\nfunction onEofChunk(stream, state) {\n    debug(\"onEofChunk\");\n    if (state.ended) return;\n    if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n            state.buffer.push(chunk);\n            state.length += state.objectMode ? 1 : chunk.length;\n        }\n    }\n    state.ended = true;\n    if (state.sync) {\n        // if we are sync, wait until next tick to emit the data.\n        // Otherwise we risk emitting data in the flow()\n        // the readable code triggers during a read() call\n        emitReadable(stream);\n    } else {\n        // emit 'readable' now to make sure it gets picked up.\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n            state.emittedReadable = true;\n            emitReadable_(stream);\n        }\n    }\n}\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n    var state = stream._readableState;\n    debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n    }\n}\nfunction emitReadable_(stream) {\n    var state = stream._readableState;\n    debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n    if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n    }\n    // The stream needs another readable event if\n    // 1. It is not flowing, as the flow mechanism will take\n    //    care of it.\n    // 2. It is not ended.\n    // 3. It is below the highWaterMark, so we can schedule\n    //    another readable later.\n    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n    flow(stream);\n}\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n    if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n    }\n}\nfunction maybeReadMore_(stream, state) {\n    // Attempt to read more data if we should.\n    //\n    // The conditions for reading more data are (one of):\n    // - Not enough data buffered (state.length < state.highWaterMark). The loop\n    //   is responsible for filling the buffer with enough data if such data\n    //   is available. If highWaterMark is 0 and we are not in the flowing mode\n    //   we should _not_ attempt to buffer any extra data. We'll get more data\n    //   when the stream consumer calls read() instead.\n    // - No data in the buffer, and the stream is in flowing mode. In this mode\n    //   the loop below is responsible for ensuring read() is called. Failing to\n    //   call read here would abort the flow and there's no other mechanism for\n    //   continuing the flow if the stream consumer has just subscribed to the\n    //   'data' event.\n    //\n    // In addition to the above conditions to keep reading data, the following\n    // conditions prevent the data from being read:\n    // - The stream has ended (state.ended).\n    // - There is already a pending 'read' operation (state.reading). This is a\n    //   case where the the stream has called the implementation defined _read()\n    //   method, but they are processing the call asynchronously and have _not_\n    //   called push() with new data. In this case we skip performing more\n    //   read()s. The execution ends in this method again after the _read() ends\n    //   up calling push() with more data.\n    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length) break;\n    }\n    state.readingMore = false;\n}\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n};\nReadable.prototype.pipe = function(dest, pipeOpts) {\n    var src = this;\n    var state = this._readableState;\n    switch(state.pipesCount){\n        case 0:\n            state.pipes = dest;\n            break;\n        case 1:\n            state.pipes = [\n                state.pipes,\n                dest\n            ];\n            break;\n        default:\n            state.pipes.push(dest);\n            break;\n    }\n    state.pipesCount += 1;\n    debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n    var endFn = doEnd ? onend : unpipe;\n    if (state.endEmitted) process.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n                unpipeInfo.hasUnpiped = true;\n                cleanup();\n            }\n        }\n    }\n    function onend() {\n        debug(\"onend\");\n        dest.end();\n    }\n    // when the dest drains, it reduces the awaitDrain counter\n    // on the source.  This would be more elegant with a .once()\n    // handler in flow(), but adding and removing repeatedly is\n    // too slow.\n    var ondrain = pipeOnDrain(src);\n    dest.on(\"drain\", ondrain);\n    var cleanedUp = false;\n    function cleanup() {\n        debug(\"cleanup\");\n        // cleanup event handlers once the pipe is broken\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        // if the reader is waiting for a drain event from this\n        // specific writer, then it would cause it to never start\n        // flowing again.\n        // So, if this is awaiting a drain, then we just call it now.\n        // If we don't know, then assume that we are waiting for one.\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n    src.on(\"data\", ondata);\n    function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n            // If the user unpiped during `dest.write()`, it is possible\n            // to get stuck in a permanently paused state if that write\n            // also returned false.\n            // => Check whether `dest` is still a piping destination.\n            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n                debug(\"false write response, pause\", state.awaitDrain);\n                state.awaitDrain++;\n            }\n            src.pause();\n        }\n    }\n    // if the dest has an error, then stop piping into it.\n    // however, don't suppress the throwing behavior for this.\n    function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0) errorOrDestroy(dest, er);\n    }\n    // Make sure our error handler is attached before userland ones.\n    prependListener(dest, \"error\", onerror);\n    // Both close and finish should trigger unpipe, but only once.\n    function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n    }\n    // tell the dest that it's being piped to\n    dest.emit(\"pipe\", src);\n    // start the flow if it hasn't been started already.\n    if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n    }\n    return dest;\n};\nfunction pipeOnDrain(src) {\n    return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain) state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n            state.flowing = true;\n            flow(src);\n        }\n    };\n}\nReadable.prototype.unpipe = function(dest) {\n    var state = this._readableState;\n    var unpipeInfo = {\n        hasUnpiped: false\n    };\n    // if we're not piping anywhere, then do nothing.\n    if (state.pipesCount === 0) return this;\n    // just one destination.  most common case.\n    if (state.pipesCount === 1) {\n        // passed in one, but it's not the right one.\n        if (dest && dest !== state.pipes) return this;\n        if (!dest) dest = state.pipes;\n        // got a match.\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest) dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n    }\n    // slow case. multiple pipe destinations.\n    if (!dest) {\n        // remove all.\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for(var i = 0; i < len; i++)dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n        });\n        return this;\n    }\n    // try to find the right one.\n    var index = indexOf(state.pipes, dest);\n    if (index === -1) return this;\n    state.pipes.splice(index, 1);\n    state.pipesCount -= 1;\n    if (state.pipesCount === 1) state.pipes = state.pipes[0];\n    dest.emit(\"unpipe\", this, unpipeInfo);\n    return this;\n};\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n    var res = Stream.prototype.on.call(this, ev, fn);\n    var state = this._readableState;\n    if (ev === \"data\") {\n        // update readableListening so that resume() may be a no-op\n        // a few lines down. This is needed to support once('readable').\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        // Try start flowing on next tick if stream isn't explicitly paused\n        if (state.flowing !== false) this.resume();\n    } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n            state.readableListening = state.needReadable = true;\n            state.flowing = false;\n            state.emittedReadable = false;\n            debug(\"on readable\", state.length, state.reading);\n            if (state.length) {\n                emitReadable(this);\n            } else if (!state.reading) {\n                process.nextTick(nReadingNextTick, this);\n            }\n        }\n    }\n    return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function(ev, fn) {\n    var res = Stream.prototype.removeListener.call(this, ev, fn);\n    if (ev === \"readable\") {\n        // We need to check if there is someone still listening to\n        // readable and reset the state. However this needs to happen\n        // after readable has been emitted but before I/O (nextTick) to\n        // support once('readable', fn) cycles. This means that calling\n        // resume within the same tick will have no\n        // effect.\n        process.nextTick(updateReadableListening, this);\n    }\n    return res;\n};\nReadable.prototype.removeAllListeners = function(ev) {\n    var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n    if (ev === \"readable\" || ev === undefined) {\n        // We need to check if there is someone still listening to\n        // readable and reset the state. However this needs to happen\n        // after readable has been emitted but before I/O (nextTick) to\n        // support once('readable', fn) cycles. This means that calling\n        // resume within the same tick will have no\n        // effect.\n        process.nextTick(updateReadableListening, this);\n    }\n    return res;\n};\nfunction updateReadableListening(self1) {\n    var state = self1._readableState;\n    state.readableListening = self1.listenerCount(\"readable\") > 0;\n    if (state.resumeScheduled && !state.paused) {\n        // flowing needs to be set to true now, otherwise\n        // the upcoming resume will not flow.\n        state.flowing = true;\n    // crude way to check if we should resume\n    } else if (self1.listenerCount(\"data\") > 0) {\n        self1.resume();\n    }\n}\nfunction nReadingNextTick(self1) {\n    debug(\"readable nexttick read 0\");\n    self1.read(0);\n}\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n    var state = this._readableState;\n    if (!state.flowing) {\n        debug(\"resume\");\n        // we flow only if there is no one listening\n        // for readable, but we still have to call\n        // resume()\n        state.flowing = !state.readableListening;\n        resume(this, state);\n    }\n    state.paused = false;\n    return this;\n};\nfunction resume(stream, state) {\n    if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n    }\n}\nfunction resume_(stream, state) {\n    debug(\"resume\", state.reading);\n    if (!state.reading) {\n        stream.read(0);\n    }\n    state.resumeScheduled = false;\n    stream.emit(\"resume\");\n    flow(stream);\n    if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function() {\n    debug(\"call pause flowing=%j\", this._readableState.flowing);\n    if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n    }\n    this._readableState.paused = true;\n    return this;\n};\nfunction flow(stream) {\n    var state = stream._readableState;\n    debug(\"flow\", state.flowing);\n    while(state.flowing && stream.read() !== null);\n}\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n    var _this = this;\n    var state = this._readableState;\n    var paused = false;\n    stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n            var chunk = state.decoder.end();\n            if (chunk && chunk.length) _this.push(chunk);\n        }\n        _this.push(null);\n    });\n    stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder) chunk = state.decoder.write(chunk);\n        // don't skip over falsy values in objectMode\n        if (state.objectMode && (chunk === null || chunk === undefined)) return;\n        else if (!state.objectMode && (!chunk || !chunk.length)) return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n            paused = true;\n            stream.pause();\n        }\n    });\n    // proxy all the other methods.\n    // important when wrapping filters and duplexes.\n    for(var i in stream){\n        if (this[i] === undefined && typeof stream[i] === \"function\") {\n            this[i] = function methodWrap(method) {\n                return function methodWrapReturnFunction() {\n                    return stream[method].apply(stream, arguments);\n                };\n            }(i);\n        }\n    }\n    // proxy certain important events.\n    for(var n = 0; n < kProxyEvents.length; n++){\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n    }\n    // when we try to consume some more bytes, simply unpause the\n    // underlying stream.\n    this._read = function(n) {\n        debug(\"wrapped _read\", n);\n        if (paused) {\n            paused = false;\n            stream.resume();\n        }\n    };\n    return this;\n};\nif (typeof Symbol === \"function\") {\n    Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === undefined) {\n            createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/async_iterator.js\");\n        }\n        return createReadableStreamAsyncIterator(this);\n    };\n}\nObject.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._readableState.highWaterMark;\n    }\n});\nObject.defineProperty(Readable.prototype, \"readableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._readableState && this._readableState.buffer;\n    }\n});\nObject.defineProperty(Readable.prototype, \"readableFlowing\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._readableState.flowing;\n    },\n    set: function set(state) {\n        if (this._readableState) {\n            this._readableState.flowing = state;\n        }\n    }\n});\n// exposed for testing purposes only.\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, \"readableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._readableState.length;\n    }\n});\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n    // nothing buffered\n    if (state.length === 0) return null;\n    var ret;\n    if (state.objectMode) ret = state.buffer.shift();\n    else if (!n || n >= state.length) {\n        // read it all, truncate the list\n        if (state.decoder) ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1) ret = state.buffer.first();\n        else ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n    } else {\n        // read part of list\n        ret = state.buffer.consume(n, state.decoder);\n    }\n    return ret;\n}\nfunction endReadable(stream) {\n    var state = stream._readableState;\n    debug(\"endReadable\", state.endEmitted);\n    if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n    }\n}\nfunction endReadableNT(state, stream) {\n    debug(\"endReadableNT\", state.endEmitted, state.length);\n    // Check that we didn't get one last unshift.\n    if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n            // In case of duplex streams we need a way to detect\n            // if the writable side is ready for autoDestroy as well\n            var wState = stream._writableState;\n            if (!wState || wState.autoDestroy && wState.finished) {\n                stream.destroy();\n            }\n        }\n    }\n}\nif (typeof Symbol === \"function\") {\n    Readable.from = function(iterable, opts) {\n        if (from === undefined) {\n            from = __webpack_require__(/*! ./internal/streams/from */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/from.js\");\n        }\n        return from(Readable, iterable, opts);\n    };\n}\nfunction indexOf(xs, x) {\n    for(var i = 0, l = xs.length; i < l; i++){\n        if (xs[i] === x) return i;\n    }\n    return -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_transform.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/_stream_transform.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes), ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Transform, Duplex);\nfunction afterTransform(er, data) {\n    var ts = this._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n    }\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n    cb(er);\n    var rs = this._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n    }\n}\nfunction Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n    Duplex.call(this, options);\n    this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n    };\n    // start out asking for a readable event once data is transformed.\n    this._readableState.needReadable = true;\n    // we have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n    if (options) {\n        if (typeof options.transform === \"function\") this._transform = options.transform;\n        if (typeof options.flush === \"function\") this._flush = options.flush;\n    }\n    // When the writable side finishes, then flush out anything remaining.\n    this.on(\"prefinish\", prefinish);\n}\nfunction prefinish() {\n    var _this = this;\n    if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n            done(_this, er, data);\n        });\n    } else {\n        done(this, null, null);\n    }\n}\nTransform.prototype.push = function(chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n};\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n};\nTransform.prototype._write = function(chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n};\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n        // mark that we need a transform, so that any data that comes in\n        // will get processed, now that we've asked for it.\n        ts.needTransform = true;\n    }\n};\nTransform.prototype._destroy = function(err, cb) {\n    Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n    });\n};\nfunction done(stream, er, data) {\n    if (er) return stream.emit(\"error\", er);\n    if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n    // TODO(BridgeAR): Write a test for these two error cases\n    // if there's nothing in the write buffer, then that means\n    // that nothing more will ever be provided\n    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n    return stream.push(null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_writable.js":
/*!************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/_stream_writable.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n/* <replacement> */ function WriteReq(chunk, encoding, cb) {\n    this.chunk = chunk;\n    this.encoding = encoding;\n    this.callback = cb;\n    this.next = null;\n}\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n    var _this = this;\n    this.next = null;\n    this.entry = null;\n    this.finish = function() {\n        onCorkedFinish(_this, state);\n    };\n}\n/* </replacement> */ /*<replacement>*/ var Duplex;\n/*</replacement>*/ Writable.WritableState = WritableState;\n/*<replacement>*/ var internalUtil = {\n    deprecate: __webpack_require__(/*! util-deprecate */ \"(ssr)/./node_modules/util-deprecate/node.js\")\n};\n/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(/*! ./internal/streams/stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/stream.js\");\n/*</replacement>*/ var Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar OurUint8Array = (typeof global !== \"undefined\" ? global :  false ? 0 : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {};\nfunction _uint8ArrayToBuffer(chunk) {\n    return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/state.js\"), getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes), ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream, isDuplex) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n    options = options || {};\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream,\n    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    // object stream flag to indicate whether or not this stream\n    // contains buffers or objects.\n    this.objectMode = !!options.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n    // the point at which write() starts returning false\n    // Note: 0 is a valid value, means that we always return false if\n    // the entire buffer is not flushed immediately on write()\n    this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n    // if _final has been called\n    this.finalCalled = false;\n    // drain event flag.\n    this.needDrain = false;\n    // at the start of calling end()\n    this.ending = false;\n    // when end() has been called, and returned\n    this.ended = false;\n    // when 'finish' is emitted\n    this.finished = false;\n    // has it been destroyed\n    this.destroyed = false;\n    // should we decode strings into buffers before passing to _write?\n    // this is here so that some node-core streams can optimize string\n    // handling at a lower level.\n    var noDecode = options.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // not an actual buffer we keep track of, but a measurement\n    // of how much we're waiting to get pushed to some underlying\n    // socket or file.\n    this.length = 0;\n    // a flag to see when we're in the middle of a write.\n    this.writing = false;\n    // when true all writes will be buffered until .uncork() call\n    this.corked = 0;\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, because any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n    // a flag to know if we're processing previously buffered items, which\n    // may call the _write() callback in the same tick, so that we don't\n    // end up in an overlapped onwrite situation.\n    this.bufferProcessing = false;\n    // the callback that's passed to _write(chunk,cb)\n    this.onwrite = function(er) {\n        onwrite(stream, er);\n    };\n    // the callback that the user supplies to write(chunk,encoding,cb)\n    this.writecb = null;\n    // the amount that is being written when _write is called.\n    this.writelen = 0;\n    this.bufferedRequest = null;\n    this.lastBufferedRequest = null;\n    // number of pending user-supplied write callbacks\n    // this must be 0 before 'finish' can be emitted\n    this.pendingcb = 0;\n    // emit prefinish if the only thing we're waiting for is _write cbs\n    // This is relevant for synchronous Transform streams\n    this.prefinished = false;\n    // True if the error was already emitted and should not be thrown again\n    this.errorEmitted = false;\n    // Should close be emitted on destroy. Defaults to true.\n    this.emitClose = options.emitClose !== false;\n    // Should .destroy() be called after 'finish' (and potentially 'end')\n    this.autoDestroy = !!options.autoDestroy;\n    // count buffered requests\n    this.bufferedRequestCount = 0;\n    // allocate the first CorkedRequest, there is always\n    // one allocated and free to use, and we maintain at most two\n    this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n    var current = this.bufferedRequest;\n    var out = [];\n    while(current){\n        out.push(current);\n        current = current.next;\n    }\n    return out;\n};\n(function() {\n    try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n            get: internalUtil.deprecate(function writableStateBufferGetter() {\n                return this.getBuffer();\n            }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer \" + \"instead.\", \"DEP0003\")\n        });\n    } catch (_) {}\n})();\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n    realHasInstance = Function.prototype[Symbol.hasInstance];\n    Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n            if (realHasInstance.call(this, object)) return true;\n            if (this !== Writable) return false;\n            return object && object._writableState instanceof WritableState;\n        }\n    });\n} else {\n    realHasInstance = function realHasInstance(object) {\n        return object instanceof this;\n    };\n}\nfunction Writable(options) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n    // Writable ctor is applied to Duplexes, too.\n    // `realHasInstance` is necessary because using plain `instanceof`\n    // would return false, as no `_writableState` property is attached.\n    // Trying to use the custom `instanceof` for Writable here will also break the\n    // Node.js LazyTransform implementation, which has a non-trivial getter for\n    // `_writableState` that would lead to infinite recursion.\n    // Checking for a Stream.Duplex instance is faster here instead of inside\n    // the WritableState constructor, at least with V8 6.5\n    var isDuplex = this instanceof Duplex;\n    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n    this._writableState = new WritableState(options, this, isDuplex);\n    // legacy.\n    this.writable = true;\n    if (options) {\n        if (typeof options.write === \"function\") this._write = options.write;\n        if (typeof options.writev === \"function\") this._writev = options.writev;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n        if (typeof options.final === \"function\") this._final = options.final;\n    }\n    Stream.call(this);\n}\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction writeAfterEnd(stream, cb) {\n    var er = new ERR_STREAM_WRITE_AFTER_END();\n    // TODO: defer error events consistently everywhere, not just the cb\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n}\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n    var er;\n    if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n    } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\n            \"string\",\n            \"Buffer\"\n        ], chunk);\n    }\n    if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n    }\n    return true;\n}\nWritable.prototype.write = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    var ret = false;\n    var isBuf = !state.objectMode && _isUint8Array(chunk);\n    if (isBuf && !Buffer.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n    }\n    if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (isBuf) encoding = \"buffer\";\n    else if (!encoding) encoding = state.defaultEncoding;\n    if (typeof cb !== \"function\") cb = nop;\n    if (state.ending) writeAfterEnd(this, cb);\n    else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n    }\n    return ret;\n};\nWritable.prototype.cork = function() {\n    this._writableState.corked++;\n};\nWritable.prototype.uncork = function() {\n    var state = this._writableState;\n    if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n    }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    // node::ParseEncoding() requires lower case.\n    if (typeof encoding === \"string\") encoding = encoding.toLowerCase();\n    if (!([\n        \"hex\",\n        \"utf8\",\n        \"utf-8\",\n        \"ascii\",\n        \"binary\",\n        \"base64\",\n        \"ucs2\",\n        \"ucs-2\",\n        \"utf16le\",\n        \"utf-16le\",\n        \"raw\"\n    ].indexOf((encoding + \"\").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n};\nObject.defineProperty(Writable.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n    }\n});\nfunction decodeChunk(state, chunk, encoding) {\n    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n    }\n    return chunk;\n}\nObject.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState.highWaterMark;\n    }\n});\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n    if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n            isBuf = true;\n            encoding = \"buffer\";\n            chunk = newChunk;\n        }\n    }\n    var len = state.objectMode ? 1 : chunk.length;\n    state.length += len;\n    var ret = state.length < state.highWaterMark;\n    // we must ensure that previous needDrain will not be reset to false.\n    if (!ret) state.needDrain = true;\n    if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n            chunk: chunk,\n            encoding: encoding,\n            isBuf: isBuf,\n            callback: cb,\n            next: null\n        };\n        if (last) {\n            last.next = state.lastBufferedRequest;\n        } else {\n            state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n    } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n    }\n    return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n    state.writelen = len;\n    state.writecb = cb;\n    state.writing = true;\n    state.sync = true;\n    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n    else if (writev) stream._writev(chunk, state.onwrite);\n    else stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n    --state.pendingcb;\n    if (sync) {\n        // defer the callback if we are being called synchronously\n        // to avoid piling up things on the stack\n        process.nextTick(cb, er);\n        // this can emit finish, and it will always happen\n        // after error\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n    } else {\n        // the caller expect this to happen before if\n        // it is async\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        // this can emit finish, but finish must\n        // always follow error\n        finishMaybe(stream, state);\n    }\n}\nfunction onwriteStateUpdate(state) {\n    state.writing = false;\n    state.writecb = null;\n    state.length -= state.writelen;\n    state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n    var state = stream._writableState;\n    var sync = state.sync;\n    var cb = state.writecb;\n    if (typeof cb !== \"function\") throw new ERR_MULTIPLE_CALLBACK();\n    onwriteStateUpdate(state);\n    if (er) onwriteError(stream, state, sync, er, cb);\n    else {\n        // Check if we're actually ready to finish, but don't emit yet\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n            clearBuffer(stream, state);\n        }\n        if (sync) {\n            process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n            afterWrite(stream, state, finished, cb);\n        }\n    }\n}\nfunction afterWrite(stream, state, finished, cb) {\n    if (!finished) onwriteDrain(stream, state);\n    state.pendingcb--;\n    cb();\n    finishMaybe(stream, state);\n}\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n    if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n    }\n}\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n    state.bufferProcessing = true;\n    var entry = state.bufferedRequest;\n    if (stream._writev && entry && entry.next) {\n        // Fast case, write everything using _writev()\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while(entry){\n            buffer[count] = entry;\n            if (!entry.isBuf) allBuffers = false;\n            entry = entry.next;\n            count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        // doWrite is almost always async, defer these to save a bit of time\n        // as the hot path ends with doWrite\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n            state.corkedRequestsFree = holder.next;\n            holder.next = null;\n        } else {\n            state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n    } else {\n        // Slow case, write chunks one-by-one\n        while(entry){\n            var chunk = entry.chunk;\n            var encoding = entry.encoding;\n            var cb = entry.callback;\n            var len = state.objectMode ? 1 : chunk.length;\n            doWrite(stream, state, false, len, chunk, encoding, cb);\n            entry = entry.next;\n            state.bufferedRequestCount--;\n            // if we didn't call the onwrite immediately, then\n            // it means that we need to wait until it does.\n            // also, that means that the chunk and cb are currently\n            // being processed, so move the buffer counter past them.\n            if (state.writing) {\n                break;\n            }\n        }\n        if (entry === null) state.lastBufferedRequest = null;\n    }\n    state.bufferedRequest = entry;\n    state.bufferProcessing = false;\n}\nWritable.prototype._write = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n    } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n    // .end() fully uncorks\n    if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n    }\n    // ignore unnecessary end() calls.\n    if (!state.ending) endWritable(this, state, cb);\n    return this;\n};\nObject.defineProperty(Writable.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        return this._writableState.length;\n    }\n});\nfunction needFinish(state) {\n    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n    stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n            errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n    });\n}\nfunction prefinish(stream, state) {\n    if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n            state.pendingcb++;\n            state.finalCalled = true;\n            process.nextTick(callFinal, stream, state);\n        } else {\n            state.prefinished = true;\n            stream.emit(\"prefinish\");\n        }\n    }\n}\nfunction finishMaybe(stream, state) {\n    var need = needFinish(state);\n    if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n            state.finished = true;\n            stream.emit(\"finish\");\n            if (state.autoDestroy) {\n                // In case of duplex streams we need a way to detect\n                // if the readable side is ready for autoDestroy as well\n                var rState = stream._readableState;\n                if (!rState || rState.autoDestroy && rState.endEmitted) {\n                    stream.destroy();\n                }\n            }\n        }\n    }\n    return need;\n}\nfunction endWritable(stream, state, cb) {\n    state.ending = true;\n    finishMaybe(stream, state);\n    if (cb) {\n        if (state.finished) process.nextTick(cb);\n        else stream.once(\"finish\", cb);\n    }\n    state.ended = true;\n    stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n    var entry = corkReq.entry;\n    corkReq.entry = null;\n    while(entry){\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n    }\n    // reuse the free corkReq.\n    state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n        if (this._writableState === undefined) {\n            return false;\n        }\n        return this._writableState.destroyed;\n    },\n    set: function set(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (!this._writableState) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._writableState.destroyed = value;\n    }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function(err, cb) {\n    cb(err);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_writable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar _Object$setPrototypeO;\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nvar finished = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nvar kLastResolve = Symbol(\"lastResolve\");\nvar kLastReject = Symbol(\"lastReject\");\nvar kError = Symbol(\"error\");\nvar kEnded = Symbol(\"ended\");\nvar kLastPromise = Symbol(\"lastPromise\");\nvar kHandlePromise = Symbol(\"handlePromise\");\nvar kStream = Symbol(\"stream\");\nfunction createIterResult(value, done) {\n    return {\n        value: value,\n        done: done\n    };\n}\nfunction readAndResolve(iter) {\n    var resolve = iter[kLastResolve];\n    if (resolve !== null) {\n        var data = iter[kStream].read();\n        // we defer if data is null\n        // we can be expecting either 'end' or\n        // 'error'\n        if (data !== null) {\n            iter[kLastPromise] = null;\n            iter[kLastResolve] = null;\n            iter[kLastReject] = null;\n            resolve(createIterResult(data, false));\n        }\n    }\n}\nfunction onReadable(iter) {\n    // we wait for the next tick, because it might\n    // emit an error with process.nextTick\n    process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n    return function(resolve, reject) {\n        lastPromise.then(function() {\n            if (iter[kEnded]) {\n                resolve(createIterResult(undefined, true));\n                return;\n            }\n            iter[kHandlePromise](resolve, reject);\n        }, reject);\n    };\n}\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function() {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n    get stream () {\n        return this[kStream];\n    },\n    next: function next() {\n        var _this = this;\n        // if we have detected an error in the meanwhile\n        // reject straight away\n        var error = this[kError];\n        if (error !== null) {\n            return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n            return Promise.resolve(createIterResult(undefined, true));\n        }\n        if (this[kStream].destroyed) {\n            // We need to defer via nextTick because if .destroy(err) is\n            // called, the error will be emitted via nextTick, and\n            // we cannot guarantee that there is no error lingering around\n            // waiting to be emitted.\n            return new Promise(function(resolve, reject) {\n                process.nextTick(function() {\n                    if (_this[kError]) {\n                        reject(_this[kError]);\n                    } else {\n                        resolve(createIterResult(undefined, true));\n                    }\n                });\n            });\n        }\n        // if we have multiple next() calls\n        // we will wait for the previous Promise to finish\n        // this logic is optimized to support for await loops,\n        // where next() is only called once at a time\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n            promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n            // fast path needed to support multiple this.push()\n            // without triggering the next() queue\n            var data = this[kStream].read();\n            if (data !== null) {\n                return Promise.resolve(createIterResult(data, false));\n            }\n            promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n    }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n    return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n    var _this2 = this;\n    // destroy(err, cb) is a private API\n    // we can guarantee we have that here, because we control the\n    // Readable class this is attached to\n    return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(createIterResult(undefined, true));\n        });\n    });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n    var _Object$create;\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n    }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n    }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n    }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n    }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n    }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n            var data = iterator[kStream].read();\n            if (data) {\n                iterator[kLastPromise] = null;\n                iterator[kLastResolve] = null;\n                iterator[kLastReject] = null;\n                resolve(createIterResult(data, false));\n            } else {\n                iterator[kLastResolve] = resolve;\n                iterator[kLastReject] = reject;\n            }\n        },\n        writable: true\n    }), _Object$create));\n    iterator[kLastPromise] = null;\n    finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n            var reject = iterator[kLastReject];\n            // reject if we are waiting for data in the Promise\n            // returned by next() and store the error\n            if (reject !== null) {\n                iterator[kLastPromise] = null;\n                iterator[kLastResolve] = null;\n                iterator[kLastReject] = null;\n                reject(err);\n            }\n            iterator[kError] = err;\n            return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(undefined, true));\n        }\n        iterator[kEnded] = true;\n    });\n    stream.on(\"readable\", onReadable.bind(null, iterator));\n    return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/async_iterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nvar _require = __webpack_require__(/*! buffer */ \"buffer\"), Buffer = _require.Buffer;\nvar _require2 = __webpack_require__(/*! util */ \"util\"), inspect = _require2.inspect;\nvar custom = inspect && inspect.custom || \"inspect\";\nfunction copyBuffer(src, target, offset) {\n    Buffer.prototype.copy.call(src, target, offset);\n}\nmodule.exports = /*#__PURE__*/ function() {\n    function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    _createClass(BufferList, [\n        {\n            key: \"push\",\n            value: function push(v) {\n                var entry = {\n                    data: v,\n                    next: null\n                };\n                if (this.length > 0) this.tail.next = entry;\n                else this.head = entry;\n                this.tail = entry;\n                ++this.length;\n            }\n        },\n        {\n            key: \"unshift\",\n            value: function unshift(v) {\n                var entry = {\n                    data: v,\n                    next: this.head\n                };\n                if (this.length === 0) this.tail = entry;\n                this.head = entry;\n                ++this.length;\n            }\n        },\n        {\n            key: \"shift\",\n            value: function shift() {\n                if (this.length === 0) return;\n                var ret = this.head.data;\n                if (this.length === 1) this.head = this.tail = null;\n                else this.head = this.head.next;\n                --this.length;\n                return ret;\n            }\n        },\n        {\n            key: \"clear\",\n            value: function clear() {\n                this.head = this.tail = null;\n                this.length = 0;\n            }\n        },\n        {\n            key: \"join\",\n            value: function join(s) {\n                if (this.length === 0) return \"\";\n                var p = this.head;\n                var ret = \"\" + p.data;\n                while(p = p.next)ret += s + p.data;\n                return ret;\n            }\n        },\n        {\n            key: \"concat\",\n            value: function concat(n) {\n                if (this.length === 0) return Buffer.alloc(0);\n                var ret = Buffer.allocUnsafe(n >>> 0);\n                var p = this.head;\n                var i = 0;\n                while(p){\n                    copyBuffer(p.data, ret, i);\n                    i += p.data.length;\n                    p = p.next;\n                }\n                return ret;\n            }\n        },\n        {\n            key: \"consume\",\n            value: function consume(n, hasStrings) {\n                var ret;\n                if (n < this.head.data.length) {\n                    // `slice` is the same for buffers and strings.\n                    ret = this.head.data.slice(0, n);\n                    this.head.data = this.head.data.slice(n);\n                } else if (n === this.head.data.length) {\n                    // First chunk is a perfect match.\n                    ret = this.shift();\n                } else {\n                    // Result spans more than one buffer.\n                    ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n                }\n                return ret;\n            }\n        },\n        {\n            key: \"first\",\n            value: function first() {\n                return this.head.data;\n            }\n        },\n        {\n            key: \"_getString\",\n            value: function _getString(n) {\n                var p = this.head;\n                var c = 1;\n                var ret = p.data;\n                n -= ret.length;\n                while(p = p.next){\n                    var str = p.data;\n                    var nb = n > str.length ? str.length : n;\n                    if (nb === str.length) ret += str;\n                    else ret += str.slice(0, n);\n                    n -= nb;\n                    if (n === 0) {\n                        if (nb === str.length) {\n                            ++c;\n                            if (p.next) this.head = p.next;\n                            else this.head = this.tail = null;\n                        } else {\n                            this.head = p;\n                            p.data = str.slice(nb);\n                        }\n                        break;\n                    }\n                    ++c;\n                }\n                this.length -= c;\n                return ret;\n            }\n        },\n        {\n            key: \"_getBuffer\",\n            value: function _getBuffer(n) {\n                var ret = Buffer.allocUnsafe(n);\n                var p = this.head;\n                var c = 1;\n                p.data.copy(ret);\n                n -= p.data.length;\n                while(p = p.next){\n                    var buf = p.data;\n                    var nb = n > buf.length ? buf.length : n;\n                    buf.copy(ret, ret.length - n, 0, nb);\n                    n -= nb;\n                    if (n === 0) {\n                        if (nb === buf.length) {\n                            ++c;\n                            if (p.next) this.head = p.next;\n                            else this.head = this.tail = null;\n                        } else {\n                            this.head = p;\n                            p.data = buf.slice(nb);\n                        }\n                        break;\n                    }\n                    ++c;\n                }\n                this.length -= c;\n                return ret;\n            }\n        },\n        {\n            key: custom,\n            value: function value(_, options) {\n                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n                    // Only inspect one level.\n                    depth: 0,\n                    // It should not recurse.\n                    customInspect: false\n                }));\n            }\n        }\n    ]);\n    return BufferList;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/buffer_list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n    var _this = this;\n    var readableDestroyed = this._readableState && this._readableState.destroyed;\n    var writableDestroyed = this._writableState && this._writableState.destroyed;\n    if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n            cb(err);\n        } else if (err) {\n            if (!this._writableState) {\n                process.nextTick(emitErrorNT, this, err);\n            } else if (!this._writableState.errorEmitted) {\n                this._writableState.errorEmitted = true;\n                process.nextTick(emitErrorNT, this, err);\n            }\n        }\n        return this;\n    }\n    // we set destroyed to true before firing error callbacks in order\n    // to make it re-entrance safe in case destroy() is called within callbacks\n    if (this._readableState) {\n        this._readableState.destroyed = true;\n    }\n    // if this is a duplex stream mark the writable part as destroyed as well\n    if (this._writableState) {\n        this._writableState.destroyed = true;\n    }\n    this._destroy(err || null, function(err) {\n        if (!cb && err) {\n            if (!_this._writableState) {\n                process.nextTick(emitErrorAndCloseNT, _this, err);\n            } else if (!_this._writableState.errorEmitted) {\n                _this._writableState.errorEmitted = true;\n                process.nextTick(emitErrorAndCloseNT, _this, err);\n            } else {\n                process.nextTick(emitCloseNT, _this);\n            }\n        } else if (cb) {\n            process.nextTick(emitCloseNT, _this);\n            cb(err);\n        } else {\n            process.nextTick(emitCloseNT, _this);\n        }\n    });\n    return this;\n}\nfunction emitErrorAndCloseNT(self, err) {\n    emitErrorNT(self, err);\n    emitCloseNT(self);\n}\nfunction emitCloseNT(self) {\n    if (self._writableState && !self._writableState.emitClose) return;\n    if (self._readableState && !self._readableState.emitClose) return;\n    self.emit(\"close\");\n}\nfunction undestroy() {\n    if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n    }\n    if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n    }\n}\nfunction emitErrorNT(self, err) {\n    self.emit(\"error\", err);\n}\nfunction errorOrDestroy(stream, err) {\n    // We have tests that rely on errors being emitted\n    // in the same tick, so changing this is semver major.\n    // For now when you opt-in to autoDestroy we allow\n    // the error to be emitted nextTick. In a future\n    // semver major update we should change the default to this.\n    var rState = stream._readableState;\n    var wState = stream._writableState;\n    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);\n    else stream.emit(\"error\", err);\n}\nmodule.exports = {\n    destroy: destroy,\n    undestroy: undestroy,\n    errorOrDestroy: errorOrDestroy\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsNkRBQTZEO0FBQzdELFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsRUFBRTtJQUN0QixJQUFJQyxRQUFRLElBQUk7SUFDaEIsSUFBSUMsb0JBQW9CLElBQUksQ0FBQ0MsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxTQUFTO0lBQzVFLElBQUlDLG9CQUFvQixJQUFJLENBQUNDLGNBQWMsSUFBSSxJQUFJLENBQUNBLGNBQWMsQ0FBQ0YsU0FBUztJQUM1RSxJQUFJRixxQkFBcUJHLG1CQUFtQjtRQUMxQyxJQUFJTCxJQUFJO1lBQ05BLEdBQUdEO1FBQ0wsT0FBTyxJQUFJQSxLQUFLO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ08sY0FBYyxFQUFFO2dCQUN4QkMsUUFBUUMsUUFBUSxDQUFDQyxhQUFhLElBQUksRUFBRVY7WUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDTyxjQUFjLENBQUNJLFlBQVksRUFBRTtnQkFDNUMsSUFBSSxDQUFDSixjQUFjLENBQUNJLFlBQVksR0FBRztnQkFDbkNILFFBQVFDLFFBQVEsQ0FBQ0MsYUFBYSxJQUFJLEVBQUVWO1lBQ3RDO1FBQ0Y7UUFDQSxPQUFPLElBQUk7SUFDYjtJQUVBLGtFQUFrRTtJQUNsRSwyRUFBMkU7SUFFM0UsSUFBSSxJQUFJLENBQUNJLGNBQWMsRUFBRTtRQUN2QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0MsU0FBUyxHQUFHO0lBQ2xDO0lBRUEseUVBQXlFO0lBQ3pFLElBQUksSUFBSSxDQUFDRSxjQUFjLEVBQUU7UUFDdkIsSUFBSSxDQUFDQSxjQUFjLENBQUNGLFNBQVMsR0FBRztJQUNsQztJQUNBLElBQUksQ0FBQ08sUUFBUSxDQUFDWixPQUFPLE1BQU0sU0FBVUEsR0FBRztRQUN0QyxJQUFJLENBQUNDLE1BQU1ELEtBQUs7WUFDZCxJQUFJLENBQUNFLE1BQU1LLGNBQWMsRUFBRTtnQkFDekJDLFFBQVFDLFFBQVEsQ0FBQ0kscUJBQXFCWCxPQUFPRjtZQUMvQyxPQUFPLElBQUksQ0FBQ0UsTUFBTUssY0FBYyxDQUFDSSxZQUFZLEVBQUU7Z0JBQzdDVCxNQUFNSyxjQUFjLENBQUNJLFlBQVksR0FBRztnQkFDcENILFFBQVFDLFFBQVEsQ0FBQ0kscUJBQXFCWCxPQUFPRjtZQUMvQyxPQUFPO2dCQUNMUSxRQUFRQyxRQUFRLENBQUNLLGFBQWFaO1lBQ2hDO1FBQ0YsT0FBTyxJQUFJRCxJQUFJO1lBQ2JPLFFBQVFDLFFBQVEsQ0FBQ0ssYUFBYVo7WUFDOUJELEdBQUdEO1FBQ0wsT0FBTztZQUNMUSxRQUFRQyxRQUFRLENBQUNLLGFBQWFaO1FBQ2hDO0lBQ0Y7SUFDQSxPQUFPLElBQUk7QUFDYjtBQUNBLFNBQVNXLG9CQUFvQkUsSUFBSSxFQUFFZixHQUFHO0lBQ3BDVSxZQUFZSyxNQUFNZjtJQUNsQmMsWUFBWUM7QUFDZDtBQUNBLFNBQVNELFlBQVlDLElBQUk7SUFDdkIsSUFBSUEsS0FBS1IsY0FBYyxJQUFJLENBQUNRLEtBQUtSLGNBQWMsQ0FBQ1MsU0FBUyxFQUFFO0lBQzNELElBQUlELEtBQUtYLGNBQWMsSUFBSSxDQUFDVyxLQUFLWCxjQUFjLENBQUNZLFNBQVMsRUFBRTtJQUMzREQsS0FBS0UsSUFBSSxDQUFDO0FBQ1o7QUFDQSxTQUFTQztJQUNQLElBQUksSUFBSSxDQUFDZCxjQUFjLEVBQUU7UUFDdkIsSUFBSSxDQUFDQSxjQUFjLENBQUNDLFNBQVMsR0FBRztRQUNoQyxJQUFJLENBQUNELGNBQWMsQ0FBQ2UsT0FBTyxHQUFHO1FBQzlCLElBQUksQ0FBQ2YsY0FBYyxDQUFDZ0IsS0FBSyxHQUFHO1FBQzVCLElBQUksQ0FBQ2hCLGNBQWMsQ0FBQ2lCLFVBQVUsR0FBRztJQUNuQztJQUNBLElBQUksSUFBSSxDQUFDZCxjQUFjLEVBQUU7UUFDdkIsSUFBSSxDQUFDQSxjQUFjLENBQUNGLFNBQVMsR0FBRztRQUNoQyxJQUFJLENBQUNFLGNBQWMsQ0FBQ2EsS0FBSyxHQUFHO1FBQzVCLElBQUksQ0FBQ2IsY0FBYyxDQUFDZSxNQUFNLEdBQUc7UUFDN0IsSUFBSSxDQUFDZixjQUFjLENBQUNnQixXQUFXLEdBQUc7UUFDbEMsSUFBSSxDQUFDaEIsY0FBYyxDQUFDaUIsV0FBVyxHQUFHO1FBQ2xDLElBQUksQ0FBQ2pCLGNBQWMsQ0FBQ2tCLFFBQVEsR0FBRztRQUMvQixJQUFJLENBQUNsQixjQUFjLENBQUNJLFlBQVksR0FBRztJQUNyQztBQUNGO0FBQ0EsU0FBU0QsWUFBWUssSUFBSSxFQUFFZixHQUFHO0lBQzVCZSxLQUFLRSxJQUFJLENBQUMsU0FBU2pCO0FBQ3JCO0FBQ0EsU0FBUzBCLGVBQWVDLE1BQU0sRUFBRTNCLEdBQUc7SUFDakMsa0RBQWtEO0lBQ2xELHNEQUFzRDtJQUN0RCxrREFBa0Q7SUFDbEQsZ0RBQWdEO0lBQ2hELDREQUE0RDtJQUU1RCxJQUFJNEIsU0FBU0QsT0FBT3ZCLGNBQWM7SUFDbEMsSUFBSXlCLFNBQVNGLE9BQU9wQixjQUFjO0lBQ2xDLElBQUlxQixVQUFVQSxPQUFPRSxXQUFXLElBQUlELFVBQVVBLE9BQU9DLFdBQVcsRUFBRUgsT0FBTzVCLE9BQU8sQ0FBQ0M7U0FBVTJCLE9BQU9WLElBQUksQ0FBQyxTQUFTakI7QUFDbEg7QUFDQStCLE9BQU9DLE9BQU8sR0FBRztJQUNmakMsU0FBU0E7SUFDVG1CLFdBQVdBO0lBQ1hRLGdCQUFnQkE7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanM/ZjAzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBlbWl0RXJyb3JBbmRDbG9zZU5UKHNlbGYsIGVycikge1xuICBlbWl0RXJyb3JOVChzZWxmLCBlcnIpO1xuICBlbWl0Q2xvc2VOVChzZWxmKTtcbn1cbmZ1bmN0aW9uIGVtaXRDbG9zZU5UKHNlbGYpIHtcbiAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlICYmICFzZWxmLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG59XG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cbmZ1bmN0aW9uIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKSB7XG4gIC8vIFdlIGhhdmUgdGVzdHMgdGhhdCByZWx5IG9uIGVycm9ycyBiZWluZyBlbWl0dGVkXG4gIC8vIGluIHRoZSBzYW1lIHRpY2ssIHNvIGNoYW5naW5nIHRoaXMgaXMgc2VtdmVyIG1ham9yLlxuICAvLyBGb3Igbm93IHdoZW4geW91IG9wdC1pbiB0byBhdXRvRGVzdHJveSB3ZSBhbGxvd1xuICAvLyB0aGUgZXJyb3IgdG8gYmUgZW1pdHRlZCBuZXh0VGljay4gSW4gYSBmdXR1cmVcbiAgLy8gc2VtdmVyIG1ham9yIHVwZGF0ZSB3ZSBzaG91bGQgY2hhbmdlIHRoZSBkZWZhdWx0IHRvIHRoaXMuXG5cbiAgdmFyIHJTdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgaWYgKHJTdGF0ZSAmJiByU3RhdGUuYXV0b0Rlc3Ryb3kgfHwgd1N0YXRlICYmIHdTdGF0ZS5hdXRvRGVzdHJveSkgc3RyZWFtLmRlc3Ryb3koZXJyKTtlbHNlIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3ksXG4gIGVycm9yT3JEZXN0cm95OiBlcnJvck9yRGVzdHJveVxufTsiXSwibmFtZXMiOlsiZGVzdHJveSIsImVyciIsImNiIiwiX3RoaXMiLCJyZWFkYWJsZURlc3Ryb3llZCIsIl9yZWFkYWJsZVN0YXRlIiwiZGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJfd3JpdGFibGVTdGF0ZSIsInByb2Nlc3MiLCJuZXh0VGljayIsImVtaXRFcnJvck5UIiwiZXJyb3JFbWl0dGVkIiwiX2Rlc3Ryb3kiLCJlbWl0RXJyb3JBbmRDbG9zZU5UIiwiZW1pdENsb3NlTlQiLCJzZWxmIiwiZW1pdENsb3NlIiwiZW1pdCIsInVuZGVzdHJveSIsInJlYWRpbmciLCJlbmRlZCIsImVuZEVtaXR0ZWQiLCJlbmRpbmciLCJmaW5hbENhbGxlZCIsInByZWZpbmlzaGVkIiwiZmluaXNoZWQiLCJlcnJvck9yRGVzdHJveSIsInN0cmVhbSIsInJTdGF0ZSIsIndTdGF0ZSIsImF1dG9EZXN0cm95IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/destroy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\nvar ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(/*! ../../../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes.ERR_STREAM_PREMATURE_CLOSE);\nfunction once(callback) {\n    var called = false;\n    return function() {\n        if (called) return;\n        called = true;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n    };\n}\nfunction noop() {}\nfunction isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n}\nfunction eos(stream, opts, callback) {\n    if (typeof opts === \"function\") return eos(stream, null, opts);\n    if (!opts) opts = {};\n    callback = once(callback || noop);\n    var readable = opts.readable || opts.readable !== false && stream.readable;\n    var writable = opts.writable || opts.writable !== false && stream.writable;\n    var onlegacyfinish = function onlegacyfinish() {\n        if (!stream.writable) onfinish();\n    };\n    var writableEnded = stream._writableState && stream._writableState.finished;\n    var onfinish = function onfinish() {\n        writable = false;\n        writableEnded = true;\n        if (!readable) callback.call(stream);\n    };\n    var readableEnded = stream._readableState && stream._readableState.endEmitted;\n    var onend = function onend() {\n        readable = false;\n        readableEnded = true;\n        if (!writable) callback.call(stream);\n    };\n    var onerror = function onerror(err) {\n        callback.call(stream, err);\n    };\n    var onclose = function onclose() {\n        var err;\n        if (readable && !readableEnded) {\n            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n            return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n            return callback.call(stream, err);\n        }\n    };\n    var onrequest = function onrequest() {\n        stream.req.on(\"finish\", onfinish);\n    };\n    if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req) onrequest();\n        else stream.on(\"request\", onrequest);\n    } else if (writable && !stream._writableState) {\n        // legacy streams\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n    }\n    stream.on(\"end\", onend);\n    stream.on(\"finish\", onfinish);\n    if (opts.error !== false) stream.on(\"error\", onerror);\n    stream.on(\"close\", onclose);\n    return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req) stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n    };\n}\nmodule.exports = eos;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/from.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/from.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nvar ERR_INVALID_ARG_TYPE = (__webpack_require__(/*! ../../../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes.ERR_INVALID_ARG_TYPE);\nfunction from(Readable, iterable, opts) {\n    var iterator;\n    if (iterable && typeof iterable.next === \"function\") {\n        iterator = iterable;\n    } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();\n    else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();\n    else throw new ERR_INVALID_ARG_TYPE(\"iterable\", [\n        \"Iterable\"\n    ], iterable);\n    var readable = new Readable(_objectSpread({\n        objectMode: true\n    }, opts));\n    // Reading boolean to protect against _read\n    // being called before last iteration completion.\n    var reading = false;\n    readable._read = function() {\n        if (!reading) {\n            reading = true;\n            next();\n        }\n    };\n    function next() {\n        return _next2.apply(this, arguments);\n    }\n    function _next2() {\n        _next2 = _asyncToGenerator(function*() {\n            try {\n                var _yield$iterator$next = yield iterator.next(), value = _yield$iterator$next.value, done = _yield$iterator$next.done;\n                if (done) {\n                    readable.push(null);\n                } else if (readable.push((yield value))) {\n                    next();\n                } else {\n                    reading = false;\n                }\n            } catch (err) {\n                readable.destroy(err);\n            }\n        });\n        return _next2.apply(this, arguments);\n    }\n    return readable;\n}\nmodule.exports = from;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/from.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/pipeline.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/pipeline.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\nvar eos;\nfunction once(callback) {\n    var called = false;\n    return function() {\n        if (called) return;\n        called = true;\n        callback.apply(void 0, arguments);\n    };\n}\nvar _require$codes = (__webpack_require__(/*! ../../../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes), ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\nfunction noop(err) {\n    // Rethrow the error if it exists to avoid swallowing it\n    if (err) throw err;\n}\nfunction isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n}\nfunction destroyer(stream, reading, writing, callback) {\n    callback = once(callback);\n    var closed = false;\n    stream.on(\"close\", function() {\n        closed = true;\n    });\n    if (eos === undefined) eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n    eos(stream, {\n        readable: reading,\n        writable: writing\n    }, function(err) {\n        if (err) return callback(err);\n        closed = true;\n        callback();\n    });\n    var destroyed = false;\n    return function(err) {\n        if (closed) return;\n        if (destroyed) return;\n        destroyed = true;\n        // request.destroy just do .end - .abort is what we want\n        if (isRequest(stream)) return stream.abort();\n        if (typeof stream.destroy === \"function\") return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n    };\n}\nfunction call(fn) {\n    fn();\n}\nfunction pipe(from, to) {\n    return from.pipe(to);\n}\nfunction popCallback(streams) {\n    if (!streams.length) return noop;\n    if (typeof streams[streams.length - 1] !== \"function\") return noop;\n    return streams.pop();\n}\nfunction pipeline() {\n    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++){\n        streams[_key] = arguments[_key];\n    }\n    var callback = popCallback(streams);\n    if (Array.isArray(streams[0])) streams = streams[0];\n    if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n    }\n    var error;\n    var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n            if (!error) error = err;\n            if (err) destroys.forEach(call);\n            if (reading) return;\n            destroys.forEach(call);\n            callback(error);\n        });\n    });\n    return streams.reduce(pipe);\n}\nmodule.exports = pipeline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQ7QUFDckQseURBQXlEO0FBRXpEO0FBRUEsSUFBSUE7QUFDSixTQUFTQyxLQUFLQyxRQUFRO0lBQ3BCLElBQUlDLFNBQVM7SUFDYixPQUFPO1FBQ0wsSUFBSUEsUUFBUTtRQUNaQSxTQUFTO1FBQ1RELFNBQVNFLEtBQUssQ0FBQyxLQUFLLEdBQUdDO0lBQ3pCO0FBQ0Y7QUFDQSxJQUFJQyxpQkFBaUJDLDBIQUFnQyxFQUNuREUsbUJBQW1CSCxlQUFlRyxnQkFBZ0IsRUFDbERDLHVCQUF1QkosZUFBZUksb0JBQW9CO0FBQzVELFNBQVNDLEtBQUtDLEdBQUc7SUFDZix3REFBd0Q7SUFDeEQsSUFBSUEsS0FBSyxNQUFNQTtBQUNqQjtBQUNBLFNBQVNDLFVBQVVDLE1BQU07SUFDdkIsT0FBT0EsT0FBT0MsU0FBUyxJQUFJLE9BQU9ELE9BQU9FLEtBQUssS0FBSztBQUNyRDtBQUNBLFNBQVNDLFVBQVVILE1BQU0sRUFBRUksT0FBTyxFQUFFQyxPQUFPLEVBQUVqQixRQUFRO0lBQ25EQSxXQUFXRCxLQUFLQztJQUNoQixJQUFJa0IsU0FBUztJQUNiTixPQUFPTyxFQUFFLENBQUMsU0FBUztRQUNqQkQsU0FBUztJQUNYO0lBQ0EsSUFBSXBCLFFBQVFzQixXQUFXdEIsTUFBTU8sbUJBQU9BLENBQUM7SUFDckNQLElBQUljLFFBQVE7UUFDVlMsVUFBVUw7UUFDVk0sVUFBVUw7SUFDWixHQUFHLFNBQVVQLEdBQUc7UUFDZCxJQUFJQSxLQUFLLE9BQU9WLFNBQVNVO1FBQ3pCUSxTQUFTO1FBQ1RsQjtJQUNGO0lBQ0EsSUFBSXVCLFlBQVk7SUFDaEIsT0FBTyxTQUFVYixHQUFHO1FBQ2xCLElBQUlRLFFBQVE7UUFDWixJQUFJSyxXQUFXO1FBQ2ZBLFlBQVk7UUFFWix3REFBd0Q7UUFDeEQsSUFBSVosVUFBVUMsU0FBUyxPQUFPQSxPQUFPRSxLQUFLO1FBQzFDLElBQUksT0FBT0YsT0FBT1ksT0FBTyxLQUFLLFlBQVksT0FBT1osT0FBT1ksT0FBTztRQUMvRHhCLFNBQVNVLE9BQU8sSUFBSUYscUJBQXFCO0lBQzNDO0FBQ0Y7QUFDQSxTQUFTaUIsS0FBS0MsRUFBRTtJQUNkQTtBQUNGO0FBQ0EsU0FBU0MsS0FBS0MsSUFBSSxFQUFFQyxFQUFFO0lBQ3BCLE9BQU9ELEtBQUtELElBQUksQ0FBQ0U7QUFDbkI7QUFDQSxTQUFTQyxZQUFZQyxPQUFPO0lBQzFCLElBQUksQ0FBQ0EsUUFBUUMsTUFBTSxFQUFFLE9BQU92QjtJQUM1QixJQUFJLE9BQU9zQixPQUFPLENBQUNBLFFBQVFDLE1BQU0sR0FBRyxFQUFFLEtBQUssWUFBWSxPQUFPdkI7SUFDOUQsT0FBT3NCLFFBQVFFLEdBQUc7QUFDcEI7QUFDQSxTQUFTQztJQUNQLElBQUssSUFBSUMsT0FBT2hDLFVBQVU2QixNQUFNLEVBQUVELFVBQVUsSUFBSUssTUFBTUQsT0FBT0UsT0FBTyxHQUFHQSxPQUFPRixNQUFNRSxPQUFRO1FBQzFGTixPQUFPLENBQUNNLEtBQUssR0FBR2xDLFNBQVMsQ0FBQ2tDLEtBQUs7SUFDakM7SUFDQSxJQUFJckMsV0FBVzhCLFlBQVlDO0lBQzNCLElBQUlLLE1BQU1FLE9BQU8sQ0FBQ1AsT0FBTyxDQUFDLEVBQUUsR0FBR0EsVUFBVUEsT0FBTyxDQUFDLEVBQUU7SUFDbkQsSUFBSUEsUUFBUUMsTUFBTSxHQUFHLEdBQUc7UUFDdEIsTUFBTSxJQUFJekIsaUJBQWlCO0lBQzdCO0lBQ0EsSUFBSWdDO0lBQ0osSUFBSUMsV0FBV1QsUUFBUVUsR0FBRyxDQUFDLFNBQVU3QixNQUFNLEVBQUU4QixDQUFDO1FBQzVDLElBQUkxQixVQUFVMEIsSUFBSVgsUUFBUUMsTUFBTSxHQUFHO1FBQ25DLElBQUlmLFVBQVV5QixJQUFJO1FBQ2xCLE9BQU8zQixVQUFVSCxRQUFRSSxTQUFTQyxTQUFTLFNBQVVQLEdBQUc7WUFDdEQsSUFBSSxDQUFDNkIsT0FBT0EsUUFBUTdCO1lBQ3BCLElBQUlBLEtBQUs4QixTQUFTRyxPQUFPLENBQUNsQjtZQUMxQixJQUFJVCxTQUFTO1lBQ2J3QixTQUFTRyxPQUFPLENBQUNsQjtZQUNqQnpCLFNBQVN1QztRQUNYO0lBQ0Y7SUFDQSxPQUFPUixRQUFRYSxNQUFNLENBQUNqQjtBQUN4QjtBQUNBa0IsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FyY2hpdmVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanM/YzMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL3B1bXAgd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVvcztcbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLFxuICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUyxcbiAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRDtcbmZ1bmN0aW9uIG5vb3AoZXJyKSB7XG4gIC8vIFJldGhyb3cgdGhlIGVycm9yIGlmIGl0IGV4aXN0cyB0byBhdm9pZCBzd2FsbG93aW5nIGl0XG4gIGlmIChlcnIpIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayk7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICB9KTtcbiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbiAgZW9zKHN0cmVhbSwge1xuICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgIHdyaXRhYmxlOiB3cml0aW5nXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNsb3NlZCkgcmV0dXJuO1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgLy8gcmVxdWVzdC5kZXN0cm95IGp1c3QgZG8gLmVuZCAtIC5hYm9ydCBpcyB3aGF0IHdlIHdhbnRcbiAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHJldHVybiBzdHJlYW0uYWJvcnQoKTtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTtcbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCdwaXBlJykpO1xuICB9O1xufVxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmbigpO1xufVxuZnVuY3Rpb24gcGlwZShmcm9tLCB0bykge1xuICByZXR1cm4gZnJvbS5waXBlKHRvKTtcbn1cbmZ1bmN0aW9uIHBvcENhbGxiYWNrKHN0cmVhbXMpIHtcbiAgaWYgKCFzdHJlYW1zLmxlbmd0aCkgcmV0dXJuIG5vb3A7XG4gIGlmICh0eXBlb2Ygc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbm9vcDtcbiAgcmV0dXJuIHN0cmVhbXMucG9wKCk7XG59XG5mdW5jdGlvbiBwaXBlbGluZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICB2YXIgY2FsbGJhY2sgPSBwb3BDYWxsYmFjayhzdHJlYW1zKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RyZWFtc1swXSkpIHN0cmVhbXMgPSBzdHJlYW1zWzBdO1xuICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ3N0cmVhbXMnKTtcbiAgfVxuICB2YXIgZXJyb3I7XG4gIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHtcbiAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgdmFyIHdyaXRpbmcgPSBpID4gMDtcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICBpZiAoZXJyKSBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHBpcGVsaW5lOyJdLCJuYW1lcyI6WyJlb3MiLCJvbmNlIiwiY2FsbGJhY2siLCJjYWxsZWQiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9yZXF1aXJlJGNvZGVzIiwicmVxdWlyZSIsImNvZGVzIiwiRVJSX01JU1NJTkdfQVJHUyIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwibm9vcCIsImVyciIsImlzUmVxdWVzdCIsInN0cmVhbSIsInNldEhlYWRlciIsImFib3J0IiwiZGVzdHJveWVyIiwicmVhZGluZyIsIndyaXRpbmciLCJjbG9zZWQiLCJvbiIsInVuZGVmaW5lZCIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJkZXN0cm95ZWQiLCJkZXN0cm95IiwiY2FsbCIsImZuIiwicGlwZSIsImZyb20iLCJ0byIsInBvcENhbGxiYWNrIiwic3RyZWFtcyIsImxlbmd0aCIsInBvcCIsInBpcGVsaW5lIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsImlzQXJyYXkiLCJlcnJvciIsImRlc3Ryb3lzIiwibWFwIiwiaSIsImZvckVhY2giLCJyZWR1Y2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/pipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/state.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/state.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar ERR_INVALID_OPT_VALUE = (__webpack_require__(/*! ../../../errors */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/errors.js\").codes.ERR_INVALID_OPT_VALUE);\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n    if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n            var name = isDuplex ? duplexKey : \"highWaterMark\";\n            throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n    }\n    // Default value\n    return state.objectMode ? 16 : 16 * 1024;\n}\nmodule.exports = {\n    getHighWaterMark: getHighWaterMark\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLHdCQUF3QkMsZ0pBQXNEO0FBQ2xGLFNBQVNFLGtCQUFrQkMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFNBQVM7SUFDckQsT0FBT0YsUUFBUUcsYUFBYSxJQUFJLE9BQU9ILFFBQVFHLGFBQWEsR0FBR0YsV0FBV0QsT0FBTyxDQUFDRSxVQUFVLEdBQUc7QUFDakc7QUFDQSxTQUFTRSxpQkFBaUJDLEtBQUssRUFBRUwsT0FBTyxFQUFFRSxTQUFTLEVBQUVELFFBQVE7SUFDM0QsSUFBSUssTUFBTVAsa0JBQWtCQyxTQUFTQyxVQUFVQztJQUMvQyxJQUFJSSxPQUFPLE1BQU07UUFDZixJQUFJLENBQUVDLENBQUFBLFNBQVNELFFBQVFFLEtBQUtDLEtBQUssQ0FBQ0gsU0FBU0EsR0FBRSxLQUFNQSxNQUFNLEdBQUc7WUFDMUQsSUFBSUksT0FBT1QsV0FBV0MsWUFBWTtZQUNsQyxNQUFNLElBQUlOLHNCQUFzQmMsTUFBTUo7UUFDeEM7UUFDQSxPQUFPRSxLQUFLQyxLQUFLLENBQUNIO0lBQ3BCO0lBRUEsZ0JBQWdCO0lBQ2hCLE9BQU9ELE1BQU1NLFVBQVUsR0FBRyxLQUFLLEtBQUs7QUFDdEM7QUFDQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZULGtCQUFrQkE7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzPzBlNWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuZnVuY3Rpb24gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSkge1xuICByZXR1cm4gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrICE9IG51bGwgPyBvcHRpb25zLmhpZ2hXYXRlck1hcmsgOiBpc0R1cGxleCA/IG9wdGlvbnNbZHVwbGV4S2V5XSA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7XG4gIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KTtcbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoaHdtKTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgdmFsdWVcbiAgcmV0dXJuIHN0YXRlLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyJdLCJuYW1lcyI6WyJFUlJfSU5WQUxJRF9PUFRfVkFMVUUiLCJyZXF1aXJlIiwiY29kZXMiLCJoaWdoV2F0ZXJNYXJrRnJvbSIsIm9wdGlvbnMiLCJpc0R1cGxleCIsImR1cGxleEtleSIsImhpZ2hXYXRlck1hcmsiLCJnZXRIaWdoV2F0ZXJNYXJrIiwic3RhdGUiLCJod20iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsIm5hbWUiLCJvYmplY3RNb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/stream.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/stream.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! stream */ \"stream\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQUFBLDREQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FyY2hpdmVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLmpzPzhjOTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/readable-stream/readable.js":
/*!************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/readable-stream/readable.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\");\nif (process.env.READABLE_STREAM === \"disable\" && Stream) {\n    module.exports = Stream.Readable;\n    Object.assign(module.exports, Stream);\n    module.exports.Stream = Stream;\n} else {\n    exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_readable.js\");\n    exports.Stream = Stream || exports;\n    exports.Readable = exports;\n    exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_writable.js\");\n    exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_duplex.js\");\n    exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_transform.js\");\n    exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/_stream_passthrough.js\");\n    exports.finished = __webpack_require__(/*! ./lib/internal/streams/end-of-stream.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n    exports.pipeline = __webpack_require__(/*! ./lib/internal/streams/pipeline.js */ \"(ssr)/./node_modules/archiver/node_modules/readable-stream/lib/internal/streams/pipeline.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRQyxHQUFHLENBQUNDLGVBQWUsS0FBSyxhQUFhSixRQUFRO0lBQ3ZESyxPQUFPQyxPQUFPLEdBQUdOLE9BQU9PLFFBQVE7SUFDaENDLE9BQU9DLE1BQU0sQ0FBQ0osT0FBT0MsT0FBTyxFQUFFTjtJQUM5QksscUJBQXFCLEdBQUdMO0FBQzFCLE9BQU87SUFDTE0sVUFBVUQsMkpBQXlCO0lBQ25DQyxjQUFjLEdBQUdOLFVBQVVNO0lBQzNCQSxnQkFBZ0IsR0FBR0E7SUFDbkJBLDZKQUEyQjtJQUMzQkEsdUpBQXlCO0lBQ3pCQSxnS0FBNEI7SUFDNUJBLHNLQUE4QjtJQUM5QkEseUxBQTJCO0lBQzNCQSwrS0FBMkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzP2QxZWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuaWYgKHByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTSA9PT0gJ2Rpc2FibGUnICYmIFN0cmVhbSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IFN0cmVhbS5SZWFkYWJsZTtcbiAgT2JqZWN0LmFzc2lnbihtb2R1bGUuZXhwb3J0cywgU3RyZWFtKTtcbiAgbW9kdWxlLmV4cG9ydHMuU3RyZWFtID0gU3RyZWFtO1xufSBlbHNlIHtcbiAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuICBleHBvcnRzLlN0cmVhbSA9IFN0cmVhbSB8fCBleHBvcnRzO1xuICBleHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbiAgZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiAgZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuICBleHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG4gIGV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4gIGV4cG9ydHMuZmluaXNoZWQgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMnKTtcbiAgZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJTdHJlYW0iLCJyZXF1aXJlIiwicHJvY2VzcyIsImVudiIsIlJFQURBQkxFX1NUUkVBTSIsIm1vZHVsZSIsImV4cG9ydHMiLCJSZWFkYWJsZSIsIk9iamVjdCIsImFzc2lnbiIsIldyaXRhYmxlIiwiRHVwbGV4IiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giLCJmaW5pc2hlZCIsInBpcGVsaW5lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/readable-stream/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/safe-buffer/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/archiver/node_modules/safe-buffer/index.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar Buffer = buffer.Buffer;\n// alternative to using Object.keys for old browsers\nfunction copyProps(src, dst) {\n    for(var key in src){\n        dst[key] = src[key];\n    }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n    module.exports = buffer;\n} else {\n    // Copy properties from require('buffer')\n    copyProps(buffer, exports);\n    exports.Buffer = SafeBuffer;\n}\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n    return Buffer(arg, encodingOrOffset, length);\n}\nSafeBuffer.prototype = Object.create(Buffer.prototype);\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer);\nSafeBuffer.from = function(arg, encodingOrOffset, length) {\n    if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n    }\n    return Buffer(arg, encodingOrOffset, length);\n};\nSafeBuffer.alloc = function(size, fill, encoding) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    var buf = Buffer(size);\n    if (fill !== undefined) {\n        if (typeof encoding === \"string\") {\n            buf.fill(fill, encoding);\n        } else {\n            buf.fill(fill);\n        }\n    } else {\n        buf.fill(0);\n    }\n    return buf;\n};\nSafeBuffer.allocUnsafe = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return Buffer(size);\n};\nSafeBuffer.allocUnsafeSlow = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return buffer.SlowBuffer(size);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtGQUFrRixHQUNsRix5Q0FBeUMsR0FDekMsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0YsT0FBT0UsTUFBTTtBQUUxQixvREFBb0Q7QUFDcEQsU0FBU0MsVUFBV0MsR0FBRyxFQUFFQyxHQUFHO0lBQzFCLElBQUssSUFBSUMsT0FBT0YsSUFBSztRQUNuQkMsR0FBRyxDQUFDQyxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0UsSUFBSTtJQUNyQjtBQUNGO0FBQ0EsSUFBSUosT0FBT0ssSUFBSSxJQUFJTCxPQUFPTSxLQUFLLElBQUlOLE9BQU9PLFdBQVcsSUFBSVAsT0FBT1EsZUFBZSxFQUFFO0lBQy9FQyxPQUFPQyxPQUFPLEdBQUdaO0FBQ25CLE9BQU87SUFDTCx5Q0FBeUM7SUFDekNHLFVBQVVILFFBQVFZO0lBQ2xCQSxjQUFjLEdBQUdDO0FBQ25CO0FBRUEsU0FBU0EsV0FBWUMsR0FBRyxFQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTTtJQUNoRCxPQUFPZCxPQUFPWSxLQUFLQyxrQkFBa0JDO0FBQ3ZDO0FBRUFILFdBQVdJLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDakIsT0FBT2UsU0FBUztBQUVyRCxrQ0FBa0M7QUFDbENkLFVBQVVELFFBQVFXO0FBRWxCQSxXQUFXTixJQUFJLEdBQUcsU0FBVU8sR0FBRyxFQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTTtJQUN2RCxJQUFJLE9BQU9GLFFBQVEsVUFBVTtRQUMzQixNQUFNLElBQUlNLFVBQVU7SUFDdEI7SUFDQSxPQUFPbEIsT0FBT1ksS0FBS0Msa0JBQWtCQztBQUN2QztBQUVBSCxXQUFXTCxLQUFLLEdBQUcsU0FBVWEsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDL0MsSUFBSSxPQUFPRixTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRCxVQUFVO0lBQ3RCO0lBQ0EsSUFBSUksTUFBTXRCLE9BQU9tQjtJQUNqQixJQUFJQyxTQUFTRyxXQUFXO1FBQ3RCLElBQUksT0FBT0YsYUFBYSxVQUFVO1lBQ2hDQyxJQUFJRixJQUFJLENBQUNBLE1BQU1DO1FBQ2pCLE9BQU87WUFDTEMsSUFBSUYsSUFBSSxDQUFDQTtRQUNYO0lBQ0YsT0FBTztRQUNMRSxJQUFJRixJQUFJLENBQUM7SUFDWDtJQUNBLE9BQU9FO0FBQ1Q7QUFFQVgsV0FBV0osV0FBVyxHQUFHLFNBQVVZLElBQUk7SUFDckMsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRCxVQUFVO0lBQ3RCO0lBQ0EsT0FBT2xCLE9BQU9tQjtBQUNoQjtBQUVBUixXQUFXSCxlQUFlLEdBQUcsU0FBVVcsSUFBSTtJQUN6QyxJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QixNQUFNLElBQUlELFVBQVU7SUFDdEI7SUFDQSxPQUFPcEIsT0FBTzBCLFVBQVUsQ0FBQ0w7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanM/ZWE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgc2FmZS1idWZmZXIuIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlci5wcm90b3R5cGUpXG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIl0sIm5hbWVzIjpbImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJrZXkiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/safe-buffer/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/node_modules/string_decoder/lib/string_decoder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/archiver/node_modules/string_decoder/lib/string_decoder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*<replacement>*/ var Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/archiver/node_modules/safe-buffer/index.js\").Buffer);\n/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {\n    encoding = \"\" + encoding;\n    switch(encoding && encoding.toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n            return true;\n        default:\n            return false;\n    }\n};\nfunction _normalizeEncoding(enc) {\n    if (!enc) return \"utf8\";\n    var retried;\n    while(true){\n        switch(enc){\n            case \"utf8\":\n            case \"utf-8\":\n                return \"utf8\";\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return \"utf16le\";\n            case \"latin1\":\n            case \"binary\":\n                return \"latin1\";\n            case \"base64\":\n            case \"ascii\":\n            case \"hex\":\n                return enc;\n            default:\n                if (retried) return; // undefined\n                enc = (\"\" + enc).toLowerCase();\n                retried = true;\n        }\n    }\n}\n;\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n    var nenc = _normalizeEncoding(enc);\n    if (typeof nenc !== \"string\" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error(\"Unknown encoding: \" + enc);\n    return nenc || enc;\n}\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n    this.encoding = normalizeEncoding(encoding);\n    var nb;\n    switch(this.encoding){\n        case \"utf16le\":\n            this.text = utf16Text;\n            this.end = utf16End;\n            nb = 4;\n            break;\n        case \"utf8\":\n            this.fillLast = utf8FillLast;\n            nb = 4;\n            break;\n        case \"base64\":\n            this.text = base64Text;\n            this.end = base64End;\n            nb = 3;\n            break;\n        default:\n            this.write = simpleWrite;\n            this.end = simpleEnd;\n            return;\n    }\n    this.lastNeed = 0;\n    this.lastTotal = 0;\n    this.lastChar = Buffer.allocUnsafe(nb);\n}\nStringDecoder.prototype.write = function(buf) {\n    if (buf.length === 0) return \"\";\n    var r;\n    var i;\n    if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === undefined) return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n    } else {\n        i = 0;\n    }\n    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n    return r || \"\";\n};\nStringDecoder.prototype.end = utf8End;\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function(buf) {\n    if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n    this.lastNeed -= buf.length;\n};\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n    if (byte <= 0x7F) return 0;\n    else if (byte >> 5 === 0x06) return 2;\n    else if (byte >> 4 === 0x0E) return 3;\n    else if (byte >> 3 === 0x1E) return 4;\n    return byte >> 6 === 0x02 ? -1 : -2;\n}\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n    var j = buf.length - 1;\n    if (j < i) return 0;\n    var nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) self.lastNeed = nb - 1;\n        return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) self.lastNeed = nb - 2;\n        return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) {\n            if (nb === 2) nb = 0;\n            else self.lastNeed = nb - 3;\n        }\n        return nb;\n    }\n    return 0;\n}\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n    if ((buf[0] & 0xC0) !== 0x80) {\n        self.lastNeed = 0;\n        return \"�\";\n    }\n    if (self.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 0xC0) !== 0x80) {\n            self.lastNeed = 1;\n            return \"�\";\n        }\n        if (self.lastNeed > 2 && buf.length > 2) {\n            if ((buf[2] & 0xC0) !== 0x80) {\n                self.lastNeed = 2;\n                return \"�\";\n            }\n        }\n    }\n}\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n    var p = this.lastTotal - this.lastNeed;\n    var r = utf8CheckExtraBytes(this, buf, p);\n    if (r !== undefined) return r;\n    if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, p, 0, buf.length);\n    this.lastNeed -= buf.length;\n}\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n    var total = utf8CheckIncomplete(this, buf, i);\n    if (!this.lastNeed) return buf.toString(\"utf8\", i);\n    this.lastTotal = total;\n    var end = buf.length - (total - this.lastNeed);\n    buf.copy(this.lastChar, 0, end);\n    return buf.toString(\"utf8\", i, end);\n}\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r + \"�\";\n    return r;\n}\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n    if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n            var c = r.charCodeAt(r.length - 1);\n            if (c >= 0xD800 && c <= 0xDBFF) {\n                this.lastNeed = 2;\n                this.lastTotal = 4;\n                this.lastChar[0] = buf[buf.length - 2];\n                this.lastChar[1] = buf[buf.length - 1];\n                return r.slice(0, -1);\n            }\n        }\n        return r;\n    }\n    this.lastNeed = 1;\n    this.lastTotal = 2;\n    this.lastChar[0] = buf[buf.length - 1];\n    return buf.toString(\"utf16le\", i, buf.length - 1);\n}\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n    }\n    return r;\n}\nfunction base64Text(buf, i) {\n    var n = (buf.length - i) % 3;\n    if (n === 0) return buf.toString(\"base64\", i);\n    this.lastNeed = 3 - n;\n    this.lastTotal = 3;\n    if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n    } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n    }\n    return buf.toString(\"base64\", i, buf.length - n);\n}\nfunction base64End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n    return r;\n}\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n    return buf.toString(this.encoding);\n}\nfunction simpleEnd(buf) {\n    return buf && buf.length ? this.write(buf) : \"\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/node_modules/string_decoder/lib/string_decoder.js\n");

/***/ })

};
;