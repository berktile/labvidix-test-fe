/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/readdir-glob";
exports.ids = ["vendor-chunks/readdir-glob"];
exports.modules = {

/***/ "(ssr)/./node_modules/readdir-glob/index.js":
/*!********************************************!*\
  !*** ./node_modules/readdir-glob/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = readdirGlob;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst { Minimatch } = __webpack_require__(/*! minimatch */ \"(ssr)/./node_modules/readdir-glob/node_modules/minimatch/minimatch.js\");\nconst { resolve } = __webpack_require__(/*! path */ \"path\");\nfunction readdir(dir, strict) {\n    return new Promise((resolve, reject)=>{\n        fs.readdir(dir, {\n            withFileTypes: true\n        }, (err, files)=>{\n            if (err) {\n                switch(err.code){\n                    case \"ENOTDIR\":\n                        if (strict) {\n                            reject(err);\n                        } else {\n                            resolve([]);\n                        }\n                        break;\n                    case \"ENOTSUP\":\n                    case \"ENOENT\":\n                    case \"ENAMETOOLONG\":\n                    case \"UNKNOWN\":\n                        resolve([]);\n                        break;\n                    case \"ELOOP\":\n                    default:\n                        reject(err);\n                        break;\n                }\n            } else {\n                resolve(files);\n            }\n        });\n    });\n}\nfunction stat(file, followSymlinks) {\n    return new Promise((resolve, reject)=>{\n        const statFunc = followSymlinks ? fs.stat : fs.lstat;\n        statFunc(file, (err, stats)=>{\n            if (err) {\n                switch(err.code){\n                    case \"ENOENT\":\n                        if (followSymlinks) {\n                            // Fallback to lstat to handle broken links as files\n                            resolve(stat(file, false));\n                        } else {\n                            resolve(null);\n                        }\n                        break;\n                    default:\n                        resolve(null);\n                        break;\n                }\n            } else {\n                resolve(stats);\n            }\n        });\n    });\n}\nasync function* exploreWalkAsync(dir, path, followSymlinks, useStat, shouldSkip, strict) {\n    let files = await readdir(path + dir, strict);\n    for (const file of files){\n        let name = file.name;\n        if (name === undefined) {\n            // undefined file.name means the `withFileTypes` options is not supported by node\n            // we have to call the stat function to know if file is directory or not.\n            name = file;\n            useStat = true;\n        }\n        const filename = dir + \"/\" + name;\n        const relative = filename.slice(1); // Remove the leading /\n        const absolute = path + \"/\" + relative;\n        let stats = null;\n        if (useStat || followSymlinks) {\n            stats = await stat(absolute, followSymlinks);\n        }\n        if (!stats && file.name !== undefined) {\n            stats = file;\n        }\n        if (stats === null) {\n            stats = {\n                isDirectory: ()=>false\n            };\n        }\n        if (stats.isDirectory()) {\n            if (!shouldSkip(relative)) {\n                yield {\n                    relative,\n                    absolute,\n                    stats\n                };\n                yield* exploreWalkAsync(filename, path, followSymlinks, useStat, shouldSkip, false);\n            }\n        } else {\n            yield {\n                relative,\n                absolute,\n                stats\n            };\n        }\n    }\n}\nasync function* explore(path, followSymlinks, useStat, shouldSkip) {\n    yield* exploreWalkAsync(\"\", path, followSymlinks, useStat, shouldSkip, true);\n}\nfunction readOptions(options) {\n    return {\n        pattern: options.pattern,\n        dot: !!options.dot,\n        noglobstar: !!options.noglobstar,\n        matchBase: !!options.matchBase,\n        nocase: !!options.nocase,\n        ignore: options.ignore,\n        skip: options.skip,\n        follow: !!options.follow,\n        stat: !!options.stat,\n        nodir: !!options.nodir,\n        mark: !!options.mark,\n        silent: !!options.silent,\n        absolute: !!options.absolute\n    };\n}\nclass ReaddirGlob extends EventEmitter {\n    constructor(cwd, options, cb){\n        super();\n        if (typeof options === \"function\") {\n            cb = options;\n            options = null;\n        }\n        this.options = readOptions(options || {});\n        this.matchers = [];\n        if (this.options.pattern) {\n            const matchers = Array.isArray(this.options.pattern) ? this.options.pattern : [\n                this.options.pattern\n            ];\n            this.matchers = matchers.map((m)=>new Minimatch(m, {\n                    dot: this.options.dot,\n                    noglobstar: this.options.noglobstar,\n                    matchBase: this.options.matchBase,\n                    nocase: this.options.nocase\n                }));\n        }\n        this.ignoreMatchers = [];\n        if (this.options.ignore) {\n            const ignorePatterns = Array.isArray(this.options.ignore) ? this.options.ignore : [\n                this.options.ignore\n            ];\n            this.ignoreMatchers = ignorePatterns.map((ignore)=>new Minimatch(ignore, {\n                    dot: true\n                }));\n        }\n        this.skipMatchers = [];\n        if (this.options.skip) {\n            const skipPatterns = Array.isArray(this.options.skip) ? this.options.skip : [\n                this.options.skip\n            ];\n            this.skipMatchers = skipPatterns.map((skip)=>new Minimatch(skip, {\n                    dot: true\n                }));\n        }\n        this.iterator = explore(resolve(cwd || \".\"), this.options.follow, this.options.stat, this._shouldSkipDirectory.bind(this));\n        this.paused = false;\n        this.inactive = false;\n        this.aborted = false;\n        if (cb) {\n            this._matches = [];\n            this.on(\"match\", (match)=>this._matches.push(this.options.absolute ? match.absolute : match.relative));\n            this.on(\"error\", (err)=>cb(err));\n            this.on(\"end\", ()=>cb(null, this._matches));\n        }\n        setTimeout(()=>this._next(), 0);\n    }\n    _shouldSkipDirectory(relative) {\n        //console.log(relative, this.skipMatchers.some(m => m.match(relative)));\n        return this.skipMatchers.some((m)=>m.match(relative));\n    }\n    _fileMatches(relative, isDirectory) {\n        const file = relative + (isDirectory ? \"/\" : \"\");\n        return (this.matchers.length === 0 || this.matchers.some((m)=>m.match(file))) && !this.ignoreMatchers.some((m)=>m.match(file)) && (!this.options.nodir || !isDirectory);\n    }\n    _next() {\n        if (!this.paused && !this.aborted) {\n            this.iterator.next().then((obj)=>{\n                if (!obj.done) {\n                    const isDirectory = obj.value.stats.isDirectory();\n                    if (this._fileMatches(obj.value.relative, isDirectory)) {\n                        let relative = obj.value.relative;\n                        let absolute = obj.value.absolute;\n                        if (this.options.mark && isDirectory) {\n                            relative += \"/\";\n                            absolute += \"/\";\n                        }\n                        if (this.options.stat) {\n                            this.emit(\"match\", {\n                                relative,\n                                absolute,\n                                stat: obj.value.stats\n                            });\n                        } else {\n                            this.emit(\"match\", {\n                                relative,\n                                absolute\n                            });\n                        }\n                    }\n                    this._next(this.iterator);\n                } else {\n                    this.emit(\"end\");\n                }\n            }).catch((err)=>{\n                this.abort();\n                this.emit(\"error\", err);\n                if (!err.code && !this.options.silent) {\n                    console.error(err);\n                }\n            });\n        } else {\n            this.inactive = true;\n        }\n    }\n    abort() {\n        this.aborted = true;\n    }\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        this.paused = false;\n        if (this.inactive) {\n            this.inactive = false;\n            this._next();\n        }\n    }\n}\nfunction readdirGlob(pattern, options, cb) {\n    return new ReaddirGlob(pattern, options, cb);\n}\nreaddirGlob.ReaddirGlob = ReaddirGlob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/readdir-glob/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/readdir-glob/node_modules/brace-expansion/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readdir-glob/node_modules/brace-expansion/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var balanced = __webpack_require__(/*! balanced-match */ \"(ssr)/./node_modules/balanced-match/index.js\");\nmodule.exports = expandTop;\nvar escSlash = \"\\x00SLASH\" + Math.random() + \"\\x00\";\nvar escOpen = \"\\x00OPEN\" + Math.random() + \"\\x00\";\nvar escClose = \"\\x00CLOSE\" + Math.random() + \"\\x00\";\nvar escComma = \"\\x00COMMA\" + Math.random() + \"\\x00\";\nvar escPeriod = \"\\x00PERIOD\" + Math.random() + \"\\x00\";\nfunction numeric(str) {\n    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);\n}\nfunction escapeBraces(str) {\n    return str.split(\"\\\\\\\\\").join(escSlash).split(\"\\\\{\").join(escOpen).split(\"\\\\}\").join(escClose).split(\"\\\\,\").join(escComma).split(\"\\\\.\").join(escPeriod);\n}\nfunction unescapeBraces(str) {\n    return str.split(escSlash).join(\"\\\\\").split(escOpen).join(\"{\").split(escClose).join(\"}\").split(escComma).join(\",\").split(escPeriod).join(\".\");\n}\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n    if (!str) return [\n        \"\"\n    ];\n    var parts = [];\n    var m = balanced(\"{\", \"}\", str);\n    if (!m) return str.split(\",\");\n    var pre = m.pre;\n    var body = m.body;\n    var post = m.post;\n    var p = pre.split(\",\");\n    p[p.length - 1] += \"{\" + body + \"}\";\n    var postParts = parseCommaParts(post);\n    if (post.length) {\n        p[p.length - 1] += postParts.shift();\n        p.push.apply(p, postParts);\n    }\n    parts.push.apply(parts, p);\n    return parts;\n}\nfunction expandTop(str) {\n    if (!str) return [];\n    // I don't know why Bash 4.3 does this, but it does.\n    // Anything starting with {} will have the first two bytes preserved\n    // but *only* at the top level, so {},a}b will not expand to anything,\n    // but a{},b}c will be expanded to [a}c,abc].\n    // One could argue that this is a bug in Bash, but since the goal of\n    // this module is to match Bash's rules, we escape a leading {}\n    if (str.substr(0, 2) === \"{}\") {\n        str = \"\\\\{\\\\}\" + str.substr(2);\n    }\n    return expand(escapeBraces(str), true).map(unescapeBraces);\n}\nfunction embrace(str) {\n    return \"{\" + str + \"}\";\n}\nfunction isPadded(el) {\n    return /^-?0\\d/.test(el);\n}\nfunction lte(i, y) {\n    return i <= y;\n}\nfunction gte(i, y) {\n    return i >= y;\n}\nfunction expand(str, isTop) {\n    var expansions = [];\n    var m = balanced(\"{\", \"}\", str);\n    if (!m) return [\n        str\n    ];\n    // no need to expand pre, since it is guaranteed to be free of brace-sets\n    var pre = m.pre;\n    var post = m.post.length ? expand(m.post, false) : [\n        \"\"\n    ];\n    if (/\\$$/.test(m.pre)) {\n        for(var k = 0; k < post.length; k++){\n            var expansion = pre + \"{\" + m.body + \"}\" + post[k];\n            expansions.push(expansion);\n        }\n    } else {\n        var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n        var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n        var isSequence = isNumericSequence || isAlphaSequence;\n        var isOptions = m.body.indexOf(\",\") >= 0;\n        if (!isSequence && !isOptions) {\n            // {a},b}\n            if (m.post.match(/,.*\\}/)) {\n                str = m.pre + \"{\" + m.body + escClose + m.post;\n                return expand(str);\n            }\n            return [\n                str\n            ];\n        }\n        var n;\n        if (isSequence) {\n            n = m.body.split(/\\.\\./);\n        } else {\n            n = parseCommaParts(m.body);\n            if (n.length === 1) {\n                // x{{a,b}}y ==> x{a}y x{b}y\n                n = expand(n[0], false).map(embrace);\n                if (n.length === 1) {\n                    return post.map(function(p) {\n                        return m.pre + n[0] + p;\n                    });\n                }\n            }\n        }\n        // at this point, n is the parts, and we know it's not a comma set\n        // with a single entry.\n        var N;\n        if (isSequence) {\n            var x = numeric(n[0]);\n            var y = numeric(n[1]);\n            var width = Math.max(n[0].length, n[1].length);\n            var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;\n            var test = lte;\n            var reverse = y < x;\n            if (reverse) {\n                incr *= -1;\n                test = gte;\n            }\n            var pad = n.some(isPadded);\n            N = [];\n            for(var i = x; test(i, y); i += incr){\n                var c;\n                if (isAlphaSequence) {\n                    c = String.fromCharCode(i);\n                    if (c === \"\\\\\") c = \"\";\n                } else {\n                    c = String(i);\n                    if (pad) {\n                        var need = width - c.length;\n                        if (need > 0) {\n                            var z = new Array(need + 1).join(\"0\");\n                            if (i < 0) c = \"-\" + z + c.slice(1);\n                            else c = z + c;\n                        }\n                    }\n                }\n                N.push(c);\n            }\n        } else {\n            N = [];\n            for(var j = 0; j < n.length; j++){\n                N.push.apply(N, expand(n[j], false));\n            }\n        }\n        for(var j = 0; j < N.length; j++){\n            for(var k = 0; k < post.length; k++){\n                var expansion = pre + N[j] + post[k];\n                if (!isTop || isSequence || expansion) expansions.push(expansion);\n            }\n        }\n    }\n    return expansions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/readdir-glob/node_modules/brace-expansion/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/readdir-glob/node_modules/minimatch/lib/path.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readdir-glob/node_modules/minimatch/lib/path.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("const isWindows = typeof process === \"object\" && process && process.platform === \"win32\";\nmodule.exports = isWindows ? {\n    sep: \"\\\\\"\n} : {\n    sep: \"/\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFkZGlyLWdsb2Ivbm9kZV9tb2R1bGVzL21pbmltYXRjaC9saWIvcGF0aC5qcz9mNGQxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzV2luZG93cyA9IHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICBwcm9jZXNzICYmXG4gIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbm1vZHVsZS5leHBvcnRzID0gaXNXaW5kb3dzID8geyBzZXA6ICdcXFxcJyB9IDogeyBzZXA6ICcvJyB9XG4iXSwibmFtZXMiOlsiaXNXaW5kb3dzIiwicHJvY2VzcyIsInBsYXRmb3JtIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBWSxPQUFPQyxZQUFZLFlBQ25DQSxXQUNBQSxRQUFRQyxRQUFRLEtBQUs7QUFDdkJDLE9BQU9DLE9BQU8sR0FBR0osWUFBWTtJQUFFSyxLQUFLO0FBQUssSUFBSTtJQUFFQSxLQUFLO0FBQUkiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhZGRpci1nbG9iL25vZGVfbW9kdWxlcy9taW5pbWF0Y2gvbGliL3BhdGguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/readdir-glob/node_modules/minimatch/lib/path.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/readdir-glob/node_modules/minimatch/minimatch.js":
/*!***********************************************************************!*\
  !*** ./node_modules/readdir-glob/node_modules/minimatch/minimatch.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const minimatch = module.exports = (p, pattern, options = {})=>{\n    assertValidPattern(pattern);\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === \"#\") {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n};\nmodule.exports = minimatch;\nconst path = __webpack_require__(/*! ./lib/path.js */ \"(ssr)/./node_modules/readdir-glob/node_modules/minimatch/lib/path.js\");\nminimatch.sep = path.sep;\nconst GLOBSTAR = Symbol(\"globstar **\");\nminimatch.GLOBSTAR = GLOBSTAR;\nconst expand = __webpack_require__(/*! brace-expansion */ \"(ssr)/./node_modules/readdir-glob/node_modules/brace-expansion/index.js\");\nconst plTypes = {\n    \"!\": {\n        open: \"(?:(?!(?:\",\n        close: \"))[^/]*?)\"\n    },\n    \"?\": {\n        open: \"(?:\",\n        close: \")?\"\n    },\n    \"+\": {\n        open: \"(?:\",\n        close: \")+\"\n    },\n    \"*\": {\n        open: \"(?:\",\n        close: \")*\"\n    },\n    \"@\": {\n        open: \"(?:\",\n        close: \")\"\n    }\n};\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = \"[^/]\";\n// * => any number of characters\nconst star = qmark + \"*?\";\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = \"(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?\";\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = \"(?:(?!(?:\\\\/|^)\\\\.).)*?\";\n// \"abc\" -> { a:true, b:true, c:true }\nconst charSet = (s)=>s.split(\"\").reduce((set, c)=>{\n        set[c] = true;\n        return set;\n    }, {});\n// characters that need to be escaped in RegExp.\nconst reSpecials = charSet(\"().*{}+?[]^$\\\\!\");\n// characters that indicate we have to add the pattern start\nconst addPatternStartSet = charSet(\"[.(\");\n// normalizes slashes.\nconst slashSplit = /\\/+/;\nminimatch.filter = (pattern, options = {})=>(p, i, list)=>minimatch(p, pattern, options);\nconst ext = (a, b = {})=>{\n    const t = {};\n    Object.keys(a).forEach((k)=>t[k] = a[k]);\n    Object.keys(b).forEach((k)=>t[k] = b[k]);\n    return t;\n};\nminimatch.defaults = (def)=>{\n    if (!def || typeof def !== \"object\" || !Object.keys(def).length) {\n        return minimatch;\n    }\n    const orig = minimatch;\n    const m = (p, pattern, options)=>orig(p, pattern, ext(def, options));\n    m.Minimatch = class Minimatch extends orig.Minimatch {\n        constructor(pattern, options){\n            super(pattern, ext(def, options));\n        }\n    };\n    m.Minimatch.defaults = (options)=>orig.defaults(ext(def, options)).Minimatch;\n    m.filter = (pattern, options)=>orig.filter(pattern, ext(def, options));\n    m.defaults = (options)=>orig.defaults(ext(def, options));\n    m.makeRe = (pattern, options)=>orig.makeRe(pattern, ext(def, options));\n    m.braceExpand = (pattern, options)=>orig.braceExpand(pattern, ext(def, options));\n    m.match = (list, pattern, options)=>orig.match(list, pattern, ext(def, options));\n    return m;\n};\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = (pattern, options)=>braceExpand(pattern, options);\nconst braceExpand = (pattern, options = {})=>{\n    assertValidPattern(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [\n            pattern\n        ];\n    }\n    return expand(pattern);\n};\nconst MAX_PATTERN_LENGTH = 1024 * 64;\nconst assertValidPattern = (pattern)=>{\n    if (typeof pattern !== \"string\") {\n        throw new TypeError(\"invalid pattern\");\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError(\"pattern is too long\");\n    }\n};\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst SUBPARSE = Symbol(\"subparse\");\nminimatch.makeRe = (pattern, options)=>new Minimatch(pattern, options || {}).makeRe();\nminimatch.match = (list, pattern, options = {})=>{\n    const mm = new Minimatch(pattern, options);\n    list = list.filter((f)=>mm.match(f));\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\n// replace stuff like \\* with *\nconst globUnescape = (s)=>s.replace(/\\\\(.)/g, \"$1\");\nconst charUnescape = (s)=>s.replace(/\\\\([^-\\]])/g, \"$1\");\nconst regExpEscape = (s)=>s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\nconst braExpEscape = (s)=>s.replace(/[[\\]\\\\]/g, \"\\\\$&\");\nclass Minimatch {\n    constructor(pattern, options){\n        assertValidPattern(pattern);\n        if (!options) options = {};\n        this.options = options;\n        this.set = [];\n        this.pattern = pattern;\n        this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            this.pattern = this.pattern.replace(/\\\\/g, \"/\");\n        }\n        this.regexp = null;\n        this.negate = false;\n        this.comment = false;\n        this.empty = false;\n        this.partial = !!options.partial;\n        // make the set of regexps etc.\n        this.make();\n    }\n    debug() {}\n    make() {\n        const pattern = this.pattern;\n        const options = this.options;\n        // empty patterns and comments match nothing.\n        if (!options.nocomment && pattern.charAt(0) === \"#\") {\n            this.comment = true;\n            return;\n        }\n        if (!pattern) {\n            this.empty = true;\n            return;\n        }\n        // step 1: figure out negation, etc.\n        this.parseNegate();\n        // step 2: expand braces\n        let set = this.globSet = this.braceExpand();\n        if (options.debug) this.debug = (...args)=>console.error(...args);\n        this.debug(this.pattern, set);\n        // step 3: now we have a set, so turn each one into a series of path-portion\n        // matching patterns.\n        // These will be regexps, except in the case of \"**\", which is\n        // set to the GLOBSTAR object for globstar behavior,\n        // and will not contain any / characters\n        set = this.globParts = set.map((s)=>s.split(slashSplit));\n        this.debug(this.pattern, set);\n        // glob --> regexps\n        set = set.map((s, si, set)=>s.map(this.parse, this));\n        this.debug(this.pattern, set);\n        // filter out everything that didn't compile properly.\n        set = set.filter((s)=>s.indexOf(false) === -1);\n        this.debug(this.pattern, set);\n        this.set = set;\n    }\n    parseNegate() {\n        if (this.options.nonegate) return;\n        const pattern = this.pattern;\n        let negate = false;\n        let negateOffset = 0;\n        for(let i = 0; i < pattern.length && pattern.charAt(i) === \"!\"; i++){\n            negate = !negate;\n            negateOffset++;\n        }\n        if (negateOffset) this.pattern = pattern.slice(negateOffset);\n        this.negate = negate;\n    }\n    // set partial to true to test if, for example,\n    // \"/a/b\" matches the start of \"/*/b/*/d\"\n    // Partial means, if you run out of file before you run\n    // out of pattern, then that's fine, as long as all\n    // the parts match.\n    matchOne(file, pattern, partial) {\n        var options = this.options;\n        this.debug(\"matchOne\", {\n            \"this\": this,\n            file: file,\n            pattern: pattern\n        });\n        this.debug(\"matchOne\", file.length, pattern.length);\n        for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){\n            this.debug(\"matchOne loop\");\n            var p = pattern[pi];\n            var f = file[fi];\n            this.debug(pattern, p, f);\n            // should be impossible.\n            // some invalid regexp stuff in the set.\n            /* istanbul ignore if */ if (p === false) return false;\n            if (p === GLOBSTAR) {\n                this.debug(\"GLOBSTAR\", [\n                    pattern,\n                    p,\n                    f\n                ]);\n                // \"**\"\n                // a/**/b/**/c would match the following:\n                // a/b/x/y/z/c\n                // a/x/y/z/b/c\n                // a/b/x/b/x/c\n                // a/b/c\n                // To do this, take the rest of the pattern after\n                // the **, and see if it would match the file remainder.\n                // If so, return success.\n                // If not, the ** \"swallows\" a segment, and try again.\n                // This is recursively awful.\n                //\n                // a/**/b/**/c matching a/b/x/y/z/c\n                // - a matches a\n                // - doublestar\n                //   - matchOne(b/x/y/z/c, b/**/c)\n                //     - b matches b\n                //     - doublestar\n                //       - matchOne(x/y/z/c, c) -> no\n                //       - matchOne(y/z/c, c) -> no\n                //       - matchOne(z/c, c) -> no\n                //       - matchOne(c, c) yes, hit\n                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug(\"** at the end\");\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n                    // options.dot is set.\n                    // . and .. are *never* matched by **, for explosively\n                    // exponential reasons.\n                    for(; fi < fl; fi++){\n                        if (file[fi] === \".\" || file[fi] === \"..\" || !options.dot && file[fi].charAt(0) === \".\") return false;\n                    }\n                    return true;\n                }\n                // ok, let's see if we can swallow whatever we can.\n                while(fr < fl){\n                    var swallowee = file[fr];\n                    this.debug(\"\\nglobstar while\", file, fr, pattern, pr, swallowee);\n                    // XXX remove this slice.  Just pass the start index.\n                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                        this.debug(\"globstar found match!\", fr, fl, swallowee);\n                        // found a match.\n                        return true;\n                    } else {\n                        // can't swallow \".\" or \"..\" ever.\n                        // can only swallow \".foo\" when explicitly asked.\n                        if (swallowee === \".\" || swallowee === \"..\" || !options.dot && swallowee.charAt(0) === \".\") {\n                            this.debug(\"dot detected!\", file, fr, pattern, pr);\n                            break;\n                        }\n                        // ** swallows a segment, and continue.\n                        this.debug(\"globstar swallow a segment, and continue\");\n                        fr++;\n                    }\n                }\n                // no match was found.\n                // However, in partial mode, we can't say this is necessarily over.\n                // If there's more *pattern* left, then\n                /* istanbul ignore if */ if (partial) {\n                    // ran out of file\n                    this.debug(\"\\n>>> no match, partial?\", file, fr, pattern, pr);\n                    if (fr === fl) return true;\n                }\n                return false;\n            }\n            // something other than **\n            // non-magic patterns just have to match exactly\n            // patterns with magic have been turned into regexps.\n            var hit;\n            if (typeof p === \"string\") {\n                hit = f === p;\n                this.debug(\"string match\", p, f, hit);\n            } else {\n                hit = f.match(p);\n                this.debug(\"pattern match\", p, f, hit);\n            }\n            if (!hit) return false;\n        }\n        // Note: ending in / means that we'll get a final \"\"\n        // at the end of the pattern.  This can only match a\n        // corresponding \"\" at the end of the file.\n        // If the file ends in /, then it can only match a\n        // a pattern that ends in /, unless the pattern just\n        // doesn't have any more for it. But, a/b/ should *not*\n        // match \"a/b/*\", even though \"\" matches against the\n        // [^/]*? pattern, except in partial mode, where it might\n        // simply not be reached yet.\n        // However, a/b/ should still satisfy a/*\n        // now either we fell off the end of the pattern, or we're done.\n        if (fi === fl && pi === pl) {\n            // ran out of pattern and filename at the same time.\n            // an exact hit!\n            return true;\n        } else if (fi === fl) {\n            // ran out of file, but still had pattern left.\n            // this is ok if we're doing the match as part of\n            // a glob fs traversal.\n            return partial;\n        } else /* istanbul ignore else */ if (pi === pl) {\n            // ran out of pattern, still have file left.\n            // this is only acceptable if we're on the very last\n            // empty segment of a file with a trailing slash.\n            // a/* should match a/b/\n            return fi === fl - 1 && file[fi] === \"\";\n        }\n        // should be unreachable.\n        /* istanbul ignore next */ throw new Error(\"wtf?\");\n    }\n    braceExpand() {\n        return braceExpand(this.pattern, this.options);\n    }\n    parse(pattern, isSub) {\n        assertValidPattern(pattern);\n        const options = this.options;\n        // shortcuts\n        if (pattern === \"**\") {\n            if (!options.noglobstar) return GLOBSTAR;\n            else pattern = \"*\";\n        }\n        if (pattern === \"\") return \"\";\n        let re = \"\";\n        let hasMagic = false;\n        let escaping = false;\n        // ? => one single character\n        const patternListStack = [];\n        const negativeLists = [];\n        let stateChar;\n        let inClass = false;\n        let reClassStart = -1;\n        let classStart = -1;\n        let cs;\n        let pl;\n        let sp;\n        // . and .. never match anything that doesn't start with .,\n        // even when options.dot is set.  However, if the pattern\n        // starts with ., then traversal patterns can match.\n        let dotTravAllowed = pattern.charAt(0) === \".\";\n        let dotFileAllowed = options.dot || dotTravAllowed;\n        const patternStart = ()=>dotTravAllowed ? \"\" : dotFileAllowed ? \"(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))\" : \"(?!\\\\.)\";\n        const subPatternStart = (p)=>p.charAt(0) === \".\" ? \"\" : options.dot ? \"(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))\" : \"(?!\\\\.)\";\n        const clearStateChar = ()=>{\n            if (stateChar) {\n                // we had some state-tracking character\n                // that wasn't consumed by this pass.\n                switch(stateChar){\n                    case \"*\":\n                        re += star;\n                        hasMagic = true;\n                        break;\n                    case \"?\":\n                        re += qmark;\n                        hasMagic = true;\n                        break;\n                    default:\n                        re += \"\\\\\" + stateChar;\n                        break;\n                }\n                this.debug(\"clearStateChar %j %j\", stateChar, re);\n                stateChar = false;\n            }\n        };\n        for(let i = 0, c; i < pattern.length && (c = pattern.charAt(i)); i++){\n            this.debug(\"%s\t%s %s %j\", pattern, i, re, c);\n            // skip over any that are escaped.\n            if (escaping) {\n                /* istanbul ignore next - completely not allowed, even escaped. */ if (c === \"/\") {\n                    return false;\n                }\n                if (reSpecials[c]) {\n                    re += \"\\\\\";\n                }\n                re += c;\n                escaping = false;\n                continue;\n            }\n            switch(c){\n                /* istanbul ignore next */ case \"/\":\n                    {\n                        // Should already be path-split by now.\n                        return false;\n                    }\n                case \"\\\\\":\n                    if (inClass && pattern.charAt(i + 1) === \"-\") {\n                        re += c;\n                        continue;\n                    }\n                    clearStateChar();\n                    escaping = true;\n                    continue;\n                // the various stateChar values\n                // for the \"extglob\" stuff.\n                case \"?\":\n                case \"*\":\n                case \"+\":\n                case \"@\":\n                case \"!\":\n                    this.debug(\"%s\t%s %s %j <-- stateChar\", pattern, i, re, c);\n                    // all of those are literals inside a class, except that\n                    // the glob [!a] means [^a] in regexp\n                    if (inClass) {\n                        this.debug(\"  in class\");\n                        if (c === \"!\" && i === classStart + 1) c = \"^\";\n                        re += c;\n                        continue;\n                    }\n                    // if we already have a stateChar, then it means\n                    // that there was something like ** or +? in there.\n                    // Handle the stateChar, then proceed with this one.\n                    this.debug(\"call clearStateChar %j\", stateChar);\n                    clearStateChar();\n                    stateChar = c;\n                    // if extglob is disabled, then +(asdf|foo) isn't a thing.\n                    // just clear the statechar *now*, rather than even diving into\n                    // the patternList stuff.\n                    if (options.noext) clearStateChar();\n                    continue;\n                case \"(\":\n                    {\n                        if (inClass) {\n                            re += \"(\";\n                            continue;\n                        }\n                        if (!stateChar) {\n                            re += \"\\\\(\";\n                            continue;\n                        }\n                        const plEntry = {\n                            type: stateChar,\n                            start: i - 1,\n                            reStart: re.length,\n                            open: plTypes[stateChar].open,\n                            close: plTypes[stateChar].close\n                        };\n                        this.debug(this.pattern, \"\t\", plEntry);\n                        patternListStack.push(plEntry);\n                        // negation is (?:(?!(?:js)(?:<rest>))[^/]*)\n                        re += plEntry.open;\n                        // next entry starts with a dot maybe?\n                        if (plEntry.start === 0 && plEntry.type !== \"!\") {\n                            dotTravAllowed = true;\n                            re += subPatternStart(pattern.slice(i + 1));\n                        }\n                        this.debug(\"plType %j %j\", stateChar, re);\n                        stateChar = false;\n                        continue;\n                    }\n                case \")\":\n                    {\n                        const plEntry = patternListStack[patternListStack.length - 1];\n                        if (inClass || !plEntry) {\n                            re += \"\\\\)\";\n                            continue;\n                        }\n                        patternListStack.pop();\n                        // closing an extglob\n                        clearStateChar();\n                        hasMagic = true;\n                        pl = plEntry;\n                        // negation is (?:(?!js)[^/]*)\n                        // The others are (?:<pattern>)<type>\n                        re += pl.close;\n                        if (pl.type === \"!\") {\n                            negativeLists.push(Object.assign(pl, {\n                                reEnd: re.length\n                            }));\n                        }\n                        continue;\n                    }\n                case \"|\":\n                    {\n                        const plEntry = patternListStack[patternListStack.length - 1];\n                        if (inClass || !plEntry) {\n                            re += \"\\\\|\";\n                            continue;\n                        }\n                        clearStateChar();\n                        re += \"|\";\n                        // next subpattern can start with a dot?\n                        if (plEntry.start === 0 && plEntry.type !== \"!\") {\n                            dotTravAllowed = true;\n                            re += subPatternStart(pattern.slice(i + 1));\n                        }\n                        continue;\n                    }\n                // these are mostly the same in regexp and glob\n                case \"[\":\n                    // swallow any state-tracking char before the [\n                    clearStateChar();\n                    if (inClass) {\n                        re += \"\\\\\" + c;\n                        continue;\n                    }\n                    inClass = true;\n                    classStart = i;\n                    reClassStart = re.length;\n                    re += c;\n                    continue;\n                case \"]\":\n                    //  a right bracket shall lose its special\n                    //  meaning and represent itself in\n                    //  a bracket expression if it occurs\n                    //  first in the list.  -- POSIX.2 2.8.3.2\n                    if (i === classStart + 1 || !inClass) {\n                        re += \"\\\\\" + c;\n                        continue;\n                    }\n                    // split where the last [ was, make sure we don't have\n                    // an invalid re. if so, re-walk the contents of the\n                    // would-be class to re-translate any characters that\n                    // were passed through as-is\n                    // TODO: It would probably be faster to determine this\n                    // without a try/catch and a new RegExp, but it's tricky\n                    // to do safely.  For now, this is safe and works.\n                    cs = pattern.substring(classStart + 1, i);\n                    try {\n                        RegExp(\"[\" + braExpEscape(charUnescape(cs)) + \"]\");\n                        // looks good, finish up the class.\n                        re += c;\n                    } catch (er) {\n                        // out of order ranges in JS are errors, but in glob syntax,\n                        // they're just a range that matches nothing.\n                        re = re.substring(0, reClassStart) + \"(?:$.)\" // match nothing ever\n                        ;\n                    }\n                    hasMagic = true;\n                    inClass = false;\n                    continue;\n                default:\n                    // swallow any state char that wasn't consumed\n                    clearStateChar();\n                    if (reSpecials[c] && !(c === \"^\" && inClass)) {\n                        re += \"\\\\\";\n                    }\n                    re += c;\n                    break;\n            } // switch\n        } // for\n        // handle the case where we left a class open.\n        // \"[abc\" is valid, equivalent to \"\\[abc\"\n        if (inClass) {\n            // split where the last [ was, and escape it\n            // this is a huge pita.  We now have to re-walk\n            // the contents of the would-be class to re-translate\n            // any characters that were passed through as-is\n            cs = pattern.slice(classStart + 1);\n            sp = this.parse(cs, SUBPARSE);\n            re = re.substring(0, reClassStart) + \"\\\\[\" + sp[0];\n            hasMagic = hasMagic || sp[1];\n        }\n        // handle the case where we had a +( thing at the *end*\n        // of the pattern.\n        // each pattern list stack adds 3 chars, and we need to go through\n        // and escape any | chars that were passed through as-is for the regexp.\n        // Go through and escape them, taking care not to double-escape any\n        // | chars that were already escaped.\n        for(pl = patternListStack.pop(); pl; pl = patternListStack.pop()){\n            let tail;\n            tail = re.slice(pl.reStart + pl.open.length);\n            this.debug(\"setting tail\", re, pl);\n            // maybe some even number of \\, then maybe 1 \\, followed by a |\n            tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, (_, $1, $2)=>{\n                /* istanbul ignore else - should already be done */ if (!$2) {\n                    // the | isn't already escaped, so escape it.\n                    $2 = \"\\\\\";\n                }\n                // need to escape all those slashes *again*, without escaping the\n                // one that we need for escaping the | character.  As it works out,\n                // escaping an even number of slashes can be done by simply repeating\n                // it exactly after itself.  That's why this trick works.\n                //\n                // I am sorry that you have to see this.\n                return $1 + $1 + $2 + \"|\";\n            });\n            this.debug(\"tail=%j\\n   %s\", tail, tail, pl, re);\n            const t = pl.type === \"*\" ? star : pl.type === \"?\" ? qmark : \"\\\\\" + pl.type;\n            hasMagic = true;\n            re = re.slice(0, pl.reStart) + t + \"\\\\(\" + tail;\n        }\n        // handle trailing things that only matter at the very end.\n        clearStateChar();\n        if (escaping) {\n            // trailing \\\\\n            re += \"\\\\\\\\\";\n        }\n        // only need to apply the nodot start if the re starts with\n        // something that could conceivably capture a dot\n        const addPatternStart = addPatternStartSet[re.charAt(0)];\n        // Hack to work around lack of negative lookbehind in JS\n        // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n        // like 'a.xyz.yz' doesn't match.  So, the first negative\n        // lookahead, has to look ALL the way ahead, to the end of\n        // the pattern.\n        for(let n = negativeLists.length - 1; n > -1; n--){\n            const nl = negativeLists[n];\n            const nlBefore = re.slice(0, nl.reStart);\n            const nlFirst = re.slice(nl.reStart, nl.reEnd - 8);\n            let nlAfter = re.slice(nl.reEnd);\n            const nlLast = re.slice(nl.reEnd - 8, nl.reEnd) + nlAfter;\n            // Handle nested stuff like *(*.js|!(*.json)), where open parens\n            // mean that we should *not* include the ) in the bit that is considered\n            // \"after\" the negated section.\n            const closeParensBefore = nlBefore.split(\")\").length;\n            const openParensBefore = nlBefore.split(\"(\").length - closeParensBefore;\n            let cleanAfter = nlAfter;\n            for(let i = 0; i < openParensBefore; i++){\n                cleanAfter = cleanAfter.replace(/\\)[+*?]?/, \"\");\n            }\n            nlAfter = cleanAfter;\n            const dollar = nlAfter === \"\" && isSub !== SUBPARSE ? \"(?:$|\\\\/)\" : \"\";\n            re = nlBefore + nlFirst + nlAfter + dollar + nlLast;\n        }\n        // if the re is not \"\" at this point, then we need to make sure\n        // it doesn't match against an empty path part.\n        // Otherwise a/* will match a/, which it should not.\n        if (re !== \"\" && hasMagic) {\n            re = \"(?=.)\" + re;\n        }\n        if (addPatternStart) {\n            re = patternStart() + re;\n        }\n        // parsing just a piece of a larger pattern.\n        if (isSub === SUBPARSE) {\n            return [\n                re,\n                hasMagic\n            ];\n        }\n        // if it's nocase, and the lcase/uppercase don't match, it's magic\n        if (options.nocase && !hasMagic) {\n            hasMagic = pattern.toUpperCase() !== pattern.toLowerCase();\n        }\n        // skip the regexp for non-magical patterns\n        // unescape anything in it, though, so that it'll be\n        // an exact match against a file etc.\n        if (!hasMagic) {\n            return globUnescape(pattern);\n        }\n        const flags = options.nocase ? \"i\" : \"\";\n        try {\n            return Object.assign(new RegExp(\"^\" + re + \"$\", flags), {\n                _glob: pattern,\n                _src: re\n            });\n        } catch (er) /* istanbul ignore next - should be impossible */ {\n            // If it was an invalid regular expression, then it can't match\n            // anything.  This trick looks for a character after the end of\n            // the string, which is of course impossible, except in multi-line\n            // mode, but it's not a /m regex.\n            return new RegExp(\"$.\");\n        }\n    }\n    makeRe() {\n        if (this.regexp || this.regexp === false) return this.regexp;\n        // at this point, this.set is a 2d array of partial\n        // pattern strings, or \"**\".\n        //\n        // It's better to use .match().  This function shouldn't\n        // be used, really, but it's pretty convenient sometimes,\n        // when you just want to work with a regex.\n        const set = this.set;\n        if (!set.length) {\n            this.regexp = false;\n            return this.regexp;\n        }\n        const options = this.options;\n        const twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;\n        const flags = options.nocase ? \"i\" : \"\";\n        // coalesce globstars and regexpify non-globstar patterns\n        // if it's the only item, then we just do one twoStar\n        // if it's the first, and there are more, prepend (\\/|twoStar\\/)? to next\n        // if it's the last, append (\\/twoStar|) to previous\n        // if it's in the middle, append (\\/|\\/twoStar\\/) to previous\n        // then filter out GLOBSTAR symbols\n        let re = set.map((pattern)=>{\n            pattern = pattern.map((p)=>typeof p === \"string\" ? regExpEscape(p) : p === GLOBSTAR ? GLOBSTAR : p._src).reduce((set, p)=>{\n                if (!(set[set.length - 1] === GLOBSTAR && p === GLOBSTAR)) {\n                    set.push(p);\n                }\n                return set;\n            }, []);\n            pattern.forEach((p, i)=>{\n                if (p !== GLOBSTAR || pattern[i - 1] === GLOBSTAR) {\n                    return;\n                }\n                if (i === 0) {\n                    if (pattern.length > 1) {\n                        pattern[i + 1] = \"(?:\\\\/|\" + twoStar + \"\\\\/)?\" + pattern[i + 1];\n                    } else {\n                        pattern[i] = twoStar;\n                    }\n                } else if (i === pattern.length - 1) {\n                    pattern[i - 1] += \"(?:\\\\/|\" + twoStar + \")?\";\n                } else {\n                    pattern[i - 1] += \"(?:\\\\/|\\\\/\" + twoStar + \"\\\\/)\" + pattern[i + 1];\n                    pattern[i + 1] = GLOBSTAR;\n                }\n            });\n            return pattern.filter((p)=>p !== GLOBSTAR).join(\"/\");\n        }).join(\"|\");\n        // must match entire pattern\n        // ending in a * or ** will make it less strict.\n        re = \"^(?:\" + re + \")$\";\n        // can match anything, as long as it's not this.\n        if (this.negate) re = \"^(?!\" + re + \").*$\";\n        try {\n            this.regexp = new RegExp(re, flags);\n        } catch (ex) /* istanbul ignore next - should be impossible */ {\n            this.regexp = false;\n        }\n        return this.regexp;\n    }\n    match(f, partial = this.partial) {\n        this.debug(\"match\", f, this.pattern);\n        // short-circuit in the case of busted things.\n        // comments, etc.\n        if (this.comment) return false;\n        if (this.empty) return f === \"\";\n        if (f === \"/\" && partial) return true;\n        const options = this.options;\n        // windows: need to use /, not \\\n        if (path.sep !== \"/\") {\n            f = f.split(path.sep).join(\"/\");\n        }\n        // treat the test path as a set of pathparts.\n        f = f.split(slashSplit);\n        this.debug(this.pattern, \"split\", f);\n        // just ONE of the pattern sets in this.set needs to match\n        // in order for it to be valid.  If negating, then just one\n        // match means that we have failed.\n        // Either way, return on the first hit.\n        const set = this.set;\n        this.debug(this.pattern, \"set\", set);\n        // Find the basename of the path by looking for the last non-empty segment\n        let filename;\n        for(let i = f.length - 1; i >= 0; i--){\n            filename = f[i];\n            if (filename) break;\n        }\n        for(let i = 0; i < set.length; i++){\n            const pattern = set[i];\n            let file = f;\n            if (options.matchBase && pattern.length === 1) {\n                file = [\n                    filename\n                ];\n            }\n            const hit = this.matchOne(file, pattern, partial);\n            if (hit) {\n                if (options.flipNegate) return true;\n                return !this.negate;\n            }\n        }\n        // didn't get any hits.  this is success if it's a negative\n        // pattern, failure otherwise.\n        if (options.flipNegate) return false;\n        return this.negate;\n    }\n    static defaults(def) {\n        return minimatch.defaults(def).Minimatch;\n    }\n}\nminimatch.Minimatch = Minimatch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/readdir-glob/node_modules/minimatch/minimatch.js\n");

/***/ })

};
;