/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fstream";
exports.ids = ["vendor-chunks/fstream"];
exports.modules = {

/***/ "(ssr)/./node_modules/fstream/fstream.js":
/*!*****************************************!*\
  !*** ./node_modules/fstream/fstream.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Abstract = __webpack_require__(/*! ./lib/abstract.js */ \"(ssr)/./node_modules/fstream/lib/abstract.js\");\nexports.Reader = __webpack_require__(/*! ./lib/reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\nexports.Writer = __webpack_require__(/*! ./lib/writer.js */ \"(ssr)/./node_modules/fstream/lib/writer.js\");\nexports.File = {\n    Reader: __webpack_require__(/*! ./lib/file-reader.js */ \"(ssr)/./node_modules/fstream/lib/file-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/file-writer.js */ \"(ssr)/./node_modules/fstream/lib/file-writer.js\")\n};\nexports.Dir = {\n    Reader: __webpack_require__(/*! ./lib/dir-reader.js */ \"(ssr)/./node_modules/fstream/lib/dir-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/dir-writer.js */ \"(ssr)/./node_modules/fstream/lib/dir-writer.js\")\n};\nexports.Link = {\n    Reader: __webpack_require__(/*! ./lib/link-reader.js */ \"(ssr)/./node_modules/fstream/lib/link-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/link-writer.js */ \"(ssr)/./node_modules/fstream/lib/link-writer.js\")\n};\nexports.Proxy = {\n    Reader: __webpack_require__(/*! ./lib/proxy-reader.js */ \"(ssr)/./node_modules/fstream/lib/proxy-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/proxy-writer.js */ \"(ssr)/./node_modules/fstream/lib/proxy-writer.js\")\n};\nexports.Reader.Dir = exports.DirReader = exports.Dir.Reader;\nexports.Reader.File = exports.FileReader = exports.File.Reader;\nexports.Reader.Link = exports.LinkReader = exports.Link.Reader;\nexports.Reader.Proxy = exports.ProxyReader = exports.Proxy.Reader;\nexports.Writer.Dir = exports.DirWriter = exports.Dir.Writer;\nexports.Writer.File = exports.FileWriter = exports.File.Writer;\nexports.Writer.Link = exports.LinkWriter = exports.Link.Writer;\nexports.Writer.Proxy = exports.ProxyWriter = exports.Proxy.Writer;\nexports.collect = __webpack_require__(/*! ./lib/collect.js */ \"(ssr)/./node_modules/fstream/lib/collect.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9mc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBQSwrR0FBMkI7QUFDM0JBLHlHQUF5QjtBQUN6QkEseUdBQXlCO0FBRXpCQSxZQUFZLEdBQUc7SUFDYkcsUUFBUUQsbUJBQU9BLENBQUM7SUFDaEJFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ2xCO0FBRUFGLFdBQVcsR0FBRztJQUNaRyxRQUFRRCxtQkFBT0EsQ0FBQztJQUNoQkUsUUFBUUYsbUJBQU9BLENBQUM7QUFDbEI7QUFFQUYsWUFBWSxHQUFHO0lBQ2JHLFFBQVFELG1CQUFPQSxDQUFDO0lBQ2hCRSxRQUFRRixtQkFBT0EsQ0FBQztBQUNsQjtBQUVBRixhQUFhLEdBQUc7SUFDZEcsUUFBUUQsbUJBQU9BLENBQUM7SUFDaEJFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ2xCO0FBRUFGLGtCQUFrQixHQUFHQSxpQkFBaUIsR0FBR0EsUUFBUU0sR0FBRyxDQUFDSCxNQUFNO0FBQzNESCxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLFFBQVFLLElBQUksQ0FBQ0YsTUFBTTtBQUM5REgsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxRQUFRTyxJQUFJLENBQUNKLE1BQU07QUFDOURILG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBR0EsUUFBUVEsS0FBSyxDQUFDTCxNQUFNO0FBRWpFSCxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLFFBQVFNLEdBQUcsQ0FBQ0YsTUFBTTtBQUMzREosbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxRQUFRSyxJQUFJLENBQUNELE1BQU07QUFDOURKLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsUUFBUU8sSUFBSSxDQUFDSCxNQUFNO0FBQzlESixvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUdBLFFBQVFRLEtBQUssQ0FBQ0osTUFBTTtBQUVqRUosNEdBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9mc3RyZWFtLmpzPzFmNTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5BYnN0cmFjdCA9IHJlcXVpcmUoJy4vbGliL2Fic3RyYWN0LmpzJylcbmV4cG9ydHMuUmVhZGVyID0gcmVxdWlyZSgnLi9saWIvcmVhZGVyLmpzJylcbmV4cG9ydHMuV3JpdGVyID0gcmVxdWlyZSgnLi9saWIvd3JpdGVyLmpzJylcblxuZXhwb3J0cy5GaWxlID0ge1xuICBSZWFkZXI6IHJlcXVpcmUoJy4vbGliL2ZpbGUtcmVhZGVyLmpzJyksXG4gIFdyaXRlcjogcmVxdWlyZSgnLi9saWIvZmlsZS13cml0ZXIuanMnKVxufVxuXG5leHBvcnRzLkRpciA9IHtcbiAgUmVhZGVyOiByZXF1aXJlKCcuL2xpYi9kaXItcmVhZGVyLmpzJyksXG4gIFdyaXRlcjogcmVxdWlyZSgnLi9saWIvZGlyLXdyaXRlci5qcycpXG59XG5cbmV4cG9ydHMuTGluayA9IHtcbiAgUmVhZGVyOiByZXF1aXJlKCcuL2xpYi9saW5rLXJlYWRlci5qcycpLFxuICBXcml0ZXI6IHJlcXVpcmUoJy4vbGliL2xpbmstd3JpdGVyLmpzJylcbn1cblxuZXhwb3J0cy5Qcm94eSA9IHtcbiAgUmVhZGVyOiByZXF1aXJlKCcuL2xpYi9wcm94eS1yZWFkZXIuanMnKSxcbiAgV3JpdGVyOiByZXF1aXJlKCcuL2xpYi9wcm94eS13cml0ZXIuanMnKVxufVxuXG5leHBvcnRzLlJlYWRlci5EaXIgPSBleHBvcnRzLkRpclJlYWRlciA9IGV4cG9ydHMuRGlyLlJlYWRlclxuZXhwb3J0cy5SZWFkZXIuRmlsZSA9IGV4cG9ydHMuRmlsZVJlYWRlciA9IGV4cG9ydHMuRmlsZS5SZWFkZXJcbmV4cG9ydHMuUmVhZGVyLkxpbmsgPSBleHBvcnRzLkxpbmtSZWFkZXIgPSBleHBvcnRzLkxpbmsuUmVhZGVyXG5leHBvcnRzLlJlYWRlci5Qcm94eSA9IGV4cG9ydHMuUHJveHlSZWFkZXIgPSBleHBvcnRzLlByb3h5LlJlYWRlclxuXG5leHBvcnRzLldyaXRlci5EaXIgPSBleHBvcnRzLkRpcldyaXRlciA9IGV4cG9ydHMuRGlyLldyaXRlclxuZXhwb3J0cy5Xcml0ZXIuRmlsZSA9IGV4cG9ydHMuRmlsZVdyaXRlciA9IGV4cG9ydHMuRmlsZS5Xcml0ZXJcbmV4cG9ydHMuV3JpdGVyLkxpbmsgPSBleHBvcnRzLkxpbmtXcml0ZXIgPSBleHBvcnRzLkxpbmsuV3JpdGVyXG5leHBvcnRzLldyaXRlci5Qcm94eSA9IGV4cG9ydHMuUHJveHlXcml0ZXIgPSBleHBvcnRzLlByb3h5LldyaXRlclxuXG5leHBvcnRzLmNvbGxlY3QgPSByZXF1aXJlKCcuL2xpYi9jb2xsZWN0LmpzJylcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiQWJzdHJhY3QiLCJyZXF1aXJlIiwiUmVhZGVyIiwiV3JpdGVyIiwiRmlsZSIsIkRpciIsIkxpbmsiLCJQcm94eSIsIkRpclJlYWRlciIsIkZpbGVSZWFkZXIiLCJMaW5rUmVhZGVyIiwiUHJveHlSZWFkZXIiLCJEaXJXcml0ZXIiLCJGaWxlV3JpdGVyIiwiTGlua1dyaXRlciIsIlByb3h5V3JpdGVyIiwiY29sbGVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/fstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/abstract.js":
/*!**********************************************!*\
  !*** ./node_modules/fstream/lib/abstract.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// the parent class for all fstreams.\nmodule.exports = Abstract;\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nfunction Abstract() {\n    Stream.call(this);\n}\ninherits(Abstract, Stream);\nAbstract.prototype.on = function(ev, fn) {\n    if (ev === \"ready\" && this.ready) {\n        process.nextTick(fn.bind(this));\n    } else {\n        Stream.prototype.on.call(this, ev, fn);\n    }\n    return this;\n};\nAbstract.prototype.abort = function() {\n    this._aborted = true;\n    this.emit(\"abort\");\n};\nAbstract.prototype.destroy = function() {};\nAbstract.prototype.warn = function(msg, code) {\n    var self = this;\n    var er = decorate(msg, code, self);\n    if (!self.listeners(\"warn\")) {\n        console.error(\"%s %s\\n\" + \"path = %s\\n\" + \"syscall = %s\\n\" + \"fstream_type = %s\\n\" + \"fstream_path = %s\\n\" + \"fstream_unc_path = %s\\n\" + \"fstream_class = %s\\n\" + \"fstream_stack =\\n%s\\n\", code || \"UNKNOWN\", er.stack, er.path, er.syscall, er.fstream_type, er.fstream_path, er.fstream_unc_path, er.fstream_class, er.fstream_stack.join(\"\\n\"));\n    } else {\n        self.emit(\"warn\", er);\n    }\n};\nAbstract.prototype.info = function(msg, code) {\n    this.emit(\"info\", msg, code);\n};\nAbstract.prototype.error = function(msg, code, th) {\n    var er = decorate(msg, code, this);\n    if (th) throw er;\n    else this.emit(\"error\", er);\n};\nfunction decorate(er, code, self) {\n    if (!(er instanceof Error)) er = new Error(er);\n    er.code = er.code || code;\n    er.path = er.path || self.path;\n    er.fstream_type = er.fstream_type || self.type;\n    er.fstream_path = er.fstream_path || self.path;\n    if (self._path !== self.path) {\n        er.fstream_unc_path = er.fstream_unc_path || self._path;\n    }\n    if (self.linkpath) {\n        er.fstream_linkpath = er.fstream_linkpath || self.linkpath;\n    }\n    er.fstream_class = er.fstream_class || self.constructor.name;\n    er.fstream_stack = er.fstream_stack || new Error().stack.split(/\\n/).slice(3).map(function(s) {\n        return s.replace(/^ {4}at /, \"\");\n    });\n    return er;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvYWJzdHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBRXJDQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG9EQUF3QjtBQUNyQyxJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2QixTQUFTRjtJQUNQQyxPQUFPRyxJQUFJLENBQUMsSUFBSTtBQUNsQjtBQUVBRCxTQUFTSCxVQUFVQztBQUVuQkQsU0FBU0ssU0FBUyxDQUFDQyxFQUFFLEdBQUcsU0FBVUMsRUFBRSxFQUFFQyxFQUFFO0lBQ3RDLElBQUlELE9BQU8sV0FBVyxJQUFJLENBQUNFLEtBQUssRUFBRTtRQUNoQ0MsUUFBUUMsUUFBUSxDQUFDSCxHQUFHSSxJQUFJLENBQUMsSUFBSTtJQUMvQixPQUFPO1FBQ0xYLE9BQU9JLFNBQVMsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFRyxJQUFJQztJQUNyQztJQUNBLE9BQU8sSUFBSTtBQUNiO0FBRUFSLFNBQVNLLFNBQVMsQ0FBQ1EsS0FBSyxHQUFHO0lBQ3pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ2hCLElBQUksQ0FBQ0MsSUFBSSxDQUFDO0FBQ1o7QUFFQWYsU0FBU0ssU0FBUyxDQUFDVyxPQUFPLEdBQUcsWUFBYTtBQUUxQ2hCLFNBQVNLLFNBQVMsQ0FBQ1ksSUFBSSxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsSUFBSTtJQUMzQyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQyxLQUFLQyxTQUFTSixLQUFLQyxNQUFNQztJQUM3QixJQUFJLENBQUNBLEtBQUtHLFNBQVMsQ0FBQyxTQUFTO1FBQzNCQyxRQUFRQyxLQUFLLENBQUMsWUFDZCxnQkFDQSxtQkFDQSx3QkFDQSx3QkFDQSw0QkFDQSx5QkFDQSx5QkFDRU4sUUFBUSxXQUNSRSxHQUFHSyxLQUFLLEVBQ1JMLEdBQUdNLElBQUksRUFDUE4sR0FBR08sT0FBTyxFQUNWUCxHQUFHUSxZQUFZLEVBQ2ZSLEdBQUdTLFlBQVksRUFDZlQsR0FBR1UsZ0JBQWdCLEVBQ25CVixHQUFHVyxhQUFhLEVBQ2hCWCxHQUFHWSxhQUFhLENBQUNDLElBQUksQ0FBQztJQUMxQixPQUFPO1FBQ0xkLEtBQUtMLElBQUksQ0FBQyxRQUFRTTtJQUNwQjtBQUNGO0FBRUFyQixTQUFTSyxTQUFTLENBQUM4QixJQUFJLEdBQUcsU0FBVWpCLEdBQUcsRUFBRUMsSUFBSTtJQUMzQyxJQUFJLENBQUNKLElBQUksQ0FBQyxRQUFRRyxLQUFLQztBQUN6QjtBQUVBbkIsU0FBU0ssU0FBUyxDQUFDb0IsS0FBSyxHQUFHLFNBQVVQLEdBQUcsRUFBRUMsSUFBSSxFQUFFaUIsRUFBRTtJQUNoRCxJQUFJZixLQUFLQyxTQUFTSixLQUFLQyxNQUFNLElBQUk7SUFDakMsSUFBSWlCLElBQUksTUFBTWY7U0FDVCxJQUFJLENBQUNOLElBQUksQ0FBQyxTQUFTTTtBQUMxQjtBQUVBLFNBQVNDLFNBQVVELEVBQUUsRUFBRUYsSUFBSSxFQUFFQyxJQUFJO0lBQy9CLElBQUksQ0FBRUMsQ0FBQUEsY0FBY2dCLEtBQUksR0FBSWhCLEtBQUssSUFBSWdCLE1BQU1oQjtJQUMzQ0EsR0FBR0YsSUFBSSxHQUFHRSxHQUFHRixJQUFJLElBQUlBO0lBQ3JCRSxHQUFHTSxJQUFJLEdBQUdOLEdBQUdNLElBQUksSUFBSVAsS0FBS08sSUFBSTtJQUM5Qk4sR0FBR1EsWUFBWSxHQUFHUixHQUFHUSxZQUFZLElBQUlULEtBQUtrQixJQUFJO0lBQzlDakIsR0FBR1MsWUFBWSxHQUFHVCxHQUFHUyxZQUFZLElBQUlWLEtBQUtPLElBQUk7SUFDOUMsSUFBSVAsS0FBS21CLEtBQUssS0FBS25CLEtBQUtPLElBQUksRUFBRTtRQUM1Qk4sR0FBR1UsZ0JBQWdCLEdBQUdWLEdBQUdVLGdCQUFnQixJQUFJWCxLQUFLbUIsS0FBSztJQUN6RDtJQUNBLElBQUluQixLQUFLb0IsUUFBUSxFQUFFO1FBQ2pCbkIsR0FBR29CLGdCQUFnQixHQUFHcEIsR0FBR29CLGdCQUFnQixJQUFJckIsS0FBS29CLFFBQVE7SUFDNUQ7SUFDQW5CLEdBQUdXLGFBQWEsR0FBR1gsR0FBR1csYUFBYSxJQUFJWixLQUFLc0IsV0FBVyxDQUFDQyxJQUFJO0lBQzVEdEIsR0FBR1ksYUFBYSxHQUFHWixHQUFHWSxhQUFhLElBQ2pDLElBQUlJLFFBQVFYLEtBQUssQ0FBQ2tCLEtBQUssQ0FBQyxNQUFNQyxLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDLFNBQVVDLENBQUM7UUFDcEQsT0FBT0EsRUFBRUMsT0FBTyxDQUFDLFlBQVk7SUFDL0I7SUFFRixPQUFPM0I7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2Fic3RyYWN0LmpzPzY0YmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIHBhcmVudCBjbGFzcyBmb3IgYWxsIGZzdHJlYW1zLlxuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0XG5cbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQWJzdHJhY3QgKCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKVxufVxuXG5pbmhlcml0cyhBYnN0cmFjdCwgU3RyZWFtKVxuXG5BYnN0cmFjdC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIGlmIChldiA9PT0gJ3JlYWR5JyAmJiB0aGlzLnJlYWR5KSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKHRoaXMpKVxuICB9IGVsc2Uge1xuICAgIFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQWJzdHJhY3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hYm9ydGVkID0gdHJ1ZVxuICB0aGlzLmVtaXQoJ2Fib3J0Jylcbn1cblxuQWJzdHJhY3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fVxuXG5BYnN0cmFjdC5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uIChtc2csIGNvZGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBlciA9IGRlY29yYXRlKG1zZywgY29kZSwgc2VsZilcbiAgaWYgKCFzZWxmLmxpc3RlbmVycygnd2FybicpKSB7XG4gICAgY29uc29sZS5lcnJvcignJXMgJXNcXG4nICtcbiAgICAncGF0aCA9ICVzXFxuJyArXG4gICAgJ3N5c2NhbGwgPSAlc1xcbicgK1xuICAgICdmc3RyZWFtX3R5cGUgPSAlc1xcbicgK1xuICAgICdmc3RyZWFtX3BhdGggPSAlc1xcbicgK1xuICAgICdmc3RyZWFtX3VuY19wYXRoID0gJXNcXG4nICtcbiAgICAnZnN0cmVhbV9jbGFzcyA9ICVzXFxuJyArXG4gICAgJ2ZzdHJlYW1fc3RhY2sgPVxcbiVzXFxuJyxcbiAgICAgIGNvZGUgfHwgJ1VOS05PV04nLFxuICAgICAgZXIuc3RhY2ssXG4gICAgICBlci5wYXRoLFxuICAgICAgZXIuc3lzY2FsbCxcbiAgICAgIGVyLmZzdHJlYW1fdHlwZSxcbiAgICAgIGVyLmZzdHJlYW1fcGF0aCxcbiAgICAgIGVyLmZzdHJlYW1fdW5jX3BhdGgsXG4gICAgICBlci5mc3RyZWFtX2NsYXNzLFxuICAgICAgZXIuZnN0cmVhbV9zdGFjay5qb2luKCdcXG4nKSlcbiAgfSBlbHNlIHtcbiAgICBzZWxmLmVtaXQoJ3dhcm4nLCBlcilcbiAgfVxufVxuXG5BYnN0cmFjdC5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIChtc2csIGNvZGUpIHtcbiAgdGhpcy5lbWl0KCdpbmZvJywgbXNnLCBjb2RlKVxufVxuXG5BYnN0cmFjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAobXNnLCBjb2RlLCB0aCkge1xuICB2YXIgZXIgPSBkZWNvcmF0ZShtc2csIGNvZGUsIHRoaXMpXG4gIGlmICh0aCkgdGhyb3cgZXJcbiAgZWxzZSB0aGlzLmVtaXQoJ2Vycm9yJywgZXIpXG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlIChlciwgY29kZSwgc2VsZikge1xuICBpZiAoIShlciBpbnN0YW5jZW9mIEVycm9yKSkgZXIgPSBuZXcgRXJyb3IoZXIpXG4gIGVyLmNvZGUgPSBlci5jb2RlIHx8IGNvZGVcbiAgZXIucGF0aCA9IGVyLnBhdGggfHwgc2VsZi5wYXRoXG4gIGVyLmZzdHJlYW1fdHlwZSA9IGVyLmZzdHJlYW1fdHlwZSB8fCBzZWxmLnR5cGVcbiAgZXIuZnN0cmVhbV9wYXRoID0gZXIuZnN0cmVhbV9wYXRoIHx8IHNlbGYucGF0aFxuICBpZiAoc2VsZi5fcGF0aCAhPT0gc2VsZi5wYXRoKSB7XG4gICAgZXIuZnN0cmVhbV91bmNfcGF0aCA9IGVyLmZzdHJlYW1fdW5jX3BhdGggfHwgc2VsZi5fcGF0aFxuICB9XG4gIGlmIChzZWxmLmxpbmtwYXRoKSB7XG4gICAgZXIuZnN0cmVhbV9saW5rcGF0aCA9IGVyLmZzdHJlYW1fbGlua3BhdGggfHwgc2VsZi5saW5rcGF0aFxuICB9XG4gIGVyLmZzdHJlYW1fY2xhc3MgPSBlci5mc3RyZWFtX2NsYXNzIHx8IHNlbGYuY29uc3RydWN0b3IubmFtZVxuICBlci5mc3RyZWFtX3N0YWNrID0gZXIuZnN0cmVhbV9zdGFjayB8fFxuICAgIG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KC9cXG4vKS5zbGljZSgzKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL14gezR9YXQgLywgJycpXG4gICAgfSlcblxuICByZXR1cm4gZXJcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQWJzdHJhY3QiLCJTdHJlYW0iLCJyZXF1aXJlIiwiaW5oZXJpdHMiLCJjYWxsIiwicHJvdG90eXBlIiwib24iLCJldiIsImZuIiwicmVhZHkiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJiaW5kIiwiYWJvcnQiLCJfYWJvcnRlZCIsImVtaXQiLCJkZXN0cm95Iiwid2FybiIsIm1zZyIsImNvZGUiLCJzZWxmIiwiZXIiLCJkZWNvcmF0ZSIsImxpc3RlbmVycyIsImNvbnNvbGUiLCJlcnJvciIsInN0YWNrIiwicGF0aCIsInN5c2NhbGwiLCJmc3RyZWFtX3R5cGUiLCJmc3RyZWFtX3BhdGgiLCJmc3RyZWFtX3VuY19wYXRoIiwiZnN0cmVhbV9jbGFzcyIsImZzdHJlYW1fc3RhY2siLCJqb2luIiwiaW5mbyIsInRoIiwiRXJyb3IiLCJ0eXBlIiwiX3BhdGgiLCJsaW5rcGF0aCIsImZzdHJlYW1fbGlua3BhdGgiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJzcGxpdCIsInNsaWNlIiwibWFwIiwicyIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/abstract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/collect.js":
/*!*********************************************!*\
  !*** ./node_modules/fstream/lib/collect.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = collect;\nfunction collect(stream) {\n    if (stream._collected) return;\n    if (stream._paused) return stream.on(\"resume\", collect.bind(null, stream));\n    stream._collected = true;\n    stream.pause();\n    stream.on(\"data\", save);\n    stream.on(\"end\", save);\n    var buf = [];\n    function save(b) {\n        if (typeof b === \"string\") b = new Buffer(b);\n        if (Buffer.isBuffer(b) && !b.length) return;\n        buf.push(b);\n    }\n    stream.on(\"entry\", saveEntry);\n    var entryBuffer = [];\n    function saveEntry(e) {\n        collect(e);\n        entryBuffer.push(e);\n    }\n    stream.on(\"proxy\", proxyPause);\n    function proxyPause(p) {\n        p.pause();\n    }\n    // replace the pipe method with a new version that will\n    // unlock the buffered stuff.  if you just call .pipe()\n    // without a destination, then it'll re-play the events.\n    stream.pipe = function(orig) {\n        return function(dest) {\n            // console.error(' === open the pipes', dest && dest.path)\n            // let the entries flow through one at a time.\n            // Once they're all done, then we can resume completely.\n            var e = 0;\n            (function unblockEntry() {\n                var entry = entryBuffer[e++];\n                // console.error(\" ==== unblock entry\", entry && entry.path)\n                if (!entry) return resume();\n                entry.on(\"end\", unblockEntry);\n                if (dest) dest.add(entry);\n                else stream.emit(\"entry\", entry);\n            })();\n            function resume() {\n                stream.removeListener(\"entry\", saveEntry);\n                stream.removeListener(\"data\", save);\n                stream.removeListener(\"end\", save);\n                stream.pipe = orig;\n                if (dest) stream.pipe(dest);\n                buf.forEach(function(b) {\n                    if (b) stream.emit(\"data\", b);\n                    else stream.emit(\"end\");\n                });\n                stream.resume();\n            }\n            return dest;\n        };\n    }(stream.pipe);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9jb2xsZWN0LmpzPzc1OWEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0XG5cbmZ1bmN0aW9uIGNvbGxlY3QgKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtLl9jb2xsZWN0ZWQpIHJldHVyblxuXG4gIGlmIChzdHJlYW0uX3BhdXNlZCkgcmV0dXJuIHN0cmVhbS5vbigncmVzdW1lJywgY29sbGVjdC5iaW5kKG51bGwsIHN0cmVhbSkpXG5cbiAgc3RyZWFtLl9jb2xsZWN0ZWQgPSB0cnVlXG4gIHN0cmVhbS5wYXVzZSgpXG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgc2F2ZSlcbiAgc3RyZWFtLm9uKCdlbmQnLCBzYXZlKVxuICB2YXIgYnVmID0gW11cbiAgZnVuY3Rpb24gc2F2ZSAoYikge1xuICAgIGlmICh0eXBlb2YgYiA9PT0gJ3N0cmluZycpIGIgPSBuZXcgQnVmZmVyKGIpXG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihiKSAmJiAhYi5sZW5ndGgpIHJldHVyblxuICAgIGJ1Zi5wdXNoKGIpXG4gIH1cblxuICBzdHJlYW0ub24oJ2VudHJ5Jywgc2F2ZUVudHJ5KVxuICB2YXIgZW50cnlCdWZmZXIgPSBbXVxuICBmdW5jdGlvbiBzYXZlRW50cnkgKGUpIHtcbiAgICBjb2xsZWN0KGUpXG4gICAgZW50cnlCdWZmZXIucHVzaChlKVxuICB9XG5cbiAgc3RyZWFtLm9uKCdwcm94eScsIHByb3h5UGF1c2UpXG4gIGZ1bmN0aW9uIHByb3h5UGF1c2UgKHApIHtcbiAgICBwLnBhdXNlKClcbiAgfVxuXG4gIC8vIHJlcGxhY2UgdGhlIHBpcGUgbWV0aG9kIHdpdGggYSBuZXcgdmVyc2lvbiB0aGF0IHdpbGxcbiAgLy8gdW5sb2NrIHRoZSBidWZmZXJlZCBzdHVmZi4gIGlmIHlvdSBqdXN0IGNhbGwgLnBpcGUoKVxuICAvLyB3aXRob3V0IGEgZGVzdGluYXRpb24sIHRoZW4gaXQnbGwgcmUtcGxheSB0aGUgZXZlbnRzLlxuICBzdHJlYW0ucGlwZSA9IChmdW5jdGlvbiAob3JpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgLy8gY29uc29sZS5lcnJvcignID09PSBvcGVuIHRoZSBwaXBlcycsIGRlc3QgJiYgZGVzdC5wYXRoKVxuXG4gICAgICAvLyBsZXQgdGhlIGVudHJpZXMgZmxvdyB0aHJvdWdoIG9uZSBhdCBhIHRpbWUuXG4gICAgICAvLyBPbmNlIHRoZXkncmUgYWxsIGRvbmUsIHRoZW4gd2UgY2FuIHJlc3VtZSBjb21wbGV0ZWx5LlxuICAgICAgdmFyIGUgPSAwXG4gICAgICA7KGZ1bmN0aW9uIHVuYmxvY2tFbnRyeSAoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJ5QnVmZmVyW2UrK11cbiAgICAgICAgLy8gY29uc29sZS5lcnJvcihcIiA9PT09IHVuYmxvY2sgZW50cnlcIiwgZW50cnkgJiYgZW50cnkucGF0aClcbiAgICAgICAgaWYgKCFlbnRyeSkgcmV0dXJuIHJlc3VtZSgpXG4gICAgICAgIGVudHJ5Lm9uKCdlbmQnLCB1bmJsb2NrRW50cnkpXG4gICAgICAgIGlmIChkZXN0KSBkZXN0LmFkZChlbnRyeSlcbiAgICAgICAgZWxzZSBzdHJlYW0uZW1pdCgnZW50cnknLCBlbnRyeSlcbiAgICAgIH0pKClcblxuICAgICAgZnVuY3Rpb24gcmVzdW1lICgpIHtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbnRyeScsIHNhdmVFbnRyeSlcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgc2F2ZSlcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBzYXZlKVxuXG4gICAgICAgIHN0cmVhbS5waXBlID0gb3JpZ1xuICAgICAgICBpZiAoZGVzdCkgc3RyZWFtLnBpcGUoZGVzdClcblxuICAgICAgICBidWYuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgICAgIGlmIChiKSBzdHJlYW0uZW1pdCgnZGF0YScsIGIpXG4gICAgICAgICAgZWxzZSBzdHJlYW0uZW1pdCgnZW5kJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ucmVzdW1lKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlc3RcbiAgICB9XG4gIH0pKHN0cmVhbS5waXBlKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb2xsZWN0Iiwic3RyZWFtIiwiX2NvbGxlY3RlZCIsIl9wYXVzZWQiLCJvbiIsImJpbmQiLCJwYXVzZSIsInNhdmUiLCJidWYiLCJiIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJsZW5ndGgiLCJwdXNoIiwic2F2ZUVudHJ5IiwiZW50cnlCdWZmZXIiLCJlIiwicHJveHlQYXVzZSIsInAiLCJwaXBlIiwib3JpZyIsImRlc3QiLCJ1bmJsb2NrRW50cnkiLCJlbnRyeSIsInJlc3VtZSIsImFkZCIsImVtaXQiLCJyZW1vdmVMaXN0ZW5lciIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLFFBQVNDLE1BQU07SUFDdEIsSUFBSUEsT0FBT0MsVUFBVSxFQUFFO0lBRXZCLElBQUlELE9BQU9FLE9BQU8sRUFBRSxPQUFPRixPQUFPRyxFQUFFLENBQUMsVUFBVUosUUFBUUssSUFBSSxDQUFDLE1BQU1KO0lBRWxFQSxPQUFPQyxVQUFVLEdBQUc7SUFDcEJELE9BQU9LLEtBQUs7SUFFWkwsT0FBT0csRUFBRSxDQUFDLFFBQVFHO0lBQ2xCTixPQUFPRyxFQUFFLENBQUMsT0FBT0c7SUFDakIsSUFBSUMsTUFBTSxFQUFFO0lBQ1osU0FBU0QsS0FBTUUsQ0FBQztRQUNkLElBQUksT0FBT0EsTUFBTSxVQUFVQSxJQUFJLElBQUlDLE9BQU9EO1FBQzFDLElBQUlDLE9BQU9DLFFBQVEsQ0FBQ0YsTUFBTSxDQUFDQSxFQUFFRyxNQUFNLEVBQUU7UUFDckNKLElBQUlLLElBQUksQ0FBQ0o7SUFDWDtJQUVBUixPQUFPRyxFQUFFLENBQUMsU0FBU1U7SUFDbkIsSUFBSUMsY0FBYyxFQUFFO0lBQ3BCLFNBQVNELFVBQVdFLENBQUM7UUFDbkJoQixRQUFRZ0I7UUFDUkQsWUFBWUYsSUFBSSxDQUFDRztJQUNuQjtJQUVBZixPQUFPRyxFQUFFLENBQUMsU0FBU2E7SUFDbkIsU0FBU0EsV0FBWUMsQ0FBQztRQUNwQkEsRUFBRVosS0FBSztJQUNUO0lBRUEsdURBQXVEO0lBQ3ZELHVEQUF1RDtJQUN2RCx3REFBd0Q7SUFDeERMLE9BQU9rQixJQUFJLEdBQUcsQUFBQyxTQUFVQyxJQUFJO1FBQzNCLE9BQU8sU0FBVUMsSUFBSTtZQUNuQiwwREFBMEQ7WUFFMUQsOENBQThDO1lBQzlDLHdEQUF3RDtZQUN4RCxJQUFJTCxJQUFJO1lBQ04sQ0FBQSxTQUFTTTtnQkFDVCxJQUFJQyxRQUFRUixXQUFXLENBQUNDLElBQUk7Z0JBQzVCLDREQUE0RDtnQkFDNUQsSUFBSSxDQUFDTyxPQUFPLE9BQU9DO2dCQUNuQkQsTUFBTW5CLEVBQUUsQ0FBQyxPQUFPa0I7Z0JBQ2hCLElBQUlELE1BQU1BLEtBQUtJLEdBQUcsQ0FBQ0Y7cUJBQ2R0QixPQUFPeUIsSUFBSSxDQUFDLFNBQVNIO1lBQzVCLENBQUE7WUFFQSxTQUFTQztnQkFDUHZCLE9BQU8wQixjQUFjLENBQUMsU0FBU2I7Z0JBQy9CYixPQUFPMEIsY0FBYyxDQUFDLFFBQVFwQjtnQkFDOUJOLE9BQU8wQixjQUFjLENBQUMsT0FBT3BCO2dCQUU3Qk4sT0FBT2tCLElBQUksR0FBR0M7Z0JBQ2QsSUFBSUMsTUFBTXBCLE9BQU9rQixJQUFJLENBQUNFO2dCQUV0QmIsSUFBSW9CLE9BQU8sQ0FBQyxTQUFVbkIsQ0FBQztvQkFDckIsSUFBSUEsR0FBR1IsT0FBT3lCLElBQUksQ0FBQyxRQUFRakI7eUJBQ3RCUixPQUFPeUIsSUFBSSxDQUFDO2dCQUNuQjtnQkFFQXpCLE9BQU91QixNQUFNO1lBQ2Y7WUFFQSxPQUFPSDtRQUNUO0lBQ0YsRUFBR3BCLE9BQU9rQixJQUFJO0FBQ2hCIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2NvbGxlY3QuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/collect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/dir-reader.js":
/*!************************************************!*\
  !*** ./node_modules/fstream/lib/dir-reader.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A thing that emits \"entry\" events with Reader objects\n// Pausing it causes it to stop emitting entry events, and also\n// pauses the current entry if there is one.\nmodule.exports = DirReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\nvar assert = (__webpack_require__(/*! assert */ \"assert\").ok);\ninherits(DirReader, Reader);\nfunction DirReader(props) {\n    var self = this;\n    if (!(self instanceof DirReader)) {\n        throw new Error(\"DirReader must be called as constructor.\");\n    }\n    // should already be established as a Directory type\n    if (props.type !== \"Directory\" || !props.Directory) {\n        throw new Error(\"Non-directory type \" + props.type);\n    }\n    self.entries = null;\n    self._index = -1;\n    self._paused = false;\n    self._length = -1;\n    if (props.sort) {\n        this.sort = props.sort;\n    }\n    Reader.call(this, props);\n}\nDirReader.prototype._getEntries = function() {\n    var self = this;\n    // race condition.  might pause() before calling _getEntries,\n    // and then resume, and try to get them a second time.\n    if (self._gotEntries) return;\n    self._gotEntries = true;\n    fs.readdir(self._path, function(er, entries) {\n        if (er) return self.error(er);\n        self.entries = entries;\n        self.emit(\"entries\", entries);\n        if (self._paused) self.once(\"resume\", processEntries);\n        else processEntries();\n        function processEntries() {\n            self._length = self.entries.length;\n            if (typeof self.sort === \"function\") {\n                self.entries = self.entries.sort(self.sort.bind(self));\n            }\n            self._read();\n        }\n    });\n};\n// start walking the dir, and emit an \"entry\" event for each one.\nDirReader.prototype._read = function() {\n    var self = this;\n    if (!self.entries) return self._getEntries();\n    if (self._paused || self._currentEntry || self._aborted) {\n        // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)\n        return;\n    }\n    self._index++;\n    if (self._index >= self.entries.length) {\n        if (!self._ended) {\n            self._ended = true;\n            self.emit(\"end\");\n            self.emit(\"close\");\n        }\n        return;\n    }\n    // ok, handle this one, then.\n    // save creating a proxy, by stat'ing the thing now.\n    var p = path.resolve(self._path, self.entries[self._index]);\n    assert(p !== self._path);\n    assert(self.entries[self._index]);\n    // set this to prevent trying to _read() again in the stat time.\n    self._currentEntry = p;\n    fs[self.props.follow ? \"stat\" : \"lstat\"](p, function(er, stat) {\n        if (er) return self.error(er);\n        var who = self._proxy || self;\n        stat.path = p;\n        stat.basename = path.basename(p);\n        stat.dirname = path.dirname(p);\n        var childProps = self.getChildProps.call(who, stat);\n        childProps.path = p;\n        childProps.basename = path.basename(p);\n        childProps.dirname = path.dirname(p);\n        var entry = Reader(childProps, stat);\n        // console.error(\"DR Entry\", p, stat.size)\n        self._currentEntry = entry;\n        // \"entry\" events are for direct entries in a specific dir.\n        // \"child\" events are for any and all children at all levels.\n        // This nomenclature is not completely final.\n        entry.on(\"pause\", function(who) {\n            if (!self._paused && !entry._disowned) {\n                self.pause(who);\n            }\n        });\n        entry.on(\"resume\", function(who) {\n            if (self._paused && !entry._disowned) {\n                self.resume(who);\n            }\n        });\n        entry.on(\"stat\", function(props) {\n            self.emit(\"_entryStat\", entry, props);\n            if (entry._aborted) return;\n            if (entry._paused) {\n                entry.once(\"resume\", function() {\n                    self.emit(\"entryStat\", entry, props);\n                });\n            } else self.emit(\"entryStat\", entry, props);\n        });\n        entry.on(\"ready\", function EMITCHILD() {\n            // console.error(\"DR emit child\", entry._path)\n            if (self._paused) {\n                // console.error(\"  DR emit child - try again later\")\n                // pause the child, and emit the \"entry\" event once we drain.\n                // console.error(\"DR pausing child entry\")\n                entry.pause(self);\n                return self.once(\"resume\", EMITCHILD);\n            }\n            // skip over sockets.  they can't be piped around properly,\n            // so there's really no sense even acknowledging them.\n            // if someone really wants to see them, they can listen to\n            // the \"socket\" events.\n            if (entry.type === \"Socket\") {\n                self.emit(\"socket\", entry);\n            } else {\n                self.emitEntry(entry);\n            }\n        });\n        var ended = false;\n        entry.on(\"close\", onend);\n        entry.on(\"disown\", onend);\n        function onend() {\n            if (ended) return;\n            ended = true;\n            self.emit(\"childEnd\", entry);\n            self.emit(\"entryEnd\", entry);\n            self._currentEntry = null;\n            if (!self._paused) {\n                self._read();\n            }\n        }\n        // XXX Remove this.  Works in node as of 0.6.2 or so.\n        // Long filenames should not break stuff.\n        entry.on(\"error\", function(er) {\n            if (entry._swallowErrors) {\n                self.warn(er);\n                entry.emit(\"end\");\n                entry.emit(\"close\");\n            } else {\n                self.emit(\"error\", er);\n            }\n        });\n        [\n            \"child\",\n            \"childEnd\",\n            \"warn\"\n        ].forEach(function(ev) {\n            entry.on(ev, self.emit.bind(self, ev));\n        });\n    });\n};\nDirReader.prototype.disown = function(entry) {\n    entry.emit(\"beforeDisown\");\n    entry._disowned = true;\n    entry.parent = entry.root = null;\n    if (entry === this._currentEntry) {\n        this._currentEntry = null;\n    }\n    entry.emit(\"disown\");\n};\nDirReader.prototype.getChildProps = function() {\n    return {\n        depth: this.depth + 1,\n        root: this.root || this,\n        parent: this,\n        follow: this.follow,\n        filter: this.filter,\n        sort: this.props.sort,\n        hardlinks: this.props.hardlinks\n    };\n};\nDirReader.prototype.pause = function(who) {\n    var self = this;\n    if (self._paused) return;\n    who = who || self;\n    self._paused = true;\n    if (self._currentEntry && self._currentEntry.pause) {\n        self._currentEntry.pause(who);\n    }\n    self.emit(\"pause\", who);\n};\nDirReader.prototype.resume = function(who) {\n    var self = this;\n    if (!self._paused) return;\n    who = who || self;\n    self._paused = false;\n    // console.error('DR Emit Resume', self._path)\n    self.emit(\"resume\", who);\n    if (self._paused) {\n        // console.error('DR Re-paused', self._path)\n        return;\n    }\n    if (self._currentEntry) {\n        if (self._currentEntry.resume) self._currentEntry.resume(who);\n    } else self._read();\n};\nDirReader.prototype.emitEntry = function(entry) {\n    this.emit(\"entry\", entry);\n    this.emit(\"child\", entry);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/dir-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/dir-writer.js":
/*!************************************************!*\
  !*** ./node_modules/fstream/lib/dir-writer.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// It is expected that, when .add() returns false, the consumer\n// of the DirWriter will pause until a \"drain\" event occurs. Note\n// that this is *almost always going to be the case*, unless the\n// thing being written is some sort of unsupported type, and thus\n// skipped over.\nmodule.exports = DirWriter;\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(ssr)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar mkdir = __webpack_require__(/*! mkdirp */ \"(ssr)/./node_modules/mkdirp/index.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar collect = __webpack_require__(/*! ./collect.js */ \"(ssr)/./node_modules/fstream/lib/collect.js\");\ninherits(DirWriter, Writer);\nfunction DirWriter(props) {\n    var self = this;\n    if (!(self instanceof DirWriter)) {\n        self.error(\"DirWriter must be called as constructor.\", null, true);\n    }\n    // should already be established as a Directory type\n    if (props.type !== \"Directory\" || !props.Directory) {\n        self.error(\"Non-directory type \" + props.type + \" \" + JSON.stringify(props), null, true);\n    }\n    Writer.call(this, props);\n}\nDirWriter.prototype._create = function() {\n    var self = this;\n    mkdir(self._path, Writer.dirmode, function(er) {\n        if (er) return self.error(er);\n        // ready to start getting entries!\n        self.ready = true;\n        self.emit(\"ready\");\n        self._process();\n    });\n};\n// a DirWriter has an add(entry) method, but its .write() doesn't\n// do anything.  Why a no-op rather than a throw?  Because this\n// leaves open the door for writing directory metadata for\n// gnu/solaris style dumpdirs.\nDirWriter.prototype.write = function() {\n    return true;\n};\nDirWriter.prototype.end = function() {\n    this._ended = true;\n    this._process();\n};\nDirWriter.prototype.add = function(entry) {\n    var self = this;\n    // console.error('\\tadd', entry._path, '->', self._path)\n    collect(entry);\n    if (!self.ready || self._currentEntry) {\n        self._buffer.push(entry);\n        return false;\n    }\n    // create a new writer, and pipe the incoming entry into it.\n    if (self._ended) {\n        return self.error(\"add after end\");\n    }\n    self._buffer.push(entry);\n    self._process();\n    return this._buffer.length === 0;\n};\nDirWriter.prototype._process = function() {\n    var self = this;\n    // console.error('DW Process p=%j', self._processing, self.basename)\n    if (self._processing) return;\n    var entry = self._buffer.shift();\n    if (!entry) {\n        // console.error(\"DW Drain\")\n        self.emit(\"drain\");\n        if (self._ended) self._finish();\n        return;\n    }\n    self._processing = true;\n    // console.error(\"DW Entry\", entry._path)\n    self.emit(\"entry\", entry);\n    // ok, add this entry\n    //\n    // don't allow recursive copying\n    var p = entry;\n    var pp;\n    do {\n        pp = p._path || p.path;\n        if (pp === self.root._path || pp === self._path || pp && pp.indexOf(self._path) === 0) {\n            // console.error('DW Exit (recursive)', entry.basename, self._path)\n            self._processing = false;\n            if (entry._collected) entry.pipe();\n            return self._process();\n        }\n        p = p.parent;\n    }while (p);\n    // console.error(\"DW not recursive\")\n    // chop off the entry's root dir, replace with ours\n    var props = {\n        parent: self,\n        root: self.root || self,\n        type: entry.type,\n        depth: self.depth + 1\n    };\n    pp = entry._path || entry.path || entry.props.path;\n    if (entry.parent) {\n        pp = pp.substr(entry.parent._path.length + 1);\n    }\n    // get rid of any ../../ shenanigans\n    props.path = path.join(self.path, path.join(\"/\", pp));\n    // if i have a filter, the child should inherit it.\n    props.filter = self.filter;\n    // all the rest of the stuff, copy over from the source.\n    Object.keys(entry.props).forEach(function(k) {\n        if (!props.hasOwnProperty(k)) {\n            props[k] = entry.props[k];\n        }\n    });\n    // not sure at this point what kind of writer this is.\n    var child = self._currentChild = new Writer(props);\n    child.on(\"ready\", function() {\n        // console.error(\"DW Child Ready\", child.type, child._path)\n        // console.error(\"  resuming\", entry._path)\n        entry.pipe(child);\n        entry.resume();\n    });\n    // XXX Make this work in node.\n    // Long filenames should not break stuff.\n    child.on(\"error\", function(er) {\n        if (child._swallowErrors) {\n            self.warn(er);\n            child.emit(\"end\");\n            child.emit(\"close\");\n        } else {\n            self.emit(\"error\", er);\n        }\n    });\n    // we fire _end internally *after* end, so that we don't move on\n    // until any \"end\" listeners have had their chance to do stuff.\n    child.on(\"close\", onend);\n    var ended = false;\n    function onend() {\n        if (ended) return;\n        ended = true;\n        // console.error(\"* DW Child end\", child.basename)\n        self._currentChild = null;\n        self._processing = false;\n        self._process();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/dir-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/file-reader.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/file-reader.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Basically just a wrapper around an fs.ReadStream\nmodule.exports = FileReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\nvar EOF = {\n    EOF: true\n};\nvar CLOSE = {\n    CLOSE: true\n};\ninherits(FileReader, Reader);\nfunction FileReader(props) {\n    // console.error(\"    FR create\", props.path, props.size, new Error().stack)\n    var self = this;\n    if (!(self instanceof FileReader)) {\n        throw new Error(\"FileReader must be called as constructor.\");\n    }\n    // should already be established as a File type\n    // XXX Todo: preserve hardlinks by tracking dev+inode+nlink,\n    // with a HardLinkReader class.\n    if (!(props.type === \"Link\" && props.Link || props.type === \"File\" && props.File)) {\n        throw new Error(\"Non-file type \" + props.type);\n    }\n    self._buffer = [];\n    self._bytesEmitted = 0;\n    Reader.call(self, props);\n}\nFileReader.prototype._getStream = function() {\n    var self = this;\n    var stream = self._stream = fs.createReadStream(self._path, self.props);\n    if (self.props.blksize) {\n        stream.bufferSize = self.props.blksize;\n    }\n    stream.on(\"open\", self.emit.bind(self, \"open\"));\n    stream.on(\"data\", function(c) {\n        // console.error('\\t\\t%d %s', c.length, self.basename)\n        self._bytesEmitted += c.length;\n        // no point saving empty chunks\n        if (!c.length) {\n            return;\n        } else if (self._paused || self._buffer.length) {\n            self._buffer.push(c);\n            self._read();\n        } else self.emit(\"data\", c);\n    });\n    stream.on(\"end\", function() {\n        if (self._paused || self._buffer.length) {\n            // console.error('FR Buffering End', self._path)\n            self._buffer.push(EOF);\n            self._read();\n        } else {\n            self.emit(\"end\");\n        }\n        if (self._bytesEmitted !== self.props.size) {\n            self.error(\"Didn't get expected byte count\\n\" + \"expect: \" + self.props.size + \"\\n\" + \"actual: \" + self._bytesEmitted);\n        }\n    });\n    stream.on(\"close\", function() {\n        if (self._paused || self._buffer.length) {\n            // console.error('FR Buffering Close', self._path)\n            self._buffer.push(CLOSE);\n            self._read();\n        } else {\n            // console.error('FR close 1', self._path)\n            self.emit(\"close\");\n        }\n    });\n    stream.on(\"error\", function(e) {\n        self.emit(\"error\", e);\n    });\n    self._read();\n};\nFileReader.prototype._read = function() {\n    var self = this;\n    // console.error('FR _read', self._path)\n    if (self._paused) {\n        // console.error('FR _read paused', self._path)\n        return;\n    }\n    if (!self._stream) {\n        // console.error('FR _getStream calling', self._path)\n        return self._getStream();\n    }\n    // clear out the buffer, if there is one.\n    if (self._buffer.length) {\n        // console.error('FR _read has buffer', self._buffer.length, self._path)\n        var buf = self._buffer;\n        for(var i = 0, l = buf.length; i < l; i++){\n            var c = buf[i];\n            if (c === EOF) {\n                // console.error('FR Read emitting buffered end', self._path)\n                self.emit(\"end\");\n            } else if (c === CLOSE) {\n                // console.error('FR Read emitting buffered close', self._path)\n                self.emit(\"close\");\n            } else {\n                // console.error('FR Read emitting buffered data', self._path)\n                self.emit(\"data\", c);\n            }\n            if (self._paused) {\n                // console.error('FR Read Re-pausing at '+i, self._path)\n                self._buffer = buf.slice(i);\n                return;\n            }\n        }\n        self._buffer.length = 0;\n    }\n// console.error(\"FR _read done\")\n// that's about all there is to it.\n};\nFileReader.prototype.pause = function(who) {\n    var self = this;\n    // console.error('FR Pause', self._path)\n    if (self._paused) return;\n    who = who || self;\n    self._paused = true;\n    if (self._stream) self._stream.pause();\n    self.emit(\"pause\", who);\n};\nFileReader.prototype.resume = function(who) {\n    var self = this;\n    // console.error('FR Resume', self._path)\n    if (!self._paused) return;\n    who = who || self;\n    self.emit(\"resume\", who);\n    self._paused = false;\n    if (self._stream) self._stream.resume();\n    self._read();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/file-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/file-writer.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/file-writer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = FileWriter;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(ssr)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar EOF = {};\ninherits(FileWriter, Writer);\nfunction FileWriter(props) {\n    var self = this;\n    if (!(self instanceof FileWriter)) {\n        throw new Error(\"FileWriter must be called as constructor.\");\n    }\n    // should already be established as a File type\n    if (props.type !== \"File\" || !props.File) {\n        throw new Error(\"Non-file type \" + props.type);\n    }\n    self._buffer = [];\n    self._bytesWritten = 0;\n    Writer.call(this, props);\n}\nFileWriter.prototype._create = function() {\n    var self = this;\n    if (self._stream) return;\n    var so = {};\n    if (self.props.flags) so.flags = self.props.flags;\n    so.mode = Writer.filemode;\n    if (self._old && self._old.blksize) so.bufferSize = self._old.blksize;\n    self._stream = fs.createWriteStream(self._path, so);\n    self._stream.on(\"open\", function() {\n        // console.error(\"FW open\", self._buffer, self._path)\n        self.ready = true;\n        self._buffer.forEach(function(c) {\n            if (c === EOF) self._stream.end();\n            else self._stream.write(c);\n        });\n        self.emit(\"ready\");\n        // give this a kick just in case it needs it.\n        self.emit(\"drain\");\n    });\n    self._stream.on(\"error\", function(er) {\n        self.emit(\"error\", er);\n    });\n    self._stream.on(\"drain\", function() {\n        self.emit(\"drain\");\n    });\n    self._stream.on(\"close\", function() {\n        // console.error('\\n\\nFW Stream Close', self._path, self.size)\n        self._finish();\n    });\n};\nFileWriter.prototype.write = function(c) {\n    var self = this;\n    self._bytesWritten += c.length;\n    if (!self.ready) {\n        if (!Buffer.isBuffer(c) && typeof c !== \"string\") {\n            throw new Error(\"invalid write data\");\n        }\n        self._buffer.push(c);\n        return false;\n    }\n    var ret = self._stream.write(c);\n    // console.error('\\t-- fw wrote, _stream says', ret, self._stream._queue.length)\n    // allow 2 buffered writes, because otherwise there's just too\n    // much stop and go bs.\n    if (ret === false && self._stream._queue) {\n        return self._stream._queue.length <= 2;\n    } else {\n        return ret;\n    }\n};\nFileWriter.prototype.end = function(c) {\n    var self = this;\n    if (c) self.write(c);\n    if (!self.ready) {\n        self._buffer.push(EOF);\n        return false;\n    }\n    return self._stream.end();\n};\nFileWriter.prototype._finish = function() {\n    var self = this;\n    if (typeof self.size === \"number\" && self._bytesWritten !== self.size) {\n        self.error(\"Did not get expected byte count.\\n\" + \"expect: \" + self.size + \"\\n\" + \"actual: \" + self._bytesWritten);\n    }\n    Writer.prototype._finish.call(self);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvZmlsZS13cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsTUFBTSxDQUFDO0FBRVhELFNBQVNKLFlBQVlHO0FBRXJCLFNBQVNILFdBQVlNLEtBQUs7SUFDeEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JQLFVBQVMsR0FBSTtRQUNqQyxNQUFNLElBQUlRLE1BQU07SUFDbEI7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSUYsTUFBTUcsSUFBSSxLQUFLLFVBQVUsQ0FBQ0gsTUFBTUksSUFBSSxFQUFFO1FBQ3hDLE1BQU0sSUFBSUYsTUFBTSxtQkFBbUJGLE1BQU1HLElBQUk7SUFDL0M7SUFFQUYsS0FBS0ksT0FBTyxHQUFHLEVBQUU7SUFDakJKLEtBQUtLLGFBQWEsR0FBRztJQUVyQlQsT0FBT1UsSUFBSSxDQUFDLElBQUksRUFBRVA7QUFDcEI7QUFFQU4sV0FBV2MsU0FBUyxDQUFDQyxPQUFPLEdBQUc7SUFDN0IsSUFBSVIsT0FBTyxJQUFJO0lBQ2YsSUFBSUEsS0FBS1MsT0FBTyxFQUFFO0lBRWxCLElBQUlDLEtBQUssQ0FBQztJQUNWLElBQUlWLEtBQUtELEtBQUssQ0FBQ1ksS0FBSyxFQUFFRCxHQUFHQyxLQUFLLEdBQUdYLEtBQUtELEtBQUssQ0FBQ1ksS0FBSztJQUNqREQsR0FBR0UsSUFBSSxHQUFHaEIsT0FBT2lCLFFBQVE7SUFDekIsSUFBSWIsS0FBS2MsSUFBSSxJQUFJZCxLQUFLYyxJQUFJLENBQUNDLE9BQU8sRUFBRUwsR0FBR00sVUFBVSxHQUFHaEIsS0FBS2MsSUFBSSxDQUFDQyxPQUFPO0lBRXJFZixLQUFLUyxPQUFPLEdBQUdmLEdBQUd1QixpQkFBaUIsQ0FBQ2pCLEtBQUtrQixLQUFLLEVBQUVSO0lBRWhEVixLQUFLUyxPQUFPLENBQUNVLEVBQUUsQ0FBQyxRQUFRO1FBQ3RCLHFEQUFxRDtRQUNyRG5CLEtBQUtvQixLQUFLLEdBQUc7UUFDYnBCLEtBQUtJLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQzlCLElBQUlBLE1BQU14QixLQUFLRSxLQUFLUyxPQUFPLENBQUNjLEdBQUc7aUJBQzFCdkIsS0FBS1MsT0FBTyxDQUFDZSxLQUFLLENBQUNGO1FBQzFCO1FBQ0F0QixLQUFLeUIsSUFBSSxDQUFDO1FBQ1YsNkNBQTZDO1FBQzdDekIsS0FBS3lCLElBQUksQ0FBQztJQUNaO0lBRUF6QixLQUFLUyxPQUFPLENBQUNVLEVBQUUsQ0FBQyxTQUFTLFNBQVVPLEVBQUU7UUFBSTFCLEtBQUt5QixJQUFJLENBQUMsU0FBU0M7SUFBSTtJQUVoRTFCLEtBQUtTLE9BQU8sQ0FBQ1UsRUFBRSxDQUFDLFNBQVM7UUFBY25CLEtBQUt5QixJQUFJLENBQUM7SUFBUztJQUUxRHpCLEtBQUtTLE9BQU8sQ0FBQ1UsRUFBRSxDQUFDLFNBQVM7UUFDdkIsOERBQThEO1FBQzlEbkIsS0FBSzJCLE9BQU87SUFDZDtBQUNGO0FBRUFsQyxXQUFXYyxTQUFTLENBQUNpQixLQUFLLEdBQUcsU0FBVUYsQ0FBQztJQUN0QyxJQUFJdEIsT0FBTyxJQUFJO0lBRWZBLEtBQUtLLGFBQWEsSUFBSWlCLEVBQUVNLE1BQU07SUFFOUIsSUFBSSxDQUFDNUIsS0FBS29CLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQ1MsT0FBT0MsUUFBUSxDQUFDUixNQUFNLE9BQU9BLE1BQU0sVUFBVTtZQUNoRCxNQUFNLElBQUlyQixNQUFNO1FBQ2xCO1FBQ0FELEtBQUtJLE9BQU8sQ0FBQzJCLElBQUksQ0FBQ1Q7UUFDbEIsT0FBTztJQUNUO0lBRUEsSUFBSVUsTUFBTWhDLEtBQUtTLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDRjtJQUM3QixnRkFBZ0Y7SUFFaEYsOERBQThEO0lBQzlELHVCQUF1QjtJQUN2QixJQUFJVSxRQUFRLFNBQVNoQyxLQUFLUyxPQUFPLENBQUN3QixNQUFNLEVBQUU7UUFDeEMsT0FBT2pDLEtBQUtTLE9BQU8sQ0FBQ3dCLE1BQU0sQ0FBQ0wsTUFBTSxJQUFJO0lBQ3ZDLE9BQU87UUFDTCxPQUFPSTtJQUNUO0FBQ0Y7QUFFQXZDLFdBQVdjLFNBQVMsQ0FBQ2dCLEdBQUcsR0FBRyxTQUFVRCxDQUFDO0lBQ3BDLElBQUl0QixPQUFPLElBQUk7SUFFZixJQUFJc0IsR0FBR3RCLEtBQUt3QixLQUFLLENBQUNGO0lBRWxCLElBQUksQ0FBQ3RCLEtBQUtvQixLQUFLLEVBQUU7UUFDZnBCLEtBQUtJLE9BQU8sQ0FBQzJCLElBQUksQ0FBQ2pDO1FBQ2xCLE9BQU87SUFDVDtJQUVBLE9BQU9FLEtBQUtTLE9BQU8sQ0FBQ2MsR0FBRztBQUN6QjtBQUVBOUIsV0FBV2MsU0FBUyxDQUFDb0IsT0FBTyxHQUFHO0lBQzdCLElBQUkzQixPQUFPLElBQUk7SUFDZixJQUFJLE9BQU9BLEtBQUtrQyxJQUFJLEtBQUssWUFBWWxDLEtBQUtLLGFBQWEsS0FBS0wsS0FBS2tDLElBQUksRUFBRTtRQUNyRWxDLEtBQUttQyxLQUFLLENBQ1IsdUNBQ0EsYUFBYW5DLEtBQUtrQyxJQUFJLEdBQUcsT0FDekIsYUFBYWxDLEtBQUtLLGFBQWE7SUFDbkM7SUFDQVQsT0FBT1csU0FBUyxDQUFDb0IsT0FBTyxDQUFDckIsSUFBSSxDQUFDTjtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2ZpbGUtd3JpdGVyLmpzPzUzY2EiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBGaWxlV3JpdGVyXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcbnZhciBXcml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlci5qcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgRU9GID0ge31cblxuaW5oZXJpdHMoRmlsZVdyaXRlciwgV3JpdGVyKVxuXG5mdW5jdGlvbiBGaWxlV3JpdGVyIChwcm9wcykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIEZpbGVXcml0ZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlV3JpdGVyIG11c3QgYmUgY2FsbGVkIGFzIGNvbnN0cnVjdG9yLicpXG4gIH1cblxuICAvLyBzaG91bGQgYWxyZWFkeSBiZSBlc3RhYmxpc2hlZCBhcyBhIEZpbGUgdHlwZVxuICBpZiAocHJvcHMudHlwZSAhPT0gJ0ZpbGUnIHx8ICFwcm9wcy5GaWxlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZmlsZSB0eXBlICcgKyBwcm9wcy50eXBlKVxuICB9XG5cbiAgc2VsZi5fYnVmZmVyID0gW11cbiAgc2VsZi5fYnl0ZXNXcml0dGVuID0gMFxuXG4gIFdyaXRlci5jYWxsKHRoaXMsIHByb3BzKVxufVxuXG5GaWxlV3JpdGVyLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHNlbGYuX3N0cmVhbSkgcmV0dXJuXG5cbiAgdmFyIHNvID0ge31cbiAgaWYgKHNlbGYucHJvcHMuZmxhZ3MpIHNvLmZsYWdzID0gc2VsZi5wcm9wcy5mbGFnc1xuICBzby5tb2RlID0gV3JpdGVyLmZpbGVtb2RlXG4gIGlmIChzZWxmLl9vbGQgJiYgc2VsZi5fb2xkLmJsa3NpemUpIHNvLmJ1ZmZlclNpemUgPSBzZWxmLl9vbGQuYmxrc2l6ZVxuXG4gIHNlbGYuX3N0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHNlbGYuX3BhdGgsIHNvKVxuXG4gIHNlbGYuX3N0cmVhbS5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjb25zb2xlLmVycm9yKFwiRlcgb3BlblwiLCBzZWxmLl9idWZmZXIsIHNlbGYuX3BhdGgpXG4gICAgc2VsZi5yZWFkeSA9IHRydWVcbiAgICBzZWxmLl9idWZmZXIuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMgPT09IEVPRikgc2VsZi5fc3RyZWFtLmVuZCgpXG4gICAgICBlbHNlIHNlbGYuX3N0cmVhbS53cml0ZShjKVxuICAgIH0pXG4gICAgc2VsZi5lbWl0KCdyZWFkeScpXG4gICAgLy8gZ2l2ZSB0aGlzIGEga2ljayBqdXN0IGluIGNhc2UgaXQgbmVlZHMgaXQuXG4gICAgc2VsZi5lbWl0KCdkcmFpbicpXG4gIH0pXG5cbiAgc2VsZi5fc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcikgeyBzZWxmLmVtaXQoJ2Vycm9yJywgZXIpIH0pXG5cbiAgc2VsZi5fc3RyZWFtLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHsgc2VsZi5lbWl0KCdkcmFpbicpIH0pXG5cbiAgc2VsZi5fc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjb25zb2xlLmVycm9yKCdcXG5cXG5GVyBTdHJlYW0gQ2xvc2UnLCBzZWxmLl9wYXRoLCBzZWxmLnNpemUpXG4gICAgc2VsZi5fZmluaXNoKClcbiAgfSlcbn1cblxuRmlsZVdyaXRlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLl9ieXRlc1dyaXR0ZW4gKz0gYy5sZW5ndGhcblxuICBpZiAoIXNlbGYucmVhZHkpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjKSAmJiB0eXBlb2YgYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB3cml0ZSBkYXRhJylcbiAgICB9XG4gICAgc2VsZi5fYnVmZmVyLnB1c2goYylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciByZXQgPSBzZWxmLl9zdHJlYW0ud3JpdGUoYylcbiAgLy8gY29uc29sZS5lcnJvcignXFx0LS0gZncgd3JvdGUsIF9zdHJlYW0gc2F5cycsIHJldCwgc2VsZi5fc3RyZWFtLl9xdWV1ZS5sZW5ndGgpXG5cbiAgLy8gYWxsb3cgMiBidWZmZXJlZCB3cml0ZXMsIGJlY2F1c2Ugb3RoZXJ3aXNlIHRoZXJlJ3MganVzdCB0b29cbiAgLy8gbXVjaCBzdG9wIGFuZCBnbyBicy5cbiAgaWYgKHJldCA9PT0gZmFsc2UgJiYgc2VsZi5fc3RyZWFtLl9xdWV1ZSkge1xuICAgIHJldHVybiBzZWxmLl9zdHJlYW0uX3F1ZXVlLmxlbmd0aCA8PSAyXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbkZpbGVXcml0ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChjKSBzZWxmLndyaXRlKGMpXG5cbiAgaWYgKCFzZWxmLnJlYWR5KSB7XG4gICAgc2VsZi5fYnVmZmVyLnB1c2goRU9GKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHNlbGYuX3N0cmVhbS5lbmQoKVxufVxuXG5GaWxlV3JpdGVyLnByb3RvdHlwZS5fZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHR5cGVvZiBzZWxmLnNpemUgPT09ICdudW1iZXInICYmIHNlbGYuX2J5dGVzV3JpdHRlbiAhPT0gc2VsZi5zaXplKSB7XG4gICAgc2VsZi5lcnJvcihcbiAgICAgICdEaWQgbm90IGdldCBleHBlY3RlZCBieXRlIGNvdW50LlxcbicgK1xuICAgICAgJ2V4cGVjdDogJyArIHNlbGYuc2l6ZSArICdcXG4nICtcbiAgICAgICdhY3R1YWw6ICcgKyBzZWxmLl9ieXRlc1dyaXR0ZW4pXG4gIH1cbiAgV3JpdGVyLnByb3RvdHlwZS5fZmluaXNoLmNhbGwoc2VsZilcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRmlsZVdyaXRlciIsImZzIiwicmVxdWlyZSIsIldyaXRlciIsImluaGVyaXRzIiwiRU9GIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJ0eXBlIiwiRmlsZSIsIl9idWZmZXIiLCJfYnl0ZXNXcml0dGVuIiwiY2FsbCIsInByb3RvdHlwZSIsIl9jcmVhdGUiLCJfc3RyZWFtIiwic28iLCJmbGFncyIsIm1vZGUiLCJmaWxlbW9kZSIsIl9vbGQiLCJibGtzaXplIiwiYnVmZmVyU2l6ZSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiX3BhdGgiLCJvbiIsInJlYWR5IiwiZm9yRWFjaCIsImMiLCJlbmQiLCJ3cml0ZSIsImVtaXQiLCJlciIsIl9maW5pc2giLCJsZW5ndGgiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInB1c2giLCJyZXQiLCJfcXVldWUiLCJzaXplIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/file-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/get-type.js":
/*!**********************************************!*\
  !*** ./node_modules/fstream/lib/get-type.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = getType;\nfunction getType(st) {\n    var types = [\n        \"Directory\",\n        \"File\",\n        \"SymbolicLink\",\n        \"Link\",\n        \"BlockDevice\",\n        \"CharacterDevice\",\n        \"FIFO\",\n        \"Socket\"\n    ];\n    var type;\n    if (st.type && types.indexOf(st.type) !== -1) {\n        st[st.type] = true;\n        return st.type;\n    }\n    for(var i = 0, l = types.length; i < l; i++){\n        type = types[i];\n        var is = st[type] || st[\"is\" + type];\n        if (typeof is === \"function\") is = is.call(st);\n        if (is) {\n            st[type] = true;\n            st.type = type;\n            return type;\n        }\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9nZXQtdHlwZS5qcz9iY2MzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZ2V0VHlwZVxuXG5mdW5jdGlvbiBnZXRUeXBlIChzdCkge1xuICB2YXIgdHlwZXMgPSBbXG4gICAgJ0RpcmVjdG9yeScsXG4gICAgJ0ZpbGUnLFxuICAgICdTeW1ib2xpY0xpbmsnLFxuICAgICdMaW5rJywgLy8gc3BlY2lhbCBmb3IgaGFyZGxpbmtzIGZyb20gdGFyYmFsbHNcbiAgICAnQmxvY2tEZXZpY2UnLFxuICAgICdDaGFyYWN0ZXJEZXZpY2UnLFxuICAgICdGSUZPJyxcbiAgICAnU29ja2V0J1xuICBdXG4gIHZhciB0eXBlXG5cbiAgaWYgKHN0LnR5cGUgJiYgdHlwZXMuaW5kZXhPZihzdC50eXBlKSAhPT0gLTEpIHtcbiAgICBzdFtzdC50eXBlXSA9IHRydWVcbiAgICByZXR1cm4gc3QudHlwZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0eXBlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB0eXBlID0gdHlwZXNbaV1cbiAgICB2YXIgaXMgPSBzdFt0eXBlXSB8fCBzdFsnaXMnICsgdHlwZV1cbiAgICBpZiAodHlwZW9mIGlzID09PSAnZnVuY3Rpb24nKSBpcyA9IGlzLmNhbGwoc3QpXG4gICAgaWYgKGlzKSB7XG4gICAgICBzdFt0eXBlXSA9IHRydWVcbiAgICAgIHN0LnR5cGUgPSB0eXBlXG4gICAgICByZXR1cm4gdHlwZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldFR5cGUiLCJzdCIsInR5cGVzIiwidHlwZSIsImluZGV4T2YiLCJpIiwibCIsImxlbmd0aCIsImlzIiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsUUFBU0MsRUFBRTtJQUNsQixJQUFJQyxRQUFRO1FBQ1Y7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsSUFBSUM7SUFFSixJQUFJRixHQUFHRSxJQUFJLElBQUlELE1BQU1FLE9BQU8sQ0FBQ0gsR0FBR0UsSUFBSSxNQUFNLENBQUMsR0FBRztRQUM1Q0YsRUFBRSxDQUFDQSxHQUFHRSxJQUFJLENBQUMsR0FBRztRQUNkLE9BQU9GLEdBQUdFLElBQUk7SUFDaEI7SUFFQSxJQUFLLElBQUlFLElBQUksR0FBR0MsSUFBSUosTUFBTUssTUFBTSxFQUFFRixJQUFJQyxHQUFHRCxJQUFLO1FBQzVDRixPQUFPRCxLQUFLLENBQUNHLEVBQUU7UUFDZixJQUFJRyxLQUFLUCxFQUFFLENBQUNFLEtBQUssSUFBSUYsRUFBRSxDQUFDLE9BQU9FLEtBQUs7UUFDcEMsSUFBSSxPQUFPSyxPQUFPLFlBQVlBLEtBQUtBLEdBQUdDLElBQUksQ0FBQ1I7UUFDM0MsSUFBSU8sSUFBSTtZQUNOUCxFQUFFLENBQUNFLEtBQUssR0FBRztZQUNYRixHQUFHRSxJQUFJLEdBQUdBO1lBQ1YsT0FBT0E7UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNUIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2dldC10eXBlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/get-type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/link-reader.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/link-reader.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\nmodule.exports = LinkReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\ninherits(LinkReader, Reader);\nfunction LinkReader(props) {\n    var self = this;\n    if (!(self instanceof LinkReader)) {\n        throw new Error(\"LinkReader must be called as constructor.\");\n    }\n    if (!(props.type === \"Link\" && props.Link || props.type === \"SymbolicLink\" && props.SymbolicLink)) {\n        throw new Error(\"Non-link type \" + props.type);\n    }\n    Reader.call(self, props);\n}\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function(currentStat) {\n    var self = this;\n    fs.readlink(self._path, function(er, linkpath) {\n        if (er) return self.error(er);\n        self.linkpath = self.props.linkpath = linkpath;\n        self.emit(\"linkpath\", linkpath);\n        Reader.prototype._stat.call(self, currentStat);\n    });\n};\nLinkReader.prototype._read = function() {\n    var self = this;\n    if (self._paused) return;\n    // basically just a no-op, since we got all the info we need\n    // from the _stat method\n    if (!self._ended) {\n        self.emit(\"end\");\n        self.emit(\"close\");\n        self._ended = true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay1yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBQ2pELEVBQUU7QUFDRix5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELGdDQUFnQztBQUVoQ0EsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxLQUFLQyxtQkFBT0EsQ0FBQztBQUNqQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUN2QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUVyQkMsU0FBU0gsWUFBWUk7QUFFckIsU0FBU0osV0FBWUssS0FBSztJQUN4QixJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJLENBQUVBLENBQUFBLGdCQUFnQk4sVUFBUyxHQUFJO1FBQ2pDLE1BQU0sSUFBSU8sTUFBTTtJQUNsQjtJQUVBLElBQUksQ0FBRSxPQUFPQyxJQUFJLEtBQUssVUFBVUgsTUFBTUksSUFBSSxJQUN2Q0osTUFBTUcsSUFBSSxLQUFLLGtCQUFrQkgsTUFBTUssWUFBWSxHQUFJO1FBQ3hELE1BQU0sSUFBSUgsTUFBTSxtQkFBbUJGLE1BQU1HLElBQUk7SUFDL0M7SUFFQUosT0FBT08sSUFBSSxDQUFDTCxNQUFNRDtBQUNwQjtBQUVBLHlEQUF5RDtBQUN6RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDZCQUE2QjtBQUM3QkwsV0FBV1ksU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBVUMsV0FBVztJQUNoRCxJQUFJUixPQUFPLElBQUk7SUFDZkwsR0FBR2MsUUFBUSxDQUFDVCxLQUFLVSxLQUFLLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxRQUFRO1FBQzVDLElBQUlELElBQUksT0FBT1gsS0FBS2EsS0FBSyxDQUFDRjtRQUMxQlgsS0FBS1ksUUFBUSxHQUFHWixLQUFLRCxLQUFLLENBQUNhLFFBQVEsR0FBR0E7UUFDdENaLEtBQUtjLElBQUksQ0FBQyxZQUFZRjtRQUN0QmQsT0FBT1EsU0FBUyxDQUFDQyxLQUFLLENBQUNGLElBQUksQ0FBQ0wsTUFBTVE7SUFDcEM7QUFDRjtBQUVBZCxXQUFXWSxTQUFTLENBQUNTLEtBQUssR0FBRztJQUMzQixJQUFJZixPQUFPLElBQUk7SUFDZixJQUFJQSxLQUFLZ0IsT0FBTyxFQUFFO0lBQ2xCLDREQUE0RDtJQUM1RCx3QkFBd0I7SUFDeEIsSUFBSSxDQUFDaEIsS0FBS2lCLE1BQU0sRUFBRTtRQUNoQmpCLEtBQUtjLElBQUksQ0FBQztRQUNWZCxLQUFLYyxJQUFJLENBQUM7UUFDVmQsS0FBS2lCLE1BQU0sR0FBRztJQUNoQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay1yZWFkZXIuanM/ZGNiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNpY2FsbHkganVzdCBhIHdyYXBwZXIgYXJvdW5kIGFuIGZzLnJlYWRsaW5rXG4vL1xuLy8gWFhYOiBFbmhhbmNlIHRoaXMgdG8gc3VwcG9ydCB0aGUgTGluayB0eXBlLCBieSBrZWVwaW5nXG4vLyBhIGxvb2t1cCB0YWJsZSBvZiB7PGRlditpbm9kZT46PHBhdGg+fSwgc28gdGhhdCBoYXJkbGlua3Ncbi8vIGNhbiBiZSBwcmVzZXJ2ZWQgaW4gdGFyYmFsbHMuXG5cbm1vZHVsZS5leHBvcnRzID0gTGlua1JlYWRlclxuXG52YXIgZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXIuanMnKVxuXG5pbmhlcml0cyhMaW5rUmVhZGVyLCBSZWFkZXIpXG5cbmZ1bmN0aW9uIExpbmtSZWFkZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgTGlua1JlYWRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpbmtSZWFkZXIgbXVzdCBiZSBjYWxsZWQgYXMgY29uc3RydWN0b3IuJylcbiAgfVxuXG4gIGlmICghKChwcm9wcy50eXBlID09PSAnTGluaycgJiYgcHJvcHMuTGluaykgfHxcbiAgICAocHJvcHMudHlwZSA9PT0gJ1N5bWJvbGljTGluaycgJiYgcHJvcHMuU3ltYm9saWNMaW5rKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1saW5rIHR5cGUgJyArIHByb3BzLnR5cGUpXG4gIH1cblxuICBSZWFkZXIuY2FsbChzZWxmLCBwcm9wcylcbn1cblxuLy8gV2hlbiBwaXBpbmcgYSBMaW5rUmVhZGVyIGludG8gYSBMaW5rV3JpdGVyLCB3ZSBoYXZlIHRvXG4vLyBhbHJlYWR5IGhhdmUgdGhlIGxpbmtwYXRoIHByb3BlcnR5IHNldCwgc28gdGhhdCBoYXMgdG9cbi8vIGhhcHBlbiAqYmVmb3JlKiB0aGUgXCJyZWFkeVwiIGV2ZW50LCB3aGljaCBtZWFucyB3ZSBuZWVkIHRvXG4vLyBvdmVycmlkZSB0aGUgX3N0YXQgbWV0aG9kLlxuTGlua1JlYWRlci5wcm90b3R5cGUuX3N0YXQgPSBmdW5jdGlvbiAoY3VycmVudFN0YXQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGZzLnJlYWRsaW5rKHNlbGYuX3BhdGgsIGZ1bmN0aW9uIChlciwgbGlua3BhdGgpIHtcbiAgICBpZiAoZXIpIHJldHVybiBzZWxmLmVycm9yKGVyKVxuICAgIHNlbGYubGlua3BhdGggPSBzZWxmLnByb3BzLmxpbmtwYXRoID0gbGlua3BhdGhcbiAgICBzZWxmLmVtaXQoJ2xpbmtwYXRoJywgbGlua3BhdGgpXG4gICAgUmVhZGVyLnByb3RvdHlwZS5fc3RhdC5jYWxsKHNlbGYsIGN1cnJlbnRTdGF0KVxuICB9KVxufVxuXG5MaW5rUmVhZGVyLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9wYXVzZWQpIHJldHVyblxuICAvLyBiYXNpY2FsbHkganVzdCBhIG5vLW9wLCBzaW5jZSB3ZSBnb3QgYWxsIHRoZSBpbmZvIHdlIG5lZWRcbiAgLy8gZnJvbSB0aGUgX3N0YXQgbWV0aG9kXG4gIGlmICghc2VsZi5fZW5kZWQpIHtcbiAgICBzZWxmLmVtaXQoJ2VuZCcpXG4gICAgc2VsZi5lbWl0KCdjbG9zZScpXG4gICAgc2VsZi5fZW5kZWQgPSB0cnVlXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTGlua1JlYWRlciIsImZzIiwicmVxdWlyZSIsImluaGVyaXRzIiwiUmVhZGVyIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJ0eXBlIiwiTGluayIsIlN5bWJvbGljTGluayIsImNhbGwiLCJwcm90b3R5cGUiLCJfc3RhdCIsImN1cnJlbnRTdGF0IiwicmVhZGxpbmsiLCJfcGF0aCIsImVyIiwibGlua3BhdGgiLCJlcnJvciIsImVtaXQiLCJfcmVhZCIsIl9wYXVzZWQiLCJfZW5kZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/link-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/link-writer.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/link-writer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = LinkWriter;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(ssr)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar rimraf = __webpack_require__(/*! rimraf */ \"(ssr)/./node_modules/fstream/node_modules/rimraf/rimraf.js\");\ninherits(LinkWriter, Writer);\nfunction LinkWriter(props) {\n    var self = this;\n    if (!(self instanceof LinkWriter)) {\n        throw new Error(\"LinkWriter must be called as constructor.\");\n    }\n    // should already be established as a Link type\n    if (!(props.type === \"Link\" && props.Link || props.type === \"SymbolicLink\" && props.SymbolicLink)) {\n        throw new Error(\"Non-link type \" + props.type);\n    }\n    if (props.linkpath === \"\") props.linkpath = \".\";\n    if (!props.linkpath) {\n        self.error(\"Need linkpath property to create \" + props.type);\n    }\n    Writer.call(this, props);\n}\nLinkWriter.prototype._create = function() {\n    // console.error(\" LW _create\")\n    var self = this;\n    var hard = self.type === \"Link\" || process.platform === \"win32\";\n    var link = hard ? \"link\" : \"symlink\";\n    var lp = hard ? path.resolve(self.dirname, self.linkpath) : self.linkpath;\n    // can only change the link path by clobbering\n    // For hard links, let's just assume that's always the case, since\n    // there's no good way to read them if we don't already know.\n    if (hard) return clobber(self, lp, link);\n    fs.readlink(self._path, function(er, p) {\n        // only skip creation if it's exactly the same link\n        if (p && p === lp) return finish(self);\n        clobber(self, lp, link);\n    });\n};\nfunction clobber(self, lp, link) {\n    rimraf(self._path, function(er) {\n        if (er) return self.error(er);\n        create(self, lp, link);\n    });\n}\nfunction create(self, lp, link) {\n    fs[link](lp, self._path, function(er) {\n        // if this is a hard link, and we're in the process of writing out a\n        // directory, it's very possible that the thing we're linking to\n        // doesn't exist yet (especially if it was intended as a symlink),\n        // so swallow ENOENT errors here and just soldier in.\n        // Additionally, an EPERM or EACCES can happen on win32 if it's trying\n        // to make a link to a directory.  Again, just skip it.\n        // A better solution would be to have fs.symlink be supported on\n        // windows in some nice fashion.\n        if (er) {\n            if ((er.code === \"ENOENT\" || er.code === \"EACCES\" || er.code === \"EPERM\") && process.platform === \"win32\") {\n                self.ready = true;\n                self.emit(\"ready\");\n                self.emit(\"end\");\n                self.emit(\"close\");\n                self.end = self._finish = function() {};\n            } else return self.error(er);\n        }\n        finish(self);\n    });\n}\nfunction finish(self) {\n    self.ready = true;\n    self.emit(\"ready\");\n    if (self._ended && !self._finished) self._finish();\n}\nLinkWriter.prototype.end = function() {\n    // console.error(\"LW finish in end\")\n    this._ended = true;\n    if (this.ready) {\n        this._finished = true;\n        this._finish();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay13cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUksU0FBU0osbUJBQU9BLENBQUM7QUFFckJFLFNBQVNKLFlBQVlHO0FBRXJCLFNBQVNILFdBQVlPLEtBQUs7SUFDeEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JSLFVBQVMsR0FBSTtRQUNqQyxNQUFNLElBQUlTLE1BQU07SUFDbEI7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSSxDQUFFLE9BQU9DLElBQUksS0FBSyxVQUFVSCxNQUFNSSxJQUFJLElBQ3ZDSixNQUFNRyxJQUFJLEtBQUssa0JBQWtCSCxNQUFNSyxZQUFZLEdBQUk7UUFDeEQsTUFBTSxJQUFJSCxNQUFNLG1CQUFtQkYsTUFBTUcsSUFBSTtJQUMvQztJQUVBLElBQUlILE1BQU1NLFFBQVEsS0FBSyxJQUFJTixNQUFNTSxRQUFRLEdBQUc7SUFDNUMsSUFBSSxDQUFDTixNQUFNTSxRQUFRLEVBQUU7UUFDbkJMLEtBQUtNLEtBQUssQ0FBQyxzQ0FBc0NQLE1BQU1HLElBQUk7SUFDN0Q7SUFFQVAsT0FBT1ksSUFBSSxDQUFDLElBQUksRUFBRVI7QUFDcEI7QUFFQVAsV0FBV2dCLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHO0lBQzdCLCtCQUErQjtJQUMvQixJQUFJVCxPQUFPLElBQUk7SUFDZixJQUFJVSxPQUFPVixLQUFLRSxJQUFJLEtBQUssVUFBVVMsUUFBUUMsUUFBUSxLQUFLO0lBQ3hELElBQUlDLE9BQU9ILE9BQU8sU0FBUztJQUMzQixJQUFJSSxLQUFLSixPQUFPYixLQUFLa0IsT0FBTyxDQUFDZixLQUFLZ0IsT0FBTyxFQUFFaEIsS0FBS0ssUUFBUSxJQUFJTCxLQUFLSyxRQUFRO0lBRXpFLDhDQUE4QztJQUM5QyxrRUFBa0U7SUFDbEUsNkRBQTZEO0lBQzdELElBQUlLLE1BQU0sT0FBT08sUUFBUWpCLE1BQU1jLElBQUlEO0lBRW5DcEIsR0FBR3lCLFFBQVEsQ0FBQ2xCLEtBQUttQixLQUFLLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxDQUFDO1FBQ3JDLG1EQUFtRDtRQUNuRCxJQUFJQSxLQUFLQSxNQUFNUCxJQUFJLE9BQU9RLE9BQU90QjtRQUNqQ2lCLFFBQVFqQixNQUFNYyxJQUFJRDtJQUNwQjtBQUNGO0FBRUEsU0FBU0ksUUFBU2pCLElBQUksRUFBRWMsRUFBRSxFQUFFRCxJQUFJO0lBQzlCZixPQUFPRSxLQUFLbUIsS0FBSyxFQUFFLFNBQVVDLEVBQUU7UUFDN0IsSUFBSUEsSUFBSSxPQUFPcEIsS0FBS00sS0FBSyxDQUFDYztRQUMxQkcsT0FBT3ZCLE1BQU1jLElBQUlEO0lBQ25CO0FBQ0Y7QUFFQSxTQUFTVSxPQUFRdkIsSUFBSSxFQUFFYyxFQUFFLEVBQUVELElBQUk7SUFDN0JwQixFQUFFLENBQUNvQixLQUFLLENBQUNDLElBQUlkLEtBQUttQixLQUFLLEVBQUUsU0FBVUMsRUFBRTtRQUNuQyxvRUFBb0U7UUFDcEUsZ0VBQWdFO1FBQ2hFLGtFQUFrRTtRQUNsRSxxREFBcUQ7UUFDckQsc0VBQXNFO1FBQ3RFLHVEQUF1RDtRQUN2RCxnRUFBZ0U7UUFDaEUsZ0NBQWdDO1FBQ2hDLElBQUlBLElBQUk7WUFDTixJQUFJLENBQUNBLEdBQUdJLElBQUksS0FBSyxZQUNmSixHQUFHSSxJQUFJLEtBQUssWUFDWkosR0FBR0ksSUFBSSxLQUFLLE9BQU0sS0FBTWIsUUFBUUMsUUFBUSxLQUFLLFNBQVM7Z0JBQ3REWixLQUFLeUIsS0FBSyxHQUFHO2dCQUNiekIsS0FBSzBCLElBQUksQ0FBQztnQkFDVjFCLEtBQUswQixJQUFJLENBQUM7Z0JBQ1YxQixLQUFLMEIsSUFBSSxDQUFDO2dCQUNWMUIsS0FBSzJCLEdBQUcsR0FBRzNCLEtBQUs0QixPQUFPLEdBQUcsWUFBYTtZQUN6QyxPQUFPLE9BQU81QixLQUFLTSxLQUFLLENBQUNjO1FBQzNCO1FBQ0FFLE9BQU90QjtJQUNUO0FBQ0Y7QUFFQSxTQUFTc0IsT0FBUXRCLElBQUk7SUFDbkJBLEtBQUt5QixLQUFLLEdBQUc7SUFDYnpCLEtBQUswQixJQUFJLENBQUM7SUFDVixJQUFJMUIsS0FBSzZCLE1BQU0sSUFBSSxDQUFDN0IsS0FBSzhCLFNBQVMsRUFBRTlCLEtBQUs0QixPQUFPO0FBQ2xEO0FBRUFwQyxXQUFXZ0IsU0FBUyxDQUFDbUIsR0FBRyxHQUFHO0lBQ3pCLG9DQUFvQztJQUNwQyxJQUFJLENBQUNFLE1BQU0sR0FBRztJQUNkLElBQUksSUFBSSxDQUFDSixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUNGLE9BQU87SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay13cml0ZXIuanM/YTY1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IExpbmtXcml0ZXJcblxudmFyIGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxudmFyIFdyaXRlciA9IHJlcXVpcmUoJy4vd3JpdGVyLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG52YXIgcmltcmFmID0gcmVxdWlyZSgncmltcmFmJylcblxuaW5oZXJpdHMoTGlua1dyaXRlciwgV3JpdGVyKVxuXG5mdW5jdGlvbiBMaW5rV3JpdGVyIChwcm9wcykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIExpbmtXcml0ZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMaW5rV3JpdGVyIG11c3QgYmUgY2FsbGVkIGFzIGNvbnN0cnVjdG9yLicpXG4gIH1cblxuICAvLyBzaG91bGQgYWxyZWFkeSBiZSBlc3RhYmxpc2hlZCBhcyBhIExpbmsgdHlwZVxuICBpZiAoISgocHJvcHMudHlwZSA9PT0gJ0xpbmsnICYmIHByb3BzLkxpbmspIHx8XG4gICAgKHByb3BzLnR5cGUgPT09ICdTeW1ib2xpY0xpbmsnICYmIHByb3BzLlN5bWJvbGljTGluaykpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tbGluayB0eXBlICcgKyBwcm9wcy50eXBlKVxuICB9XG5cbiAgaWYgKHByb3BzLmxpbmtwYXRoID09PSAnJykgcHJvcHMubGlua3BhdGggPSAnLidcbiAgaWYgKCFwcm9wcy5saW5rcGF0aCkge1xuICAgIHNlbGYuZXJyb3IoJ05lZWQgbGlua3BhdGggcHJvcGVydHkgdG8gY3JlYXRlICcgKyBwcm9wcy50eXBlKVxuICB9XG5cbiAgV3JpdGVyLmNhbGwodGhpcywgcHJvcHMpXG59XG5cbkxpbmtXcml0ZXIucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNvbnNvbGUuZXJyb3IoXCIgTFcgX2NyZWF0ZVwiKVxuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGhhcmQgPSBzZWxmLnR5cGUgPT09ICdMaW5rJyB8fCBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gIHZhciBsaW5rID0gaGFyZCA/ICdsaW5rJyA6ICdzeW1saW5rJ1xuICB2YXIgbHAgPSBoYXJkID8gcGF0aC5yZXNvbHZlKHNlbGYuZGlybmFtZSwgc2VsZi5saW5rcGF0aCkgOiBzZWxmLmxpbmtwYXRoXG5cbiAgLy8gY2FuIG9ubHkgY2hhbmdlIHRoZSBsaW5rIHBhdGggYnkgY2xvYmJlcmluZ1xuICAvLyBGb3IgaGFyZCBsaW5rcywgbGV0J3MganVzdCBhc3N1bWUgdGhhdCdzIGFsd2F5cyB0aGUgY2FzZSwgc2luY2VcbiAgLy8gdGhlcmUncyBubyBnb29kIHdheSB0byByZWFkIHRoZW0gaWYgd2UgZG9uJ3QgYWxyZWFkeSBrbm93LlxuICBpZiAoaGFyZCkgcmV0dXJuIGNsb2JiZXIoc2VsZiwgbHAsIGxpbmspXG5cbiAgZnMucmVhZGxpbmsoc2VsZi5fcGF0aCwgZnVuY3Rpb24gKGVyLCBwKSB7XG4gICAgLy8gb25seSBza2lwIGNyZWF0aW9uIGlmIGl0J3MgZXhhY3RseSB0aGUgc2FtZSBsaW5rXG4gICAgaWYgKHAgJiYgcCA9PT0gbHApIHJldHVybiBmaW5pc2goc2VsZilcbiAgICBjbG9iYmVyKHNlbGYsIGxwLCBsaW5rKVxuICB9KVxufVxuXG5mdW5jdGlvbiBjbG9iYmVyIChzZWxmLCBscCwgbGluaykge1xuICByaW1yYWYoc2VsZi5fcGF0aCwgZnVuY3Rpb24gKGVyKSB7XG4gICAgaWYgKGVyKSByZXR1cm4gc2VsZi5lcnJvcihlcilcbiAgICBjcmVhdGUoc2VsZiwgbHAsIGxpbmspXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSAoc2VsZiwgbHAsIGxpbmspIHtcbiAgZnNbbGlua10obHAsIHNlbGYuX3BhdGgsIGZ1bmN0aW9uIChlcikge1xuICAgIC8vIGlmIHRoaXMgaXMgYSBoYXJkIGxpbmssIGFuZCB3ZSdyZSBpbiB0aGUgcHJvY2VzcyBvZiB3cml0aW5nIG91dCBhXG4gICAgLy8gZGlyZWN0b3J5LCBpdCdzIHZlcnkgcG9zc2libGUgdGhhdCB0aGUgdGhpbmcgd2UncmUgbGlua2luZyB0b1xuICAgIC8vIGRvZXNuJ3QgZXhpc3QgeWV0IChlc3BlY2lhbGx5IGlmIGl0IHdhcyBpbnRlbmRlZCBhcyBhIHN5bWxpbmspLFxuICAgIC8vIHNvIHN3YWxsb3cgRU5PRU5UIGVycm9ycyBoZXJlIGFuZCBqdXN0IHNvbGRpZXIgaW4uXG4gICAgLy8gQWRkaXRpb25hbGx5LCBhbiBFUEVSTSBvciBFQUNDRVMgY2FuIGhhcHBlbiBvbiB3aW4zMiBpZiBpdCdzIHRyeWluZ1xuICAgIC8vIHRvIG1ha2UgYSBsaW5rIHRvIGEgZGlyZWN0b3J5LiAgQWdhaW4sIGp1c3Qgc2tpcCBpdC5cbiAgICAvLyBBIGJldHRlciBzb2x1dGlvbiB3b3VsZCBiZSB0byBoYXZlIGZzLnN5bWxpbmsgYmUgc3VwcG9ydGVkIG9uXG4gICAgLy8gd2luZG93cyBpbiBzb21lIG5pY2UgZmFzaGlvbi5cbiAgICBpZiAoZXIpIHtcbiAgICAgIGlmICgoZXIuY29kZSA9PT0gJ0VOT0VOVCcgfHxcbiAgICAgICAgZXIuY29kZSA9PT0gJ0VBQ0NFUycgfHxcbiAgICAgICAgZXIuY29kZSA9PT0gJ0VQRVJNJykgJiYgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgICBzZWxmLnJlYWR5ID0gdHJ1ZVxuICAgICAgICBzZWxmLmVtaXQoJ3JlYWR5JylcbiAgICAgICAgc2VsZi5lbWl0KCdlbmQnKVxuICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJylcbiAgICAgICAgc2VsZi5lbmQgPSBzZWxmLl9maW5pc2ggPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgfSBlbHNlIHJldHVybiBzZWxmLmVycm9yKGVyKVxuICAgIH1cbiAgICBmaW5pc2goc2VsZilcbiAgfSlcbn1cblxuZnVuY3Rpb24gZmluaXNoIChzZWxmKSB7XG4gIHNlbGYucmVhZHkgPSB0cnVlXG4gIHNlbGYuZW1pdCgncmVhZHknKVxuICBpZiAoc2VsZi5fZW5kZWQgJiYgIXNlbGYuX2ZpbmlzaGVkKSBzZWxmLl9maW5pc2goKVxufVxuXG5MaW5rV3JpdGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNvbnNvbGUuZXJyb3IoXCJMVyBmaW5pc2ggaW4gZW5kXCIpXG4gIHRoaXMuX2VuZGVkID0gdHJ1ZVxuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZVxuICAgIHRoaXMuX2ZpbmlzaCgpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTGlua1dyaXRlciIsImZzIiwicmVxdWlyZSIsIldyaXRlciIsImluaGVyaXRzIiwicGF0aCIsInJpbXJhZiIsInByb3BzIiwic2VsZiIsIkVycm9yIiwidHlwZSIsIkxpbmsiLCJTeW1ib2xpY0xpbmsiLCJsaW5rcGF0aCIsImVycm9yIiwiY2FsbCIsInByb3RvdHlwZSIsIl9jcmVhdGUiLCJoYXJkIiwicHJvY2VzcyIsInBsYXRmb3JtIiwibGluayIsImxwIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJjbG9iYmVyIiwicmVhZGxpbmsiLCJfcGF0aCIsImVyIiwicCIsImZpbmlzaCIsImNyZWF0ZSIsImNvZGUiLCJyZWFkeSIsImVtaXQiLCJlbmQiLCJfZmluaXNoIiwiX2VuZGVkIiwiX2ZpbmlzaGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/link-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/proxy-reader.js":
/*!**************************************************!*\
  !*** ./node_modules/fstream/lib/proxy-reader.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A reader for when we don't yet know what kind of thing\n// the thing is.\nmodule.exports = ProxyReader;\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(ssr)/./node_modules/fstream/lib/get-type.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\ninherits(ProxyReader, Reader);\nfunction ProxyReader(props) {\n    var self = this;\n    if (!(self instanceof ProxyReader)) {\n        throw new Error(\"ProxyReader must be called as constructor.\");\n    }\n    self.props = props;\n    self._buffer = [];\n    self.ready = false;\n    Reader.call(self, props);\n}\nProxyReader.prototype._stat = function() {\n    var self = this;\n    var props = self.props;\n    // stat the thing to see what the proxy should be.\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    fs[stat](props.path, function(er, current) {\n        var type;\n        if (er || !current) {\n            type = \"File\";\n        } else {\n            type = getType(current);\n        }\n        props[type] = true;\n        props.type = self.type = type;\n        self._old = current;\n        self._addProxy(Reader(props, current));\n    });\n};\nProxyReader.prototype._addProxy = function(proxy) {\n    var self = this;\n    if (self._proxyTarget) {\n        return self.error(\"proxy already set\");\n    }\n    self._proxyTarget = proxy;\n    proxy._proxy = self;\n    [\n        \"error\",\n        \"data\",\n        \"end\",\n        \"close\",\n        \"linkpath\",\n        \"entry\",\n        \"entryEnd\",\n        \"child\",\n        \"childEnd\",\n        \"warn\",\n        \"stat\"\n    ].forEach(function(ev) {\n        // console.error('~~ proxy event', ev, self.path)\n        proxy.on(ev, self.emit.bind(self, ev));\n    });\n    self.emit(\"proxy\", proxy);\n    proxy.on(\"ready\", function() {\n        // console.error(\"~~ proxy is ready!\", self.path)\n        self.ready = true;\n        self.emit(\"ready\");\n    });\n    var calls = self._buffer;\n    self._buffer.length = 0;\n    calls.forEach(function(c) {\n        proxy[c[0]].apply(proxy, c[1]);\n    });\n};\nProxyReader.prototype.pause = function() {\n    return this._proxyTarget ? this._proxyTarget.pause() : false;\n};\nProxyReader.prototype.resume = function() {\n    return this._proxyTarget ? this._proxyTarget.resume() : false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvcHJveHktcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCxnQkFBZ0I7QUFFaEJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsVUFBVUQsbUJBQU9BLENBQUM7QUFDdEIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsS0FBS0gsbUJBQU9BLENBQUM7QUFFakJFLFNBQVNKLGFBQWFDO0FBRXRCLFNBQVNELFlBQWFNLEtBQUs7SUFDekIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JQLFdBQVUsR0FBSTtRQUNsQyxNQUFNLElBQUlRLE1BQU07SUFDbEI7SUFFQUQsS0FBS0QsS0FBSyxHQUFHQTtJQUNiQyxLQUFLRSxPQUFPLEdBQUcsRUFBRTtJQUNqQkYsS0FBS0csS0FBSyxHQUFHO0lBRWJULE9BQU9VLElBQUksQ0FBQ0osTUFBTUQ7QUFDcEI7QUFFQU4sWUFBWVksU0FBUyxDQUFDQyxLQUFLLEdBQUc7SUFDNUIsSUFBSU4sT0FBTyxJQUFJO0lBQ2YsSUFBSUQsUUFBUUMsS0FBS0QsS0FBSztJQUN0QixrREFBa0Q7SUFDbEQsSUFBSVEsT0FBT1IsTUFBTVMsTUFBTSxHQUFHLFNBQVM7SUFFbkNWLEVBQUUsQ0FBQ1MsS0FBSyxDQUFDUixNQUFNVSxJQUFJLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxPQUFPO1FBQ3hDLElBQUlDO1FBQ0osSUFBSUYsTUFBTSxDQUFDQyxTQUFTO1lBQ2xCQyxPQUFPO1FBQ1QsT0FBTztZQUNMQSxPQUFPaEIsUUFBUWU7UUFDakI7UUFFQVosS0FBSyxDQUFDYSxLQUFLLEdBQUc7UUFDZGIsTUFBTWEsSUFBSSxHQUFHWixLQUFLWSxJQUFJLEdBQUdBO1FBRXpCWixLQUFLYSxJQUFJLEdBQUdGO1FBQ1pYLEtBQUtjLFNBQVMsQ0FBQ3BCLE9BQU9LLE9BQU9ZO0lBQy9CO0FBQ0Y7QUFFQWxCLFlBQVlZLFNBQVMsQ0FBQ1MsU0FBUyxHQUFHLFNBQVVDLEtBQUs7SUFDL0MsSUFBSWYsT0FBTyxJQUFJO0lBQ2YsSUFBSUEsS0FBS2dCLFlBQVksRUFBRTtRQUNyQixPQUFPaEIsS0FBS2lCLEtBQUssQ0FBQztJQUNwQjtJQUVBakIsS0FBS2dCLFlBQVksR0FBR0Q7SUFDcEJBLE1BQU1HLE1BQU0sR0FBR2xCO0lBRWQ7UUFDQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0QsQ0FBQ21CLE9BQU8sQ0FBQyxTQUFVQyxFQUFFO1FBQ3BCLGlEQUFpRDtRQUNqREwsTUFBTU0sRUFBRSxDQUFDRCxJQUFJcEIsS0FBS3NCLElBQUksQ0FBQ0MsSUFBSSxDQUFDdkIsTUFBTW9CO0lBQ3BDO0lBRUFwQixLQUFLc0IsSUFBSSxDQUFDLFNBQVNQO0lBRW5CQSxNQUFNTSxFQUFFLENBQUMsU0FBUztRQUNoQixpREFBaUQ7UUFDakRyQixLQUFLRyxLQUFLLEdBQUc7UUFDYkgsS0FBS3NCLElBQUksQ0FBQztJQUNaO0lBRUEsSUFBSUUsUUFBUXhCLEtBQUtFLE9BQU87SUFDeEJGLEtBQUtFLE9BQU8sQ0FBQ3VCLE1BQU0sR0FBRztJQUN0QkQsTUFBTUwsT0FBTyxDQUFDLFNBQVVPLENBQUM7UUFDdkJYLEtBQUssQ0FBQ1csQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDQyxLQUFLLENBQUNaLE9BQU9XLENBQUMsQ0FBQyxFQUFFO0lBQy9CO0FBQ0Y7QUFFQWpDLFlBQVlZLFNBQVMsQ0FBQ3VCLEtBQUssR0FBRztJQUM1QixPQUFPLElBQUksQ0FBQ1osWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDWSxLQUFLLEtBQUs7QUFDekQ7QUFFQW5DLFlBQVlZLFNBQVMsQ0FBQ3dCLE1BQU0sR0FBRztJQUM3QixPQUFPLElBQUksQ0FBQ2IsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDYSxNQUFNLEtBQUs7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9wcm94eS1yZWFkZXIuanM/NTA1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIHJlYWRlciBmb3Igd2hlbiB3ZSBkb24ndCB5ZXQga25vdyB3aGF0IGtpbmQgb2YgdGhpbmdcbi8vIHRoZSB0aGluZyBpcy5cblxubW9kdWxlLmV4cG9ydHMgPSBQcm94eVJlYWRlclxuXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXIuanMnKVxudmFyIGdldFR5cGUgPSByZXF1aXJlKCcuL2dldC10eXBlLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcblxuaW5oZXJpdHMoUHJveHlSZWFkZXIsIFJlYWRlcilcblxuZnVuY3Rpb24gUHJveHlSZWFkZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgUHJveHlSZWFkZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcm94eVJlYWRlciBtdXN0IGJlIGNhbGxlZCBhcyBjb25zdHJ1Y3Rvci4nKVxuICB9XG5cbiAgc2VsZi5wcm9wcyA9IHByb3BzXG4gIHNlbGYuX2J1ZmZlciA9IFtdXG4gIHNlbGYucmVhZHkgPSBmYWxzZVxuXG4gIFJlYWRlci5jYWxsKHNlbGYsIHByb3BzKVxufVxuXG5Qcm94eVJlYWRlci5wcm90b3R5cGUuX3N0YXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcHJvcHMgPSBzZWxmLnByb3BzXG4gIC8vIHN0YXQgdGhlIHRoaW5nIHRvIHNlZSB3aGF0IHRoZSBwcm94eSBzaG91bGQgYmUuXG4gIHZhciBzdGF0ID0gcHJvcHMuZm9sbG93ID8gJ3N0YXQnIDogJ2xzdGF0J1xuXG4gIGZzW3N0YXRdKHByb3BzLnBhdGgsIGZ1bmN0aW9uIChlciwgY3VycmVudCkge1xuICAgIHZhciB0eXBlXG4gICAgaWYgKGVyIHx8ICFjdXJyZW50KSB7XG4gICAgICB0eXBlID0gJ0ZpbGUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBnZXRUeXBlKGN1cnJlbnQpXG4gICAgfVxuXG4gICAgcHJvcHNbdHlwZV0gPSB0cnVlXG4gICAgcHJvcHMudHlwZSA9IHNlbGYudHlwZSA9IHR5cGVcblxuICAgIHNlbGYuX29sZCA9IGN1cnJlbnRcbiAgICBzZWxmLl9hZGRQcm94eShSZWFkZXIocHJvcHMsIGN1cnJlbnQpKVxuICB9KVxufVxuXG5Qcm94eVJlYWRlci5wcm90b3R5cGUuX2FkZFByb3h5ID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fcHJveHlUYXJnZXQpIHtcbiAgICByZXR1cm4gc2VsZi5lcnJvcigncHJveHkgYWxyZWFkeSBzZXQnKVxuICB9XG5cbiAgc2VsZi5fcHJveHlUYXJnZXQgPSBwcm94eVxuICBwcm94eS5fcHJveHkgPSBzZWxmXG5cbiAgO1tcbiAgICAnZXJyb3InLFxuICAgICdkYXRhJyxcbiAgICAnZW5kJyxcbiAgICAnY2xvc2UnLFxuICAgICdsaW5rcGF0aCcsXG4gICAgJ2VudHJ5JyxcbiAgICAnZW50cnlFbmQnLFxuICAgICdjaGlsZCcsXG4gICAgJ2NoaWxkRW5kJyxcbiAgICAnd2FybicsXG4gICAgJ3N0YXQnXG4gIF0uZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICAvLyBjb25zb2xlLmVycm9yKCd+fiBwcm94eSBldmVudCcsIGV2LCBzZWxmLnBhdGgpXG4gICAgcHJveHkub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSlcbiAgfSlcblxuICBzZWxmLmVtaXQoJ3Byb3h5JywgcHJveHkpXG5cbiAgcHJveHkub24oJ3JlYWR5JywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJ+fiBwcm94eSBpcyByZWFkeSFcIiwgc2VsZi5wYXRoKVxuICAgIHNlbGYucmVhZHkgPSB0cnVlXG4gICAgc2VsZi5lbWl0KCdyZWFkeScpXG4gIH0pXG5cbiAgdmFyIGNhbGxzID0gc2VsZi5fYnVmZmVyXG4gIHNlbGYuX2J1ZmZlci5sZW5ndGggPSAwXG4gIGNhbGxzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICBwcm94eVtjWzBdXS5hcHBseShwcm94eSwgY1sxXSlcbiAgfSlcbn1cblxuUHJveHlSZWFkZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcHJveHlUYXJnZXQgPyB0aGlzLl9wcm94eVRhcmdldC5wYXVzZSgpIDogZmFsc2Vcbn1cblxuUHJveHlSZWFkZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3Byb3h5VGFyZ2V0ID8gdGhpcy5fcHJveHlUYXJnZXQucmVzdW1lKCkgOiBmYWxzZVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQcm94eVJlYWRlciIsIlJlYWRlciIsInJlcXVpcmUiLCJnZXRUeXBlIiwiaW5oZXJpdHMiLCJmcyIsInByb3BzIiwic2VsZiIsIkVycm9yIiwiX2J1ZmZlciIsInJlYWR5IiwiY2FsbCIsInByb3RvdHlwZSIsIl9zdGF0Iiwic3RhdCIsImZvbGxvdyIsInBhdGgiLCJlciIsImN1cnJlbnQiLCJ0eXBlIiwiX29sZCIsIl9hZGRQcm94eSIsInByb3h5IiwiX3Byb3h5VGFyZ2V0IiwiZXJyb3IiLCJfcHJveHkiLCJmb3JFYWNoIiwiZXYiLCJvbiIsImVtaXQiLCJiaW5kIiwiY2FsbHMiLCJsZW5ndGgiLCJjIiwiYXBwbHkiLCJwYXVzZSIsInJlc3VtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/proxy-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/proxy-writer.js":
/*!**************************************************!*\
  !*** ./node_modules/fstream/lib/proxy-writer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A writer for when we don't know what kind of thing\n// the thing is.  That is, it's not explicitly set,\n// so we're going to make it whatever the thing already\n// is, or \"File\"\n//\n// Until then, collect all events.\nmodule.exports = ProxyWriter;\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(ssr)/./node_modules/fstream/lib/writer.js\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(ssr)/./node_modules/fstream/lib/get-type.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar collect = __webpack_require__(/*! ./collect.js */ \"(ssr)/./node_modules/fstream/lib/collect.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\ninherits(ProxyWriter, Writer);\nfunction ProxyWriter(props) {\n    var self = this;\n    if (!(self instanceof ProxyWriter)) {\n        throw new Error(\"ProxyWriter must be called as constructor.\");\n    }\n    self.props = props;\n    self._needDrain = false;\n    Writer.call(self, props);\n}\nProxyWriter.prototype._stat = function() {\n    var self = this;\n    var props = self.props;\n    // stat the thing to see what the proxy should be.\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    fs[stat](props.path, function(er, current) {\n        var type;\n        if (er || !current) {\n            type = \"File\";\n        } else {\n            type = getType(current);\n        }\n        props[type] = true;\n        props.type = self.type = type;\n        self._old = current;\n        self._addProxy(Writer(props, current));\n    });\n};\nProxyWriter.prototype._addProxy = function(proxy) {\n    // console.error(\"~~ set proxy\", this.path)\n    var self = this;\n    if (self._proxy) {\n        return self.error(\"proxy already set\");\n    }\n    self._proxy = proxy;\n    [\n        \"ready\",\n        \"error\",\n        \"close\",\n        \"pipe\",\n        \"drain\",\n        \"warn\"\n    ].forEach(function(ev) {\n        proxy.on(ev, self.emit.bind(self, ev));\n    });\n    self.emit(\"proxy\", proxy);\n    var calls = self._buffer;\n    calls.forEach(function(c) {\n        // console.error(\"~~ ~~ proxy buffered call\", c[0], c[1])\n        proxy[c[0]].apply(proxy, c[1]);\n    });\n    self._buffer.length = 0;\n    if (self._needsDrain) self.emit(\"drain\");\n};\nProxyWriter.prototype.add = function(entry) {\n    // console.error(\"~~ proxy add\")\n    collect(entry);\n    if (!this._proxy) {\n        this._buffer.push([\n            \"add\",\n            [\n                entry\n            ]\n        ]);\n        this._needDrain = true;\n        return false;\n    }\n    return this._proxy.add(entry);\n};\nProxyWriter.prototype.write = function(c) {\n    // console.error('~~ proxy write')\n    if (!this._proxy) {\n        this._buffer.push([\n            \"write\",\n            [\n                c\n            ]\n        ]);\n        this._needDrain = true;\n        return false;\n    }\n    return this._proxy.write(c);\n};\nProxyWriter.prototype.end = function(c) {\n    // console.error('~~ proxy end')\n    if (!this._proxy) {\n        this._buffer.push([\n            \"end\",\n            [\n                c\n            ]\n        ]);\n        return false;\n    }\n    return this._proxy.end(c);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvcHJveHktd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUNyRCxtREFBbUQ7QUFDbkQsdURBQXVEO0FBQ3ZELGdCQUFnQjtBQUNoQixFQUFFO0FBQ0Ysa0NBQWtDO0FBRWxDQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFVBQVVILG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlJLEtBQUtKLG1CQUFPQSxDQUFDO0FBRWpCRSxTQUFTSixhQUFhQztBQUV0QixTQUFTRCxZQUFhTyxLQUFLO0lBQ3pCLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCUixXQUFVLEdBQUk7UUFDbEMsTUFBTSxJQUFJUyxNQUFNO0lBQ2xCO0lBRUFELEtBQUtELEtBQUssR0FBR0E7SUFDYkMsS0FBS0UsVUFBVSxHQUFHO0lBRWxCVCxPQUFPVSxJQUFJLENBQUNILE1BQU1EO0FBQ3BCO0FBRUFQLFlBQVlZLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO0lBQzVCLElBQUlMLE9BQU8sSUFBSTtJQUNmLElBQUlELFFBQVFDLEtBQUtELEtBQUs7SUFDdEIsa0RBQWtEO0lBQ2xELElBQUlPLE9BQU9QLE1BQU1RLE1BQU0sR0FBRyxTQUFTO0lBRW5DVCxFQUFFLENBQUNRLEtBQUssQ0FBQ1AsTUFBTVMsSUFBSSxFQUFFLFNBQVVDLEVBQUUsRUFBRUMsT0FBTztRQUN4QyxJQUFJQztRQUNKLElBQUlGLE1BQU0sQ0FBQ0MsU0FBUztZQUNsQkMsT0FBTztRQUNULE9BQU87WUFDTEEsT0FBT2hCLFFBQVFlO1FBQ2pCO1FBRUFYLEtBQUssQ0FBQ1ksS0FBSyxHQUFHO1FBQ2RaLE1BQU1ZLElBQUksR0FBR1gsS0FBS1csSUFBSSxHQUFHQTtRQUV6QlgsS0FBS1ksSUFBSSxHQUFHRjtRQUNaVixLQUFLYSxTQUFTLENBQUNwQixPQUFPTSxPQUFPVztJQUMvQjtBQUNGO0FBRUFsQixZQUFZWSxTQUFTLENBQUNTLFNBQVMsR0FBRyxTQUFVQyxLQUFLO0lBQy9DLDJDQUEyQztJQUMzQyxJQUFJZCxPQUFPLElBQUk7SUFDZixJQUFJQSxLQUFLZSxNQUFNLEVBQUU7UUFDZixPQUFPZixLQUFLZ0IsS0FBSyxDQUFDO0lBQ3BCO0lBRUFoQixLQUFLZSxNQUFNLEdBQUdEO0lBQ2I7UUFDQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRCxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUNwQkosTUFBTUssRUFBRSxDQUFDRCxJQUFJbEIsS0FBS29CLElBQUksQ0FBQ0MsSUFBSSxDQUFDckIsTUFBTWtCO0lBQ3BDO0lBRUFsQixLQUFLb0IsSUFBSSxDQUFDLFNBQVNOO0lBRW5CLElBQUlRLFFBQVF0QixLQUFLdUIsT0FBTztJQUN4QkQsTUFBTUwsT0FBTyxDQUFDLFNBQVVPLENBQUM7UUFDdkIseURBQXlEO1FBQ3pEVixLQUFLLENBQUNVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFDWCxPQUFPVSxDQUFDLENBQUMsRUFBRTtJQUMvQjtJQUNBeEIsS0FBS3VCLE9BQU8sQ0FBQ0csTUFBTSxHQUFHO0lBQ3RCLElBQUkxQixLQUFLMkIsV0FBVyxFQUFFM0IsS0FBS29CLElBQUksQ0FBQztBQUNsQztBQUVBNUIsWUFBWVksU0FBUyxDQUFDd0IsR0FBRyxHQUFHLFNBQVVDLEtBQUs7SUFDekMsZ0NBQWdDO0lBQ2hDaEMsUUFBUWdDO0lBRVIsSUFBSSxDQUFDLElBQUksQ0FBQ2QsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQ1EsT0FBTyxDQUFDTyxJQUFJLENBQUM7WUFBQztZQUFPO2dCQUFDRDthQUFNO1NBQUM7UUFDbEMsSUFBSSxDQUFDM0IsVUFBVSxHQUFHO1FBQ2xCLE9BQU87SUFDVDtJQUNBLE9BQU8sSUFBSSxDQUFDYSxNQUFNLENBQUNhLEdBQUcsQ0FBQ0M7QUFDekI7QUFFQXJDLFlBQVlZLFNBQVMsQ0FBQzJCLEtBQUssR0FBRyxTQUFVUCxDQUFDO0lBQ3ZDLGtDQUFrQztJQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDVCxNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDUSxPQUFPLENBQUNPLElBQUksQ0FBQztZQUFDO1lBQVM7Z0JBQUNOO2FBQUU7U0FBQztRQUNoQyxJQUFJLENBQUN0QixVQUFVLEdBQUc7UUFDbEIsT0FBTztJQUNUO0lBQ0EsT0FBTyxJQUFJLENBQUNhLE1BQU0sQ0FBQ2dCLEtBQUssQ0FBQ1A7QUFDM0I7QUFFQWhDLFlBQVlZLFNBQVMsQ0FBQzRCLEdBQUcsR0FBRyxTQUFVUixDQUFDO0lBQ3JDLGdDQUFnQztJQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDVCxNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDUSxPQUFPLENBQUNPLElBQUksQ0FBQztZQUFDO1lBQU87Z0JBQUNOO2FBQUU7U0FBQztRQUM5QixPQUFPO0lBQ1Q7SUFDQSxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDaUIsR0FBRyxDQUFDUjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnZpZGl4LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL3Byb3h5LXdyaXRlci5qcz8xNWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgd3JpdGVyIGZvciB3aGVuIHdlIGRvbid0IGtub3cgd2hhdCBraW5kIG9mIHRoaW5nXG4vLyB0aGUgdGhpbmcgaXMuICBUaGF0IGlzLCBpdCdzIG5vdCBleHBsaWNpdGx5IHNldCxcbi8vIHNvIHdlJ3JlIGdvaW5nIHRvIG1ha2UgaXQgd2hhdGV2ZXIgdGhlIHRoaW5nIGFscmVhZHlcbi8vIGlzLCBvciBcIkZpbGVcIlxuLy9cbi8vIFVudGlsIHRoZW4sIGNvbGxlY3QgYWxsIGV2ZW50cy5cblxubW9kdWxlLmV4cG9ydHMgPSBQcm94eVdyaXRlclxuXG52YXIgV3JpdGVyID0gcmVxdWlyZSgnLi93cml0ZXIuanMnKVxudmFyIGdldFR5cGUgPSByZXF1aXJlKCcuL2dldC10eXBlLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBjb2xsZWN0ID0gcmVxdWlyZSgnLi9jb2xsZWN0LmpzJylcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcblxuaW5oZXJpdHMoUHJveHlXcml0ZXIsIFdyaXRlcilcblxuZnVuY3Rpb24gUHJveHlXcml0ZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgUHJveHlXcml0ZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcm94eVdyaXRlciBtdXN0IGJlIGNhbGxlZCBhcyBjb25zdHJ1Y3Rvci4nKVxuICB9XG5cbiAgc2VsZi5wcm9wcyA9IHByb3BzXG4gIHNlbGYuX25lZWREcmFpbiA9IGZhbHNlXG5cbiAgV3JpdGVyLmNhbGwoc2VsZiwgcHJvcHMpXG59XG5cblByb3h5V3JpdGVyLnByb3RvdHlwZS5fc3RhdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwcm9wcyA9IHNlbGYucHJvcHNcbiAgLy8gc3RhdCB0aGUgdGhpbmcgdG8gc2VlIHdoYXQgdGhlIHByb3h5IHNob3VsZCBiZS5cbiAgdmFyIHN0YXQgPSBwcm9wcy5mb2xsb3cgPyAnc3RhdCcgOiAnbHN0YXQnXG5cbiAgZnNbc3RhdF0ocHJvcHMucGF0aCwgZnVuY3Rpb24gKGVyLCBjdXJyZW50KSB7XG4gICAgdmFyIHR5cGVcbiAgICBpZiAoZXIgfHwgIWN1cnJlbnQpIHtcbiAgICAgIHR5cGUgPSAnRmlsZSdcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IGdldFR5cGUoY3VycmVudClcbiAgICB9XG5cbiAgICBwcm9wc1t0eXBlXSA9IHRydWVcbiAgICBwcm9wcy50eXBlID0gc2VsZi50eXBlID0gdHlwZVxuXG4gICAgc2VsZi5fb2xkID0gY3VycmVudFxuICAgIHNlbGYuX2FkZFByb3h5KFdyaXRlcihwcm9wcywgY3VycmVudCkpXG4gIH0pXG59XG5cblByb3h5V3JpdGVyLnByb3RvdHlwZS5fYWRkUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgLy8gY29uc29sZS5lcnJvcihcIn5+IHNldCBwcm94eVwiLCB0aGlzLnBhdGgpXG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fcHJveHkpIHtcbiAgICByZXR1cm4gc2VsZi5lcnJvcigncHJveHkgYWxyZWFkeSBzZXQnKVxuICB9XG5cbiAgc2VsZi5fcHJveHkgPSBwcm94eVxuICA7W1xuICAgICdyZWFkeScsXG4gICAgJ2Vycm9yJyxcbiAgICAnY2xvc2UnLFxuICAgICdwaXBlJyxcbiAgICAnZHJhaW4nLFxuICAgICd3YXJuJ1xuICBdLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgcHJveHkub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSlcbiAgfSlcblxuICBzZWxmLmVtaXQoJ3Byb3h5JywgcHJveHkpXG5cbiAgdmFyIGNhbGxzID0gc2VsZi5fYnVmZmVyXG4gIGNhbGxzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAvLyBjb25zb2xlLmVycm9yKFwifn4gfn4gcHJveHkgYnVmZmVyZWQgY2FsbFwiLCBjWzBdLCBjWzFdKVxuICAgIHByb3h5W2NbMF1dLmFwcGx5KHByb3h5LCBjWzFdKVxuICB9KVxuICBzZWxmLl9idWZmZXIubGVuZ3RoID0gMFxuICBpZiAoc2VsZi5fbmVlZHNEcmFpbikgc2VsZi5lbWl0KCdkcmFpbicpXG59XG5cblByb3h5V3JpdGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgLy8gY29uc29sZS5lcnJvcihcIn5+IHByb3h5IGFkZFwiKVxuICBjb2xsZWN0KGVudHJ5KVxuXG4gIGlmICghdGhpcy5fcHJveHkpIHtcbiAgICB0aGlzLl9idWZmZXIucHVzaChbJ2FkZCcsIFtlbnRyeV1dKVxuICAgIHRoaXMuX25lZWREcmFpbiA9IHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdGhpcy5fcHJveHkuYWRkKGVudHJ5KVxufVxuXG5Qcm94eVdyaXRlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYykge1xuICAvLyBjb25zb2xlLmVycm9yKCd+fiBwcm94eSB3cml0ZScpXG4gIGlmICghdGhpcy5fcHJveHkpIHtcbiAgICB0aGlzLl9idWZmZXIucHVzaChbJ3dyaXRlJywgW2NdXSlcbiAgICB0aGlzLl9uZWVkRHJhaW4gPSB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRoaXMuX3Byb3h5LndyaXRlKGMpXG59XG5cblByb3h5V3JpdGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoYykge1xuICAvLyBjb25zb2xlLmVycm9yKCd+fiBwcm94eSBlbmQnKVxuICBpZiAoIXRoaXMuX3Byb3h5KSB7XG4gICAgdGhpcy5fYnVmZmVyLnB1c2goWydlbmQnLCBbY11dKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0aGlzLl9wcm94eS5lbmQoYylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUHJveHlXcml0ZXIiLCJXcml0ZXIiLCJyZXF1aXJlIiwiZ2V0VHlwZSIsImluaGVyaXRzIiwiY29sbGVjdCIsImZzIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJfbmVlZERyYWluIiwiY2FsbCIsInByb3RvdHlwZSIsIl9zdGF0Iiwic3RhdCIsImZvbGxvdyIsInBhdGgiLCJlciIsImN1cnJlbnQiLCJ0eXBlIiwiX29sZCIsIl9hZGRQcm94eSIsInByb3h5IiwiX3Byb3h5IiwiZXJyb3IiLCJmb3JFYWNoIiwiZXYiLCJvbiIsImVtaXQiLCJiaW5kIiwiY2FsbHMiLCJfYnVmZmVyIiwiYyIsImFwcGx5IiwibGVuZ3RoIiwiX25lZWRzRHJhaW4iLCJhZGQiLCJlbnRyeSIsInB1c2giLCJ3cml0ZSIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/proxy-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/reader.js":
/*!********************************************!*\
  !*** ./node_modules/fstream/lib/reader.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Reader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(ssr)/./node_modules/fstream/lib/get-type.js\");\nvar hardLinks = Reader.hardLinks = {};\nvar Abstract = __webpack_require__(/*! ./abstract.js */ \"(ssr)/./node_modules/fstream/lib/abstract.js\");\n// Must do this *before* loading the child classes\ninherits(Reader, Abstract);\nvar LinkReader = __webpack_require__(/*! ./link-reader.js */ \"(ssr)/./node_modules/fstream/lib/link-reader.js\");\nfunction Reader(props, currentStat) {\n    var self = this;\n    if (!(self instanceof Reader)) return new Reader(props, currentStat);\n    if (typeof props === \"string\") {\n        props = {\n            path: props\n        };\n    }\n    // polymorphism.\n    // call fstream.Reader(dir) to get a DirReader object, etc.\n    // Note that, unlike in the Writer case, ProxyReader is going\n    // to be the *normal* state of affairs, since we rarely know\n    // the type of a file prior to reading it.\n    var type;\n    var ClassType;\n    if (props.type && typeof props.type === \"function\") {\n        type = props.type;\n        ClassType = type;\n    } else {\n        type = getType(props);\n        ClassType = Reader;\n    }\n    if (currentStat && !type) {\n        type = getType(currentStat);\n        props[type] = true;\n        props.type = type;\n    }\n    switch(type){\n        case \"Directory\":\n            ClassType = __webpack_require__(/*! ./dir-reader.js */ \"(ssr)/./node_modules/fstream/lib/dir-reader.js\");\n            break;\n        case \"Link\":\n        // XXX hard links are just files.\n        // However, it would be good to keep track of files' dev+inode\n        // and nlink values, and create a HardLinkReader that emits\n        // a linkpath value of the original copy, so that the tar\n        // writer can preserve them.\n        // ClassType = HardLinkReader\n        // break\n        case \"File\":\n            ClassType = __webpack_require__(/*! ./file-reader.js */ \"(ssr)/./node_modules/fstream/lib/file-reader.js\");\n            break;\n        case \"SymbolicLink\":\n            ClassType = LinkReader;\n            break;\n        case \"Socket\":\n            ClassType = __webpack_require__(/*! ./socket-reader.js */ \"(ssr)/./node_modules/fstream/lib/socket-reader.js\");\n            break;\n        case null:\n            ClassType = __webpack_require__(/*! ./proxy-reader.js */ \"(ssr)/./node_modules/fstream/lib/proxy-reader.js\");\n            break;\n    }\n    if (!(self instanceof ClassType)) {\n        return new ClassType(props);\n    }\n    Abstract.call(self);\n    if (!props.path) {\n        self.error(\"Must provide a path\", null, true);\n    }\n    self.readable = true;\n    self.writable = false;\n    self.type = type;\n    self.props = props;\n    self.depth = props.depth = props.depth || 0;\n    self.parent = props.parent || null;\n    self.root = props.root || props.parent && props.parent.root || self;\n    self._path = self.path = path.resolve(props.path);\n    if (process.platform === \"win32\") {\n        self.path = self._path = self.path.replace(/\\?/g, \"_\");\n        if (self._path.length >= 260) {\n            // how DOES one create files on the moon?\n            // if the path has spaces in it, then UNC will fail.\n            self._swallowErrors = true;\n            // if (self._path.indexOf(\" \") === -1) {\n            self._path = \"\\\\\\\\?\\\\\" + self.path.replace(/\\//g, \"\\\\\");\n        // }\n        }\n    }\n    self.basename = props.basename = path.basename(self.path);\n    self.dirname = props.dirname = path.dirname(self.path);\n    // these have served their purpose, and are now just noisy clutter\n    props.parent = props.root = null;\n    // console.error(\"\\n\\n\\n%s setting size to\", props.path, props.size)\n    self.size = props.size;\n    self.filter = typeof props.filter === \"function\" ? props.filter : null;\n    if (props.sort === \"alpha\") props.sort = alphasort;\n    // start the ball rolling.\n    // this will stat the thing, and then call self._read()\n    // to start reading whatever it is.\n    // console.error(\"calling stat\", props.path, currentStat)\n    self._stat(currentStat);\n}\nfunction alphasort(a, b) {\n    return a === b ? 0 : a.toLowerCase() > b.toLowerCase() ? 1 : a.toLowerCase() < b.toLowerCase() ? -1 : a > b ? 1 : -1;\n}\nReader.prototype._stat = function(currentStat) {\n    var self = this;\n    var props = self.props;\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    // console.error(\"Reader._stat\", self._path, currentStat)\n    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat));\n    else fs[stat](self._path, statCb);\n    function statCb(er, props_) {\n        // console.error(\"Reader._stat, statCb\", self._path, props_, props_.nlink)\n        if (er) return self.error(er);\n        Object.keys(props_).forEach(function(k) {\n            props[k] = props_[k];\n        });\n        // if it's not the expected size, then abort here.\n        if (undefined !== self.size && props.size !== self.size) {\n            return self.error(\"incorrect size\");\n        }\n        self.size = props.size;\n        var type = getType(props);\n        var handleHardlinks = props.hardlinks !== false;\n        // special little thing for handling hardlinks.\n        if (handleHardlinks && type !== \"Directory\" && props.nlink && props.nlink > 1) {\n            var k = props.dev + \":\" + props.ino;\n            // console.error(\"Reader has nlink\", self._path, k)\n            if (hardLinks[k] === self._path || !hardLinks[k]) {\n                hardLinks[k] = self._path;\n            } else {\n                // switch into hardlink mode.\n                type = self.type = self.props.type = \"Link\";\n                self.Link = self.props.Link = true;\n                self.linkpath = self.props.linkpath = hardLinks[k];\n                // console.error(\"Hardlink detected, switching mode\", self._path, self.linkpath)\n                // Setting __proto__ would arguably be the \"correct\"\n                // approach here, but that just seems too wrong.\n                self._stat = self._read = LinkReader.prototype._read;\n            }\n        }\n        if (self.type && self.type !== type) {\n            self.error(\"Unexpected type: \" + type);\n        }\n        // if the filter doesn't pass, then just skip over this one.\n        // still have to emit end so that dir-walking can move on.\n        if (self.filter) {\n            var who = self._proxy || self;\n            // special handling for ProxyReaders\n            if (!self.filter.call(who, who, props)) {\n                if (!self._disowned) {\n                    self.abort();\n                    self.emit(\"end\");\n                    self.emit(\"close\");\n                }\n                return;\n            }\n        }\n        // last chance to abort or disown before the flow starts!\n        var events = [\n            \"_stat\",\n            \"stat\",\n            \"ready\"\n        ];\n        var e = 0;\n        (function go() {\n            if (self._aborted) {\n                self.emit(\"end\");\n                self.emit(\"close\");\n                return;\n            }\n            if (self._paused && self.type !== \"Directory\") {\n                self.once(\"resume\", go);\n                return;\n            }\n            var ev = events[e++];\n            if (!ev) {\n                return self._read();\n            }\n            self.emit(ev, props);\n            go();\n        })();\n    }\n};\nReader.prototype.pipe = function(dest) {\n    var self = this;\n    if (typeof dest.add === \"function\") {\n        // piping to a multi-compatible, and we've got directory entries.\n        self.on(\"entry\", function(entry) {\n            var ret = dest.add(entry);\n            if (ret === false) {\n                self.pause();\n            }\n        });\n    }\n    // console.error(\"R Pipe apply Stream Pipe\")\n    return Stream.prototype.pipe.apply(this, arguments);\n};\nReader.prototype.pause = function(who) {\n    this._paused = true;\n    who = who || this;\n    this.emit(\"pause\", who);\n    if (this._stream) this._stream.pause(who);\n};\nReader.prototype.resume = function(who) {\n    this._paused = false;\n    who = who || this;\n    this.emit(\"resume\", who);\n    if (this._stream) this._stream.resume(who);\n    this._read();\n};\nReader.prototype._read = function() {\n    this.error(\"Cannot read unknown type: \" + this.type);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/socket-reader.js":
/*!***************************************************!*\
  !*** ./node_modules/fstream/lib/socket-reader.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Just get the stats, and then don't do anything.\n// You can't really \"read\" from a socket.  You \"connect\" to it.\n// Mostly, this is here so that reading a dir with a socket in it\n// doesn't blow up.\nmodule.exports = SocketReader;\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/fstream/lib/reader.js\");\ninherits(SocketReader, Reader);\nfunction SocketReader(props) {\n    var self = this;\n    if (!(self instanceof SocketReader)) {\n        throw new Error(\"SocketReader must be called as constructor.\");\n    }\n    if (!(props.type === \"Socket\" && props.Socket)) {\n        throw new Error(\"Non-socket type \" + props.type);\n    }\n    Reader.call(self, props);\n}\nSocketReader.prototype._read = function() {\n    var self = this;\n    if (self._paused) return;\n    // basically just a no-op, since we got all the info we have\n    // from the _stat method\n    if (!self._ended) {\n        self.emit(\"end\");\n        self.emit(\"close\");\n        self._ended = true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvc29ja2V0LXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsK0RBQStEO0FBQy9ELGlFQUFpRTtBQUNqRSxtQkFBbUI7QUFFbkJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBV0MsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFFckJELFNBQVNELGNBQWNHO0FBRXZCLFNBQVNILGFBQWNJLEtBQUs7SUFDMUIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JMLFlBQVcsR0FBSTtRQUNuQyxNQUFNLElBQUlNLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUVGLENBQUFBLE1BQU1HLElBQUksS0FBSyxZQUFZSCxNQUFNSSxNQUFNLEdBQUc7UUFDOUMsTUFBTSxJQUFJRixNQUFNLHFCQUFxQkYsTUFBTUcsSUFBSTtJQUNqRDtJQUVBSixPQUFPTSxJQUFJLENBQUNKLE1BQU1EO0FBQ3BCO0FBRUFKLGFBQWFVLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO0lBQzdCLElBQUlOLE9BQU8sSUFBSTtJQUNmLElBQUlBLEtBQUtPLE9BQU8sRUFBRTtJQUNsQiw0REFBNEQ7SUFDNUQsd0JBQXdCO0lBQ3hCLElBQUksQ0FBQ1AsS0FBS1EsTUFBTSxFQUFFO1FBQ2hCUixLQUFLUyxJQUFJLENBQUM7UUFDVlQsS0FBS1MsSUFBSSxDQUFDO1FBQ1ZULEtBQUtRLE1BQU0sR0FBRztJQUNoQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidmlkaXgtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvc29ja2V0LXJlYWRlci5qcz8xNWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEp1c3QgZ2V0IHRoZSBzdGF0cywgYW5kIHRoZW4gZG9uJ3QgZG8gYW55dGhpbmcuXG4vLyBZb3UgY2FuJ3QgcmVhbGx5IFwicmVhZFwiIGZyb20gYSBzb2NrZXQuICBZb3UgXCJjb25uZWN0XCIgdG8gaXQuXG4vLyBNb3N0bHksIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHJlYWRpbmcgYSBkaXIgd2l0aCBhIHNvY2tldCBpbiBpdFxuLy8gZG9lc24ndCBibG93IHVwLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldFJlYWRlclxuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXIuanMnKVxuXG5pbmhlcml0cyhTb2NrZXRSZWFkZXIsIFJlYWRlcilcblxuZnVuY3Rpb24gU29ja2V0UmVhZGVyIChwcm9wcykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIFNvY2tldFJlYWRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvY2tldFJlYWRlciBtdXN0IGJlIGNhbGxlZCBhcyBjb25zdHJ1Y3Rvci4nKVxuICB9XG5cbiAgaWYgKCEocHJvcHMudHlwZSA9PT0gJ1NvY2tldCcgJiYgcHJvcHMuU29ja2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm9uLXNvY2tldCB0eXBlICcgKyBwcm9wcy50eXBlKVxuICB9XG5cbiAgUmVhZGVyLmNhbGwoc2VsZiwgcHJvcHMpXG59XG5cblNvY2tldFJlYWRlci5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fcGF1c2VkKSByZXR1cm5cbiAgLy8gYmFzaWNhbGx5IGp1c3QgYSBuby1vcCwgc2luY2Ugd2UgZ290IGFsbCB0aGUgaW5mbyB3ZSBoYXZlXG4gIC8vIGZyb20gdGhlIF9zdGF0IG1ldGhvZFxuICBpZiAoIXNlbGYuX2VuZGVkKSB7XG4gICAgc2VsZi5lbWl0KCdlbmQnKVxuICAgIHNlbGYuZW1pdCgnY2xvc2UnKVxuICAgIHNlbGYuX2VuZGVkID0gdHJ1ZVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlNvY2tldFJlYWRlciIsImluaGVyaXRzIiwicmVxdWlyZSIsIlJlYWRlciIsInByb3BzIiwic2VsZiIsIkVycm9yIiwidHlwZSIsIlNvY2tldCIsImNhbGwiLCJwcm90b3R5cGUiLCJfcmVhZCIsIl9wYXVzZWQiLCJfZW5kZWQiLCJlbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/socket-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/lib/writer.js":
/*!********************************************!*\
  !*** ./node_modules/fstream/lib/writer.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Writer;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar rimraf = __webpack_require__(/*! rimraf */ \"(ssr)/./node_modules/fstream/node_modules/rimraf/rimraf.js\");\nvar mkdir = __webpack_require__(/*! mkdirp */ \"(ssr)/./node_modules/mkdirp/index.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar umask = process.platform === \"win32\" ? 0 : process.umask();\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(ssr)/./node_modules/fstream/lib/get-type.js\");\nvar Abstract = __webpack_require__(/*! ./abstract.js */ \"(ssr)/./node_modules/fstream/lib/abstract.js\");\n// Must do this *before* loading the child classes\ninherits(Writer, Abstract);\nWriter.dirmode = parseInt(\"0777\", 8) & ~umask;\nWriter.filemode = parseInt(\"0666\", 8) & ~umask;\nvar DirWriter = __webpack_require__(/*! ./dir-writer.js */ \"(ssr)/./node_modules/fstream/lib/dir-writer.js\");\nvar LinkWriter = __webpack_require__(/*! ./link-writer.js */ \"(ssr)/./node_modules/fstream/lib/link-writer.js\");\nvar FileWriter = __webpack_require__(/*! ./file-writer.js */ \"(ssr)/./node_modules/fstream/lib/file-writer.js\");\nvar ProxyWriter = __webpack_require__(/*! ./proxy-writer.js */ \"(ssr)/./node_modules/fstream/lib/proxy-writer.js\");\n// props is the desired state.  current is optionally the current stat,\n// provided here so that subclasses can avoid statting the target\n// more than necessary.\nfunction Writer(props, current) {\n    var self = this;\n    if (typeof props === \"string\") {\n        props = {\n            path: props\n        };\n    }\n    // polymorphism.\n    // call fstream.Writer(dir) to get a DirWriter object, etc.\n    var type = getType(props);\n    var ClassType = Writer;\n    switch(type){\n        case \"Directory\":\n            ClassType = DirWriter;\n            break;\n        case \"File\":\n            ClassType = FileWriter;\n            break;\n        case \"Link\":\n        case \"SymbolicLink\":\n            ClassType = LinkWriter;\n            break;\n        case null:\n        default:\n            // Don't know yet what type to create, so we wrap in a proxy.\n            ClassType = ProxyWriter;\n            break;\n    }\n    if (!(self instanceof ClassType)) return new ClassType(props);\n    // now get down to business.\n    Abstract.call(self);\n    if (!props.path) self.error(\"Must provide a path\", null, true);\n    // props is what we want to set.\n    // set some convenience properties as well.\n    self.type = props.type;\n    self.props = props;\n    self.depth = props.depth || 0;\n    self.clobber = props.clobber === false ? props.clobber : true;\n    self.parent = props.parent || null;\n    self.root = props.root || props.parent && props.parent.root || self;\n    self._path = self.path = path.resolve(props.path);\n    if (process.platform === \"win32\") {\n        self.path = self._path = self.path.replace(/\\?/g, \"_\");\n        if (self._path.length >= 260) {\n            self._swallowErrors = true;\n            self._path = \"\\\\\\\\?\\\\\" + self.path.replace(/\\//g, \"\\\\\");\n        }\n    }\n    self.basename = path.basename(props.path);\n    self.dirname = path.dirname(props.path);\n    self.linkpath = props.linkpath || null;\n    props.parent = props.root = null;\n    // console.error(\"\\n\\n\\n%s setting size to\", props.path, props.size)\n    self.size = props.size;\n    if (typeof props.mode === \"string\") {\n        props.mode = parseInt(props.mode, 8);\n    }\n    self.readable = false;\n    self.writable = true;\n    // buffer until ready, or while handling another entry\n    self._buffer = [];\n    self.ready = false;\n    self.filter = typeof props.filter === \"function\" ? props.filter : null;\n    // start the ball rolling.\n    // this checks what's there already, and then calls\n    // self._create() to call the impl-specific creation stuff.\n    self._stat(current);\n}\n// Calling this means that it's something we can't create.\n// Just assert that it's already there, otherwise raise a warning.\nWriter.prototype._create = function() {\n    var self = this;\n    fs[self.props.follow ? \"stat\" : \"lstat\"](self._path, function(er) {\n        if (er) {\n            return self.warn(\"Cannot create \" + self._path + \"\\n\" + \"Unsupported type: \" + self.type, \"ENOTSUP\");\n        }\n        self._finish();\n    });\n};\nWriter.prototype._stat = function(current) {\n    var self = this;\n    var props = self.props;\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    var who = self._proxy || self;\n    if (current) statCb(null, current);\n    else fs[stat](self._path, statCb);\n    function statCb(er, current) {\n        if (self.filter && !self.filter.call(who, who, current)) {\n            self._aborted = true;\n            self.emit(\"end\");\n            self.emit(\"close\");\n            return;\n        }\n        // if it's not there, great.  We'll just create it.\n        // if it is there, then we'll need to change whatever differs\n        if (er || !current) {\n            return create(self);\n        }\n        self._old = current;\n        var currentType = getType(current);\n        // if it's a type change, then we need to clobber or error.\n        // if it's not a type change, then let the impl take care of it.\n        if (currentType !== self.type || self.type === \"File\" && current.nlink > 1) {\n            return rimraf(self._path, function(er) {\n                if (er) return self.error(er);\n                self._old = null;\n                create(self);\n            });\n        }\n        // otherwise, just handle in the app-specific way\n        // this creates a fs.WriteStream, or mkdir's, or whatever\n        create(self);\n    }\n};\nfunction create(self) {\n    // console.error(\"W create\", self._path, Writer.dirmode)\n    // XXX Need to clobber non-dirs that are in the way,\n    // unless { clobber: false } in the props.\n    mkdir(path.dirname(self._path), Writer.dirmode, function(er, made) {\n        // console.error(\"W created\", path.dirname(self._path), er)\n        if (er) return self.error(er);\n        // later on, we have to set the mode and owner for these\n        self._madeDir = made;\n        return self._create();\n    });\n}\nfunction endChmod(self, want, current, path, cb) {\n    var wantMode = want.mode;\n    var chmod = want.follow || self.type !== \"SymbolicLink\" ? \"chmod\" : \"lchmod\";\n    if (!fs[chmod]) return cb();\n    if (typeof wantMode !== \"number\") return cb();\n    var curMode = current.mode & parseInt(\"0777\", 8);\n    wantMode = wantMode & parseInt(\"0777\", 8);\n    if (wantMode === curMode) return cb();\n    fs[chmod](path, wantMode, cb);\n}\nfunction endChown(self, want, current, path, cb) {\n    // Don't even try it unless root.  Too easy to EPERM.\n    if (process.platform === \"win32\") return cb();\n    if (!process.getuid || process.getuid() !== 0) return cb();\n    if (typeof want.uid !== \"number\" && typeof want.gid !== \"number\") return cb();\n    if (current.uid === want.uid && current.gid === want.gid) return cb();\n    var chown = self.props.follow || self.type !== \"SymbolicLink\" ? \"chown\" : \"lchown\";\n    if (!fs[chown]) return cb();\n    if (typeof want.uid !== \"number\") want.uid = current.uid;\n    if (typeof want.gid !== \"number\") want.gid = current.gid;\n    fs[chown](path, want.uid, want.gid, cb);\n}\nfunction endUtimes(self, want, current, path, cb) {\n    if (!fs.utimes || process.platform === \"win32\") return cb();\n    var utimes = want.follow || self.type !== \"SymbolicLink\" ? \"utimes\" : \"lutimes\";\n    if (utimes === \"lutimes\" && !fs[utimes]) {\n        utimes = \"utimes\";\n    }\n    if (!fs[utimes]) return cb();\n    var curA = current.atime;\n    var curM = current.mtime;\n    var meA = want.atime;\n    var meM = want.mtime;\n    if (meA === undefined) meA = curA;\n    if (meM === undefined) meM = curM;\n    if (!isDate(meA)) meA = new Date(meA);\n    if (!isDate(meM)) meA = new Date(meM);\n    if (meA.getTime() === curA.getTime() && meM.getTime() === curM.getTime()) return cb();\n    fs[utimes](path, meA, meM, cb);\n}\n// XXX This function is beastly.  Break it up!\nWriter.prototype._finish = function() {\n    var self = this;\n    if (self._finishing) return;\n    self._finishing = true;\n    // console.error(\" W Finish\", self._path, self.size)\n    // set up all the things.\n    // At this point, we're already done writing whatever we've gotta write,\n    // adding files to the dir, etc.\n    var todo = 0;\n    var errState = null;\n    var done = false;\n    if (self._old) {\n        // the times will almost *certainly* have changed.\n        // adds the utimes syscall, but remove another stat.\n        self._old.atime = new Date(0);\n        self._old.mtime = new Date(0);\n        // console.error(\" W Finish Stale Stat\", self._path, self.size)\n        setProps(self._old);\n    } else {\n        var stat = self.props.follow ? \"stat\" : \"lstat\";\n        // console.error(\" W Finish Stating\", self._path, self.size)\n        fs[stat](self._path, function(er, current) {\n            // console.error(\" W Finish Stated\", self._path, self.size, current)\n            if (er) {\n                // if we're in the process of writing out a\n                // directory, it's very possible that the thing we're linking to\n                // doesn't exist yet (especially if it was intended as a symlink),\n                // so swallow ENOENT errors here and just soldier on.\n                if (er.code === \"ENOENT\" && (self.type === \"Link\" || self.type === \"SymbolicLink\") && process.platform === \"win32\") {\n                    self.ready = true;\n                    self.emit(\"ready\");\n                    self.emit(\"end\");\n                    self.emit(\"close\");\n                    self.end = self._finish = function() {};\n                    return;\n                } else return self.error(er);\n            }\n            setProps(self._old = current);\n        });\n    }\n    return;\n    function setProps(current) {\n        todo += 3;\n        endChmod(self, self.props, current, self._path, next(\"chmod\"));\n        endChown(self, self.props, current, self._path, next(\"chown\"));\n        endUtimes(self, self.props, current, self._path, next(\"utimes\"));\n    }\n    function next(what) {\n        return function(er) {\n            // console.error(\"   W Finish\", what, todo)\n            if (errState) return;\n            if (er) {\n                er.fstream_finish_call = what;\n                return self.error(errState = er);\n            }\n            if (--todo > 0) return;\n            if (done) return;\n            done = true;\n            // we may still need to set the mode/etc. on some parent dirs\n            // that were created previously.  delay end/close until then.\n            if (!self._madeDir) return end();\n            else endMadeDir(self, self._path, end);\n            function end(er) {\n                if (er) {\n                    er.fstream_finish_call = \"setupMadeDir\";\n                    return self.error(er);\n                }\n                // all the props have been set, so we're completely done.\n                self.emit(\"end\");\n                self.emit(\"close\");\n            }\n        };\n    }\n};\nfunction endMadeDir(self, p, cb) {\n    var made = self._madeDir;\n    // everything *between* made and path.dirname(self._path)\n    // needs to be set up.  Note that this may just be one dir.\n    var d = path.dirname(p);\n    endMadeDir_(self, d, function(er) {\n        if (er) return cb(er);\n        if (d === made) {\n            return cb();\n        }\n        endMadeDir(self, d, cb);\n    });\n}\nfunction endMadeDir_(self, p, cb) {\n    var dirProps = {};\n    Object.keys(self.props).forEach(function(k) {\n        dirProps[k] = self.props[k];\n        // only make non-readable dirs if explicitly requested.\n        if (k === \"mode\" && self.type !== \"Directory\") {\n            dirProps[k] = dirProps[k] | parseInt(\"0111\", 8);\n        }\n    });\n    var todo = 3;\n    var errState = null;\n    fs.stat(p, function(er, current) {\n        if (er) return cb(errState = er);\n        endChmod(self, dirProps, current, p, next);\n        endChown(self, dirProps, current, p, next);\n        endUtimes(self, dirProps, current, p, next);\n    });\n    function next(er) {\n        if (errState) return;\n        if (er) return cb(errState = er);\n        if (--todo === 0) return cb();\n    }\n}\nWriter.prototype.pipe = function() {\n    this.error(\"Can't pipe from writable stream\");\n};\nWriter.prototype.add = function() {\n    this.error(\"Can't add to non-Directory type\");\n};\nWriter.prototype.write = function() {\n    return true;\n};\nfunction objectToString(d) {\n    return Object.prototype.toString.call(d);\n}\nfunction isDate(d) {\n    return typeof d === \"object\" && objectToString(d) === \"[object Date]\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/lib/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fstream/node_modules/rimraf/rimraf.js":
/*!************************************************************!*\
  !*** ./node_modules/fstream/node_modules/rimraf/rimraf.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = rimraf;\nrimraf.sync = rimrafSync;\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar glob = undefined;\ntry {\n    glob = __webpack_require__(/*! glob */ \"(ssr)/./node_modules/glob/glob.js\");\n} catch (_err) {\n// treat glob as optional.\n}\nvar _0666 = parseInt(\"666\", 8);\nvar defaultGlobOpts = {\n    nosort: true,\n    silent: true\n};\n// for EMFILE handling\nvar timeout = 0;\nvar isWindows = process.platform === \"win32\";\nfunction defaults(options) {\n    var methods = [\n        \"unlink\",\n        \"chmod\",\n        \"stat\",\n        \"lstat\",\n        \"rmdir\",\n        \"readdir\"\n    ];\n    methods.forEach(function(m) {\n        options[m] = options[m] || fs[m];\n        m = m + \"Sync\";\n        options[m] = options[m] || fs[m];\n    });\n    options.maxBusyTries = options.maxBusyTries || 3;\n    options.emfileWait = options.emfileWait || 1000;\n    if (options.glob === false) {\n        options.disableGlob = true;\n    }\n    if (options.disableGlob !== true && glob === undefined) {\n        throw Error(\"glob dependency not found, set `options.disableGlob = true` if intentional\");\n    }\n    options.disableGlob = options.disableGlob || false;\n    options.glob = options.glob || defaultGlobOpts;\n}\nfunction rimraf(p, options, cb) {\n    if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n    }\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert.equal(typeof cb, \"function\", \"rimraf: callback function required\");\n    assert(options, \"rimraf: invalid options argument provided\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    defaults(options);\n    var busyTries = 0;\n    var errState = null;\n    var n = 0;\n    if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [\n        p\n    ]);\n    options.lstat(p, function(er, stat) {\n        if (!er) return afterGlob(null, [\n            p\n        ]);\n        glob(p, options.glob, afterGlob);\n    });\n    function next(er) {\n        errState = errState || er;\n        if (--n === 0) cb(errState);\n    }\n    function afterGlob(er, results) {\n        if (er) return cb(er);\n        n = results.length;\n        if (n === 0) return cb();\n        results.forEach(function(p) {\n            rimraf_(p, options, function CB(er) {\n                if (er) {\n                    if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") && busyTries < options.maxBusyTries) {\n                        busyTries++;\n                        var time = busyTries * 100;\n                        // try again, with the same exact callback as this one.\n                        return setTimeout(function() {\n                            rimraf_(p, options, CB);\n                        }, time);\n                    }\n                    // this one won't happen if graceful-fs is used.\n                    if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n                        return setTimeout(function() {\n                            rimraf_(p, options, CB);\n                        }, timeout++);\n                    }\n                    // already gone\n                    if (er.code === \"ENOENT\") er = null;\n                }\n                timeout = 0;\n                next(er);\n            });\n        });\n    }\n}\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_(p, options, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    // sunos lets the root user unlink directories, which is... weird.\n    // so we have to lstat here and make sure it's not a dir.\n    options.lstat(p, function(er, st) {\n        if (er && er.code === \"ENOENT\") return cb(null);\n        // Windows can EPERM on stat.  Life is suffering.\n        if (er && er.code === \"EPERM\" && isWindows) fixWinEPERM(p, options, er, cb);\n        if (st && st.isDirectory()) return rmdir(p, options, er, cb);\n        options.unlink(p, function(er) {\n            if (er) {\n                if (er.code === \"ENOENT\") return cb(null);\n                if (er.code === \"EPERM\") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n                if (er.code === \"EISDIR\") return rmdir(p, options, er, cb);\n            }\n            return cb(er);\n        });\n    });\n}\nfunction fixWinEPERM(p, options, er, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    if (er) assert(er instanceof Error);\n    options.chmod(p, _0666, function(er2) {\n        if (er2) cb(er2.code === \"ENOENT\" ? null : er);\n        else options.stat(p, function(er3, stats) {\n            if (er3) cb(er3.code === \"ENOENT\" ? null : er);\n            else if (stats.isDirectory()) rmdir(p, options, er, cb);\n            else options.unlink(p, cb);\n        });\n    });\n}\nfunction fixWinEPERMSync(p, options, er) {\n    assert(p);\n    assert(options);\n    if (er) assert(er instanceof Error);\n    try {\n        options.chmodSync(p, _0666);\n    } catch (er2) {\n        if (er2.code === \"ENOENT\") return;\n        else throw er;\n    }\n    try {\n        var stats = options.statSync(p);\n    } catch (er3) {\n        if (er3.code === \"ENOENT\") return;\n        else throw er;\n    }\n    if (stats.isDirectory()) rmdirSync(p, options, er);\n    else options.unlinkSync(p);\n}\nfunction rmdir(p, options, originalEr, cb) {\n    assert(p);\n    assert(options);\n    if (originalEr) assert(originalEr instanceof Error);\n    assert(typeof cb === \"function\");\n    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n    // if we guessed wrong, and it's not a directory, then\n    // raise the original error.\n    options.rmdir(p, function(er) {\n        if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")) rmkids(p, options, cb);\n        else if (er && er.code === \"ENOTDIR\") cb(originalEr);\n        else cb(er);\n    });\n}\nfunction rmkids(p, options, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    options.readdir(p, function(er, files) {\n        if (er) return cb(er);\n        var n = files.length;\n        if (n === 0) return options.rmdir(p, cb);\n        var errState;\n        files.forEach(function(f) {\n            rimraf(path.join(p, f), options, function(er) {\n                if (errState) return;\n                if (er) return cb(errState = er);\n                if (--n === 0) options.rmdir(p, cb);\n            });\n        });\n    });\n}\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync(p, options) {\n    options = options || {};\n    defaults(options);\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert(options, \"rimraf: missing options\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    var results;\n    if (options.disableGlob || !glob.hasMagic(p)) {\n        results = [\n            p\n        ];\n    } else {\n        try {\n            options.lstatSync(p);\n            results = [\n                p\n            ];\n        } catch (er) {\n            results = glob.sync(p, options.glob);\n        }\n    }\n    if (!results.length) return;\n    for(var i = 0; i < results.length; i++){\n        var p = results[i];\n        try {\n            var st = options.lstatSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            // Windows can EPERM on stat.  Life is suffering.\n            if (er.code === \"EPERM\" && isWindows) fixWinEPERMSync(p, options, er);\n        }\n        try {\n            // sunos lets the root user unlink directories, which is... weird.\n            if (st && st.isDirectory()) rmdirSync(p, options, null);\n            else options.unlinkSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            if (er.code === \"EPERM\") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n            if (er.code !== \"EISDIR\") throw er;\n            rmdirSync(p, options, er);\n        }\n    }\n}\nfunction rmdirSync(p, options, originalEr) {\n    assert(p);\n    assert(options);\n    if (originalEr) assert(originalEr instanceof Error);\n    try {\n        options.rmdirSync(p);\n    } catch (er) {\n        if (er.code === \"ENOENT\") return;\n        if (er.code === \"ENOTDIR\") throw originalEr;\n        if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\") rmkidsSync(p, options);\n    }\n}\nfunction rmkidsSync(p, options) {\n    assert(p);\n    assert(options);\n    options.readdirSync(p).forEach(function(f) {\n        rimrafSync(path.join(p, f), options);\n    });\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    var retries = isWindows ? 100 : 1;\n    var i = 0;\n    do {\n        var threw = true;\n        try {\n            var ret = options.rmdirSync(p, options);\n            threw = false;\n            return ret;\n        } finally{\n            if (++i < retries && threw) continue;\n        }\n    }while (true);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fstream/node_modules/rimraf/rimraf.js\n");

/***/ })

};
;