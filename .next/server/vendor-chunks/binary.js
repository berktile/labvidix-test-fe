/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/binary";
exports.ids = ["vendor-chunks/binary"];
exports.modules = {

/***/ "(ssr)/./node_modules/binary/index.js":
/*!**************************************!*\
  !*** ./node_modules/binary/index.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var Chainsaw = __webpack_require__(/*! chainsaw */ \"(ssr)/./node_modules/chainsaw/index.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar Buffers = __webpack_require__(/*! buffers */ \"(ssr)/./node_modules/buffers/index.js\");\nvar Vars = __webpack_require__(/*! ./lib/vars.js */ \"(ssr)/./node_modules/binary/lib/vars.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nexports = module.exports = function(bufOrEm, eventName) {\n    if (Buffer.isBuffer(bufOrEm)) {\n        return exports.parse(bufOrEm);\n    }\n    var s = exports.stream();\n    if (bufOrEm && bufOrEm.pipe) {\n        bufOrEm.pipe(s);\n    } else if (bufOrEm) {\n        bufOrEm.on(eventName || \"data\", function(buf) {\n            s.write(buf);\n        });\n        bufOrEm.on(\"end\", function() {\n            s.end();\n        });\n    }\n    return s;\n};\nexports.stream = function(input) {\n    if (input) return exports.apply(null, arguments);\n    var pending = null;\n    function getBytes(bytes, cb, skip) {\n        pending = {\n            bytes: bytes,\n            skip: skip,\n            cb: function(buf) {\n                pending = null;\n                cb(buf);\n            }\n        };\n        dispatch();\n    }\n    var offset = null;\n    function dispatch() {\n        if (!pending) {\n            if (caughtEnd) done = true;\n            return;\n        }\n        if (typeof pending === \"function\") {\n            pending();\n        } else {\n            var bytes = offset + pending.bytes;\n            if (buffers.length >= bytes) {\n                var buf;\n                if (offset == null) {\n                    buf = buffers.splice(0, bytes);\n                    if (!pending.skip) {\n                        buf = buf.slice();\n                    }\n                } else {\n                    if (!pending.skip) {\n                        buf = buffers.slice(offset, bytes);\n                    }\n                    offset = bytes;\n                }\n                if (pending.skip) {\n                    pending.cb();\n                } else {\n                    pending.cb(buf);\n                }\n            }\n        }\n    }\n    function builder(saw) {\n        function next() {\n            if (!done) saw.next();\n        }\n        var self = words(function(bytes, cb) {\n            return function(name) {\n                getBytes(bytes, function(buf) {\n                    vars.set(name, cb(buf));\n                    next();\n                });\n            };\n        });\n        self.tap = function(cb) {\n            saw.nest(cb, vars.store);\n        };\n        self.into = function(key, cb) {\n            if (!vars.get(key)) vars.set(key, {});\n            var parent = vars;\n            vars = Vars(parent.get(key));\n            saw.nest(function() {\n                cb.apply(this, arguments);\n                this.tap(function() {\n                    vars = parent;\n                });\n            }, vars.store);\n        };\n        self.flush = function() {\n            vars.store = {};\n            next();\n        };\n        self.loop = function(cb) {\n            var end = false;\n            saw.nest(false, function loop() {\n                this.vars = vars.store;\n                cb.call(this, function() {\n                    end = true;\n                    next();\n                }, vars.store);\n                this.tap((function() {\n                    if (end) saw.next();\n                    else loop.call(this);\n                }).bind(this));\n            }, vars.store);\n        };\n        self.buffer = function(name, bytes) {\n            if (typeof bytes === \"string\") {\n                bytes = vars.get(bytes);\n            }\n            getBytes(bytes, function(buf) {\n                vars.set(name, buf);\n                next();\n            });\n        };\n        self.skip = function(bytes) {\n            if (typeof bytes === \"string\") {\n                bytes = vars.get(bytes);\n            }\n            getBytes(bytes, function() {\n                next();\n            });\n        };\n        self.scan = function find(name, search) {\n            if (typeof search === \"string\") {\n                search = new Buffer(search);\n            } else if (!Buffer.isBuffer(search)) {\n                throw new Error(\"search must be a Buffer or a string\");\n            }\n            var taken = 0;\n            pending = function() {\n                var pos = buffers.indexOf(search, offset + taken);\n                var i = pos - offset - taken;\n                if (pos !== -1) {\n                    pending = null;\n                    if (offset != null) {\n                        vars.set(name, buffers.slice(offset, offset + taken + i));\n                        offset += taken + i + search.length;\n                    } else {\n                        vars.set(name, buffers.slice(0, taken + i));\n                        buffers.splice(0, taken + i + search.length);\n                    }\n                    next();\n                    dispatch();\n                } else {\n                    i = Math.max(buffers.length - search.length - offset - taken, 0);\n                }\n                taken += i;\n            };\n            dispatch();\n        };\n        self.peek = function(cb) {\n            offset = 0;\n            saw.nest(function() {\n                cb.call(this, vars.store);\n                this.tap(function() {\n                    offset = null;\n                });\n            });\n        };\n        return self;\n    }\n    ;\n    var stream = Chainsaw.light(builder);\n    stream.writable = true;\n    var buffers = Buffers();\n    stream.write = function(buf) {\n        buffers.push(buf);\n        dispatch();\n    };\n    var vars = Vars();\n    var done = false, caughtEnd = false;\n    stream.end = function() {\n        caughtEnd = true;\n    };\n    stream.pipe = Stream.prototype.pipe;\n    Object.getOwnPropertyNames(EventEmitter.prototype).forEach(function(name) {\n        stream[name] = EventEmitter.prototype[name];\n    });\n    return stream;\n};\nexports.parse = function parse(buffer) {\n    var self = words(function(bytes, cb) {\n        return function(name) {\n            if (offset + bytes <= buffer.length) {\n                var buf = buffer.slice(offset, offset + bytes);\n                offset += bytes;\n                vars.set(name, cb(buf));\n            } else {\n                vars.set(name, null);\n            }\n            return self;\n        };\n    });\n    var offset = 0;\n    var vars = Vars();\n    self.vars = vars.store;\n    self.tap = function(cb) {\n        cb.call(self, vars.store);\n        return self;\n    };\n    self.into = function(key, cb) {\n        if (!vars.get(key)) {\n            vars.set(key, {});\n        }\n        var parent = vars;\n        vars = Vars(parent.get(key));\n        cb.call(self, vars.store);\n        vars = parent;\n        return self;\n    };\n    self.loop = function(cb) {\n        var end = false;\n        var ender = function() {\n            end = true;\n        };\n        while(end === false){\n            cb.call(self, ender, vars.store);\n        }\n        return self;\n    };\n    self.buffer = function(name, size) {\n        if (typeof size === \"string\") {\n            size = vars.get(size);\n        }\n        var buf = buffer.slice(offset, Math.min(buffer.length, offset + size));\n        offset += size;\n        vars.set(name, buf);\n        return self;\n    };\n    self.skip = function(bytes) {\n        if (typeof bytes === \"string\") {\n            bytes = vars.get(bytes);\n        }\n        offset += bytes;\n        return self;\n    };\n    self.scan = function(name, search) {\n        if (typeof search === \"string\") {\n            search = new Buffer(search);\n        } else if (!Buffer.isBuffer(search)) {\n            throw new Error(\"search must be a Buffer or a string\");\n        }\n        vars.set(name, null);\n        // simple but slow string search\n        for(var i = 0; i + offset <= buffer.length - search.length + 1; i++){\n            for(var j = 0; j < search.length && buffer[offset + i + j] === search[j]; j++);\n            if (j === search.length) break;\n        }\n        vars.set(name, buffer.slice(offset, offset + i));\n        offset += i + search.length;\n        return self;\n    };\n    self.peek = function(cb) {\n        var was = offset;\n        cb.call(self, vars.store);\n        offset = was;\n        return self;\n    };\n    self.flush = function() {\n        vars.store = {};\n        return self;\n    };\n    self.eof = function() {\n        return offset >= buffer.length;\n    };\n    return self;\n};\n// convert byte strings to unsigned little endian numbers\nfunction decodeLEu(bytes) {\n    var acc = 0;\n    for(var i = 0; i < bytes.length; i++){\n        acc += Math.pow(256, i) * bytes[i];\n    }\n    return acc;\n}\n// convert byte strings to unsigned big endian numbers\nfunction decodeBEu(bytes) {\n    var acc = 0;\n    for(var i = 0; i < bytes.length; i++){\n        acc += Math.pow(256, bytes.length - i - 1) * bytes[i];\n    }\n    return acc;\n}\n// convert byte strings to signed big endian numbers\nfunction decodeBEs(bytes) {\n    var val = decodeBEu(bytes);\n    if ((bytes[0] & 0x80) == 0x80) {\n        val -= Math.pow(256, bytes.length);\n    }\n    return val;\n}\n// convert byte strings to signed little endian numbers\nfunction decodeLEs(bytes) {\n    var val = decodeLEu(bytes);\n    if ((bytes[bytes.length - 1] & 0x80) == 0x80) {\n        val -= Math.pow(256, bytes.length);\n    }\n    return val;\n}\nfunction words(decode) {\n    var self = {};\n    [\n        1,\n        2,\n        4,\n        8\n    ].forEach(function(bytes) {\n        var bits = bytes * 8;\n        self[\"word\" + bits + \"le\"] = self[\"word\" + bits + \"lu\"] = decode(bytes, decodeLEu);\n        self[\"word\" + bits + \"ls\"] = decode(bytes, decodeLEs);\n        self[\"word\" + bits + \"be\"] = self[\"word\" + bits + \"bu\"] = decode(bytes, decodeBEu);\n        self[\"word\" + bits + \"bs\"] = decode(bytes, decodeBEs);\n    });\n    // word8be(n) == word8le(n) for all n\n    self.word8 = self.word8u = self.word8be;\n    self.word8s = self.word8bs;\n    return self;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/binary/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/binary/lib/vars.js":
/*!*****************************************!*\
  !*** ./node_modules/binary/lib/vars.js ***!
  \*****************************************/
/***/ ((module) => {

eval("module.exports = function(store) {\n    function getset(name, value) {\n        var node = vars.store;\n        var keys = name.split(\".\");\n        keys.slice(0, -1).forEach(function(k) {\n            if (node[k] === undefined) node[k] = {};\n            node = node[k];\n        });\n        var key = keys[keys.length - 1];\n        if (arguments.length == 1) {\n            return node[key];\n        } else {\n            return node[key] = value;\n        }\n    }\n    var vars = {\n        get: function(name) {\n            return getset(name);\n        },\n        set: function(name, value) {\n            return getset(name, value);\n        },\n        store: store || {}\n    };\n    return vars;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWJ2aWRpeC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9iaW5hcnkvbGliL3ZhcnMuanM/NDJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIGZ1bmN0aW9uIGdldHNldCAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB2YXJzLnN0b3JlO1xuICAgICAgICB2YXIga2V5cyA9IG5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAga2V5cy5zbGljZSgwLC0xKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICBpZiAobm9kZVtrXSA9PT0gdW5kZWZpbmVkKSBub2RlW2tdID0ge307XG4gICAgICAgICAgICBub2RlID0gbm9kZVtrXVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB2YXIgdmFycyA9IHtcbiAgICAgICAgZ2V0IDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRzZXQobmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCA6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldHNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3JlIDogc3RvcmUgfHwge30sXG4gICAgfTtcbiAgICByZXR1cm4gdmFycztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInN0b3JlIiwiZ2V0c2V0IiwibmFtZSIsInZhbHVlIiwibm9kZSIsInZhcnMiLCJrZXlzIiwic3BsaXQiLCJzbGljZSIsImZvckVhY2giLCJrIiwidW5kZWZpbmVkIiwia2V5IiwibGVuZ3RoIiwiYXJndW1lbnRzIiwiZ2V0Iiwic2V0Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLEtBQUs7SUFDNUIsU0FBU0MsT0FBUUMsSUFBSSxFQUFFQyxLQUFLO1FBQ3hCLElBQUlDLE9BQU9DLEtBQUtMLEtBQUs7UUFDckIsSUFBSU0sT0FBT0osS0FBS0ssS0FBSyxDQUFDO1FBQ3RCRCxLQUFLRSxLQUFLLENBQUMsR0FBRSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQ2hDLElBQUlOLElBQUksQ0FBQ00sRUFBRSxLQUFLQyxXQUFXUCxJQUFJLENBQUNNLEVBQUUsR0FBRyxDQUFDO1lBQ3RDTixPQUFPQSxJQUFJLENBQUNNLEVBQUU7UUFDbEI7UUFDQSxJQUFJRSxNQUFNTixJQUFJLENBQUNBLEtBQUtPLE1BQU0sR0FBRyxFQUFFO1FBQy9CLElBQUlDLFVBQVVELE1BQU0sSUFBSSxHQUFHO1lBQ3ZCLE9BQU9ULElBQUksQ0FBQ1EsSUFBSTtRQUNwQixPQUNLO1lBQ0QsT0FBT1IsSUFBSSxDQUFDUSxJQUFJLEdBQUdUO1FBQ3ZCO0lBQ0o7SUFFQSxJQUFJRSxPQUFPO1FBQ1BVLEtBQU0sU0FBVWIsSUFBSTtZQUNoQixPQUFPRCxPQUFPQztRQUNsQjtRQUNBYyxLQUFNLFNBQVVkLElBQUksRUFBRUMsS0FBSztZQUN2QixPQUFPRixPQUFPQyxNQUFNQztRQUN4QjtRQUNBSCxPQUFRQSxTQUFTLENBQUM7SUFDdEI7SUFDQSxPQUFPSztBQUNYIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2JpbmFyeS9saWIvdmFycy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/binary/lib/vars.js\n");

/***/ })

};
;