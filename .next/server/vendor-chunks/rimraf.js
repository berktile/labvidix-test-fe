/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rimraf";
exports.ids = ["vendor-chunks/rimraf"];
exports.modules = {

/***/ "(ssr)/./node_modules/rimraf/rimraf.js":
/*!***************************************!*\
  !*** ./node_modules/rimraf/rimraf.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const assert = __webpack_require__(/*! assert */ \"assert\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nlet glob = undefined;\ntry {\n    glob = __webpack_require__(/*! glob */ \"(ssr)/./node_modules/glob/glob.js\");\n} catch (_err) {\n// treat glob as optional.\n}\nconst defaultGlobOpts = {\n    nosort: true,\n    silent: true\n};\n// for EMFILE handling\nlet timeout = 0;\nconst isWindows = process.platform === \"win32\";\nconst defaults = (options)=>{\n    const methods = [\n        \"unlink\",\n        \"chmod\",\n        \"stat\",\n        \"lstat\",\n        \"rmdir\",\n        \"readdir\"\n    ];\n    methods.forEach((m)=>{\n        options[m] = options[m] || fs[m];\n        m = m + \"Sync\";\n        options[m] = options[m] || fs[m];\n    });\n    options.maxBusyTries = options.maxBusyTries || 3;\n    options.emfileWait = options.emfileWait || 1000;\n    if (options.glob === false) {\n        options.disableGlob = true;\n    }\n    if (options.disableGlob !== true && glob === undefined) {\n        throw Error(\"glob dependency not found, set `options.disableGlob = true` if intentional\");\n    }\n    options.disableGlob = options.disableGlob || false;\n    options.glob = options.glob || defaultGlobOpts;\n};\nconst rimraf = (p, options, cb)=>{\n    if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n    }\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert.equal(typeof cb, \"function\", \"rimraf: callback function required\");\n    assert(options, \"rimraf: invalid options argument provided\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    defaults(options);\n    let busyTries = 0;\n    let errState = null;\n    let n = 0;\n    const next = (er)=>{\n        errState = errState || er;\n        if (--n === 0) cb(errState);\n    };\n    const afterGlob = (er, results)=>{\n        if (er) return cb(er);\n        n = results.length;\n        if (n === 0) return cb();\n        results.forEach((p)=>{\n            const CB = (er)=>{\n                if (er) {\n                    if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") && busyTries < options.maxBusyTries) {\n                        busyTries++;\n                        // try again, with the same exact callback as this one.\n                        return setTimeout(()=>rimraf_(p, options, CB), busyTries * 100);\n                    }\n                    // this one won't happen if graceful-fs is used.\n                    if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n                        return setTimeout(()=>rimraf_(p, options, CB), timeout++);\n                    }\n                    // already gone\n                    if (er.code === \"ENOENT\") er = null;\n                }\n                timeout = 0;\n                next(er);\n            };\n            rimraf_(p, options, CB);\n        });\n    };\n    if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [\n        p\n    ]);\n    options.lstat(p, (er, stat)=>{\n        if (!er) return afterGlob(null, [\n            p\n        ]);\n        glob(p, options.glob, afterGlob);\n    });\n};\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nconst rimraf_ = (p, options, cb)=>{\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    // sunos lets the root user unlink directories, which is... weird.\n    // so we have to lstat here and make sure it's not a dir.\n    options.lstat(p, (er, st)=>{\n        if (er && er.code === \"ENOENT\") return cb(null);\n        // Windows can EPERM on stat.  Life is suffering.\n        if (er && er.code === \"EPERM\" && isWindows) fixWinEPERM(p, options, er, cb);\n        if (st && st.isDirectory()) return rmdir(p, options, er, cb);\n        options.unlink(p, (er)=>{\n            if (er) {\n                if (er.code === \"ENOENT\") return cb(null);\n                if (er.code === \"EPERM\") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n                if (er.code === \"EISDIR\") return rmdir(p, options, er, cb);\n            }\n            return cb(er);\n        });\n    });\n};\nconst fixWinEPERM = (p, options, er, cb)=>{\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    options.chmod(p, 438, (er2)=>{\n        if (er2) cb(er2.code === \"ENOENT\" ? null : er);\n        else options.stat(p, (er3, stats)=>{\n            if (er3) cb(er3.code === \"ENOENT\" ? null : er);\n            else if (stats.isDirectory()) rmdir(p, options, er, cb);\n            else options.unlink(p, cb);\n        });\n    });\n};\nconst fixWinEPERMSync = (p, options, er)=>{\n    assert(p);\n    assert(options);\n    try {\n        options.chmodSync(p, 438);\n    } catch (er2) {\n        if (er2.code === \"ENOENT\") return;\n        else throw er;\n    }\n    let stats;\n    try {\n        stats = options.statSync(p);\n    } catch (er3) {\n        if (er3.code === \"ENOENT\") return;\n        else throw er;\n    }\n    if (stats.isDirectory()) rmdirSync(p, options, er);\n    else options.unlinkSync(p);\n};\nconst rmdir = (p, options, originalEr, cb)=>{\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n    // if we guessed wrong, and it's not a directory, then\n    // raise the original error.\n    options.rmdir(p, (er)=>{\n        if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")) rmkids(p, options, cb);\n        else if (er && er.code === \"ENOTDIR\") cb(originalEr);\n        else cb(er);\n    });\n};\nconst rmkids = (p, options, cb)=>{\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    options.readdir(p, (er, files)=>{\n        if (er) return cb(er);\n        let n = files.length;\n        if (n === 0) return options.rmdir(p, cb);\n        let errState;\n        files.forEach((f)=>{\n            rimraf(path.join(p, f), options, (er)=>{\n                if (errState) return;\n                if (er) return cb(errState = er);\n                if (--n === 0) options.rmdir(p, cb);\n            });\n        });\n    });\n};\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nconst rimrafSync = (p, options)=>{\n    options = options || {};\n    defaults(options);\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert(options, \"rimraf: missing options\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    let results;\n    if (options.disableGlob || !glob.hasMagic(p)) {\n        results = [\n            p\n        ];\n    } else {\n        try {\n            options.lstatSync(p);\n            results = [\n                p\n            ];\n        } catch (er) {\n            results = glob.sync(p, options.glob);\n        }\n    }\n    if (!results.length) return;\n    for(let i = 0; i < results.length; i++){\n        const p = results[i];\n        let st;\n        try {\n            st = options.lstatSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            // Windows can EPERM on stat.  Life is suffering.\n            if (er.code === \"EPERM\" && isWindows) fixWinEPERMSync(p, options, er);\n        }\n        try {\n            // sunos lets the root user unlink directories, which is... weird.\n            if (st && st.isDirectory()) rmdirSync(p, options, null);\n            else options.unlinkSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            if (er.code === \"EPERM\") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n            if (er.code !== \"EISDIR\") throw er;\n            rmdirSync(p, options, er);\n        }\n    }\n};\nconst rmdirSync = (p, options, originalEr)=>{\n    assert(p);\n    assert(options);\n    try {\n        options.rmdirSync(p);\n    } catch (er) {\n        if (er.code === \"ENOENT\") return;\n        if (er.code === \"ENOTDIR\") throw originalEr;\n        if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\") rmkidsSync(p, options);\n    }\n};\nconst rmkidsSync = (p, options)=>{\n    assert(p);\n    assert(options);\n    options.readdirSync(p).forEach((f)=>rimrafSync(path.join(p, f), options));\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    const retries = isWindows ? 100 : 1;\n    let i = 0;\n    do {\n        let threw = true;\n        try {\n            const ret = options.rmdirSync(p, options);\n            threw = false;\n            return ret;\n        } finally{\n            if (++i < retries && threw) continue;\n        }\n    }while (true);\n};\nmodule.exports = rimraf;\nrimraf.sync = rimrafSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rimraf/rimraf.js\n");

/***/ })

};
;